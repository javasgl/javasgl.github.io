{"meta":{"title":"Mr.song","subtitle":"step by step","description":"A journey of a thousand miles begins with single step","author":"songgl","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-03-18T05:16:38.000Z","updated":"2017-03-18T15:01:02.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-03-18T14:27:55.000Z","updated":"2017-03-18T15:01:02.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hmmmm……还没想好写点啥~~~"},{"title":"tags","date":"2017-03-18T05:15:36.000Z","updated":"2017-03-18T15:01:02.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"解决MacOS Sierra 升级后原有的ssh private key无法通过验证","slug":"MacOS-Sierra-ssh-config","date":"2017-03-19T05:36:32.000Z","updated":"2017-03-19T06:14:42.000Z","comments":true,"path":"MacOS-Sierra-ssh-config/","link":"","permalink":"http://yoursite.com/MacOS-Sierra-ssh-config/","excerpt":"周末正好有空,就准备把mac pro 升级到最新的sierra版本，毕竟已经落后于apple官方两个比较大的版本了。 升级过程很简单，也很顺利。直接通过appstore上在线更新即可，下载完成之后安装向导步骤完成即可。 直到….我发现公司测试环境502之后，想要登陆到机器上去处理一下的时候，我的ssh key竟然毫无征兆的被deny了！升级之前能登陆服务器，升级之后无法登陆。","text":"周末正好有空,就准备把mac pro 升级到最新的sierra版本，毕竟已经落后于apple官方两个比较大的版本了。 升级过程很简单，也很顺利。直接通过appstore上在线更新即可，下载完成之后安装向导步骤完成即可。 直到….我发现公司测试环境502之后，想要登陆到机器上去处理一下的时候，我的ssh key竟然毫无征兆的被deny了！升级之前能登陆服务器，升级之后无法登陆。 问了其他同事，跳板机能正常登陆的，排除了机房出问题的可能性。那就说明这是本地的ssh agent升级后出问题了。 同时，我也试了下github的key是否也不能使用。结果正如我所料:123456ssh -v github.com..........debug1: Skipping ssh-dss key xxxx/xxxx/xxx/ - not in PubkeyAcceptedKeyTypes.....Permission denied (publickey). 更加证实了我的想法: 这是Mac升级后导致的后来 google 发现这个问题很正常，很多人都在升级后遇到了这个问题。同时也暂时采用了临时方案：1234Host \"github.com\" User \"git\" IdentityFile \"/xxx/xxxx/xxx\" PubkeyAcceptedKeyTypes=+ssh-dss 在.ssh/config 中添加了 PubkeyAcceptedKeyTypes=+ssh-dss 配置，让 ssh 接受 dsa 类型的key。 最终方案应该是采用更加安全的 RSA 算法来生成 key，长度为 2048的 RSA。1024长度的RSA已经有被暴力破解成功的记录了，所以建议采用 2048 长度1ssh-keygen -t rsa -b 2048 -C \"new key\" 当然，采用 ecdsa 更好，不过考虑到Openssl的兼容问题，在ecdsa未完全通用的情况下还是使用RSA比较好。","categories":[{"name":"os","slug":"os","permalink":"http://yoursite.com/categories/os/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"},{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"}]},{"title":"Linux zgrep使用笔记","slug":"Linux-zgrep","date":"2017-03-17T09:20:05.000Z","updated":"2017-03-18T15:01:02.000Z","comments":true,"path":"Linux-zgrep/","link":"","permalink":"http://yoursite.com/Linux-zgrep/","excerpt":"","text":"grep 可以用来搜索文件内容,而基于grep的 zgrep这可以用来在压缩包中搜索内容而不需要事先解压文件. 123456789101112131415161718192021222324252627282930313233343536[root@yourdream ~]# cat test.gopackage mainimport ( \"fmt\")func main()&#123; fmt.Println(\"Hello Golang!\");&#125;[root@yourdream ~]# tar zcf test.tar.gz test.go[root@yourdream ~]# file test.tar.gztest.tar.gz: gzip compressed data, from Unix, last modified: Fri Mar 17 17:23:09 2017[root@yourdream ~]# zgrep \"fmt\" test.tar.gzBinary file (standard input) matches[root@yourdream ~]# zgrep -a \"fmt\" test.tar.gz \"fmt\" fmt.Println(\"Hello Golang!\");[root@yourdream ~]# tar -tvf test.tar.gz-rw-r--r-- root/root 81 2017-03-17 17:18 test.go[root@yourdream ~]# tar -rvf test.tar.gz test/test/test/a.php[root@yourdream ~]# tar -tvf test.tar.gz-rw-r--r-- root/root 81 2017-03-17 17:18 test.godrwxr-xr-x root/root 0 2017-03-17 17:50 test/-rw-r--r-- root/root 1127 2017-03-17 17:50 test/a.php[root@yourdream ~]# zgrep -aHn \"Hello\" test.tar.gztest.tar.gz:6: fmt.Println(\"Hello Golang!\");test.tar.gz:16:echo 'Hello php'; 注意需要加上 -a 参数,让其二进制文件当做文本处理 tar -u -r 先压缩包中添加文件 tar -H 显示文件名 tar -n 显示行号","categories":[{"name":"notes","slug":"notes","permalink":"http://yoursite.com/categories/notes/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"zgrep","slug":"zgrep","permalink":"http://yoursite.com/tags/zgrep/"}]},{"title":"iptables使用笔记","slug":"Linux-iptables","date":"2017-03-17T07:07:10.000Z","updated":"2017-03-18T15:01:02.000Z","comments":true,"path":"Linux-iptables/","link":"","permalink":"http://yoursite.com/Linux-iptables/","excerpt":"Linux 下防火墙 iptables 命令使用笔记 查看目前iptables设置 iptables -vnL --line-numbers -v verbose 详细信息 -n 显示数字端口等 -L list ,默认会显示filter表的规则 --line-numbers 显示序号,删除、插入时有用 删除规则iptables -t table -D INPUT ruleNumber -t table name,默认filter表,filter|Nat|Mangle|Raw -D delete INPUT chain name,INPUT|OUTPUT|FORWARD|PREROUTING|POSTROUTING ruleNumber rule number,可以使用--line-numbers参数查看 查看状态/etc/init.d/iptables status 保存修改/etc/init.d/iptables save,规则保存在/etc/sysconfg/iptables文件中 开启|重启|关闭/etc/init.d/iptables start|restart|stop","text":"Linux 下防火墙 iptables 命令使用笔记 查看目前iptables设置 iptables -vnL --line-numbers -v verbose 详细信息 -n 显示数字端口等 -L list ,默认会显示filter表的规则 --line-numbers 显示序号,删除、插入时有用 删除规则iptables -t table -D INPUT ruleNumber -t table name,默认filter表,filter|Nat|Mangle|Raw -D delete INPUT chain name,INPUT|OUTPUT|FORWARD|PREROUTING|POSTROUTING ruleNumber rule number,可以使用--line-numbers参数查看 查看状态/etc/init.d/iptables status 保存修改/etc/init.d/iptables save,规则保存在/etc/sysconfg/iptables文件中 开启|重启|关闭/etc/init.d/iptables start|restart|stop examplesiptables -I INPUT -s 1.1.1.1 -p tcp -dport 6666 -m comment --comment &quot;some comment&quot; -j ACCEPT 向INPUT链中I(插入)一条规则,没有指定ruleNumber则插入到最前面 -s source,来源ip或者hostname -p protocol 协议 tcp,udp,icmp(ping包),all 等 /etc/protocols中protocol的均可以 -dport 目标端口 destination port,注意--dport和-dport -m match extension,启用扩展, comment是注释扩展 -j jump ACCEPT ACCEPT|DROP|REJECT|LOG 详细可参考 iptables详解,文章很详细!","categories":[{"name":"notes","slug":"notes","permalink":"http://yoursite.com/categories/notes/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"iptables","slug":"iptables","permalink":"http://yoursite.com/tags/iptables/"}]},{"title":"Go Get安装一些第三方库-网络问题","slug":"go-get-golang-x-packages","date":"2017-03-08T10:56:51.000Z","updated":"2017-03-18T15:01:02.000Z","comments":true,"path":"go-get-golang-x-packages/","link":"","permalink":"http://yoursite.com/go-get-golang-x-packages/","excerpt":"","text":"go在go get 一些 package时候的会由于众所周知的原因而无法下载。比如在安装 bee的时候有可能会遇到无法下载 golang.org/x/sys/unix 的问题。1unrecognized import path \"golang.org/x/sys/unix\" 解决方案：手动从github下载相应的package 12git clone --depth=1 https://github.com/golang/xxx.gitgit clone --depth=1 https://github.com/golang/xxx.git 注：xxx 为对应的需要的库 下载完成后，软链或者复制 到 $GOPATH/src/golang.org/x/ 下即可。1234567golang.org/└── x ├── net ├── sys └── tools4 directories 更为简便的方法：12345mkdir -p $GOPATH/src/golang.org/x/cd !$git clone https://github.com/golang/net.gitgit clone https://github.com/golang/sys.gitgit clone https://github.com/golang/tools.git","categories":[{"name":"go","slug":"go","permalink":"http://yoursite.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"http://yoursite.com/tags/go/"}]},{"title":"Atom 调整左侧目录字体大小","slug":"atom-set-font-size","date":"2017-03-07T14:39:49.000Z","updated":"2017-03-18T15:01:02.000Z","comments":true,"path":"atom-set-font-size/","link":"","permalink":"http://yoursite.com/atom-set-font-size/","excerpt":"","text":"刚刚安装好 atom的时候， 左侧的 tree 目录字体特别小，可以通过一下方式来设置 打开Atom-Stylesheet 找到 .tree-view 1234// style the background color of the tree view.tree-view &#123; // background-color: whitesmoke;&#125; 给 .tree-view 添加 font-size 即可： 123.tree-view &#123; font-size:16px;&#125; 当然，添加其他属性也是可以的，可以自己定制样式，颜色，字体，字号等，CSS语法","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"}]},{"title":"Atom设置代理","slug":"atom_set_proxy","date":"2017-03-07T14:10:01.000Z","updated":"2017-03-18T15:01:02.000Z","comments":true,"path":"atom_set_proxy/","link":"","permalink":"http://yoursite.com/atom_set_proxy/","excerpt":"由于众所周知的原因，Atom有时候安装插件的时候很慢甚至无法安装。可以通过设置代理来解决。前提是已经有一个可以使用的http代理。参考之前的文章：将socks5转为http代理 atom自带了一个工具 apm(atom package management) 这个工具可以用来设置一些系统配置 可以用apm config list 查看现有的系统配置信息 下面开始设置 http代理：","text":"由于众所周知的原因，Atom有时候安装插件的时候很慢甚至无法安装。可以通过设置代理来解决。前提是已经有一个可以使用的http代理。参考之前的文章：将socks5转为http代理 atom自带了一个工具 apm(atom package management) 这个工具可以用来设置一些系统配置 可以用apm config list 查看现有的系统配置信息 下面开始设置 http代理： 执行一下命令 123apm config set http-proxy http://host:portapm config set https-proxy http://host:portapm config set strict-ssl false 注意两点： https 配置的也是 http 而不是 https! set strict-ssl false 可以避免ssl 证书错误问题 其实直接修改 ~/.atom/.apmrc 文件也是可行的 具体说明可以查看 这里","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"atom","slug":"atom","permalink":"http://yoursite.com/tags/atom/"},{"name":"proxy","slug":"proxy","permalink":"http://yoursite.com/tags/proxy/"}]},{"title":"Mac上使用Privoxy 将 socks5转换为 http 代理","slug":"transfer_socks5_to_http_proxy","date":"2017-03-06T15:07:20.000Z","updated":"2017-03-18T15:01:02.000Z","comments":true,"path":"transfer_socks5_to_http_proxy/","link":"","permalink":"http://yoursite.com/transfer_socks5_to_http_proxy/","excerpt":"shadowsocks 挺不错的，但是有些时候需要使用http代理来爬墙。这时候可以使用privoxy来将 socks5 代理转换为 http代理。 步骤如下： 首先，确保 shadowsocks 已经正常起来的，默认的本地socks5端口号为 1080,可以使用 netstat 和 lsof 命令查看端口情况。 安装privoxy, mac 使用 brew install privoxy 即可 安装完成后，修改privoxy配置文件","text":"shadowsocks 挺不错的，但是有些时候需要使用http代理来爬墙。这时候可以使用privoxy来将 socks5 代理转换为 http代理。 步骤如下： 首先，确保 shadowsocks 已经正常起来的，默认的本地socks5端口号为 1080,可以使用 netstat 和 lsof 命令查看端口情况。 安装privoxy, mac 使用 brew install privoxy 即可 安装完成后，修改privoxy配置文件 1vim /usr/local/etc/privoxy/config 修改内容如下： 12forward-socks5t / 127.0.0.1:1080 .listen-address 127.0.0.1:8118 listen-address 默认是监听本地8118端口，如果端口没有被占用，可以不用修改 启动privoxy1/usr/local/sbin/privoxy /usr/local/etc/privoxy/config 可以使用 ps aux|grep privoxy和 lsof -i:8118来检查是否成功启动 正常情况下,可以使用http代理了，代理地址http://127.0.0.1:8118","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"proxy","slug":"proxy","permalink":"http://yoursite.com/tags/proxy/"},{"name":"socks5","slug":"socks5","permalink":"http://yoursite.com/tags/socks5/"},{"name":"http","slug":"http","permalink":"http://yoursite.com/tags/http/"},{"name":"privoxy","slug":"privoxy","permalink":"http://yoursite.com/tags/privoxy/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://yoursite.com/tags/shadowsocks/"}]}]}
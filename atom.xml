<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.song</title>
  
  <subtitle>step by step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-15T15:23:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>songgl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 推送大文件buffer设置</title>
    <link href="http://yoursite.com/git-post-buffer/"/>
    <id>http://yoursite.com/git-post-buffer/</id>
    <published>2017-11-15T15:09:50.000Z</published>
    <updated>2017-11-15T15:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>git默认的 http.postBuffer大小为1M。所以偶尔遇到比较大的文件或者项目时，会报出以下错误：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">error: </span>RPC failed; result=22, HTTP code = 411</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br></pre></td></tr></table></figure></p><p>这时可以通过设置 http.postBuffer来解决。下面设置为100M。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global http.<span class="attribute">postBuffer</span>=102400</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git默认的 http.postBuffer大小为1M。所以偶尔遇到比较大的文件或者项目时，会报出以下错误：&lt;br&gt;&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Buffered Channel + sync.WaitGroup 实现对 goroutinue 并发数的限制</title>
    <link href="http://yoursite.com/goroutinue-limit/"/>
    <id>http://yoursite.com/goroutinue-limit/</id>
    <published>2017-09-18T01:17:34.000Z</published>
    <updated>2017-11-15T15:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>写过爬虫的都应该考虑这个问题：不能毫无节制、毫无节操的无限制的并发爬取目标网站的内容，不然很容易被对方识别出来从而被封。</p><p>Go 的 goroutinue 机制使用起来非常简单，所以很多人比如我就喜欢用 Go 来写写爬虫。那么如何限制 goroutinue 并发数呢？</p><p>下面提供一种 Buffered Channel + sync.WaitGroup 实现对 goroutinue 并发数进行控制的思路。这种方式其实在 D&amp;K 所著的《The Go Programing Language》一书中的第八章(goroutinue and channels) 中也有提到。</p><a id="more"></a><p>具体代码如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">limiter := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">limiter &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> download(i, limiter, wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(index <span class="keyword">int</span>, limiter <span class="keyword">chan</span> <span class="keyword">bool</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Println(<span class="string">"start to download :"</span>, index)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&lt;-limiter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码中，sync.WaitGroup 主要用来管理 goroutinue ，而 limiter 这个带有缓冲的通道则是用来控制并发数。</p><p>由于通道的阻塞特性，当并发数达到规定的阈值(创建通道时指定的缓冲容量)之后, <code>limiter&lt;-true</code>就会阻塞，其后面的 <code>go download(i,limiter,wg)</code>就不会被执行到，达到了暂停产生 goroutinue 的效果，实现了对 goroutinue 并发数的控制。</p><p>当其中一个 download goroutinue 完成的时候，从 limiter 中释放了一个空位，此时，被 limiter 所阻塞的 for 循环得以继续执行，从而继续产生新的 goroutinue。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写过爬虫的都应该考虑这个问题：不能毫无节制、毫无节操的无限制的并发爬取目标网站的内容，不然很容易被对方识别出来从而被封。&lt;/p&gt;
&lt;p&gt;Go 的 goroutinue 机制使用起来非常简单，所以很多人比如我就喜欢用 Go 来写写爬虫。那么如何限制 goroutinue 并发数呢？&lt;/p&gt;
&lt;p&gt;下面提供一种 Buffered Channel + sync.WaitGroup 实现对 goroutinue 并发数进行控制的思路。这种方式其实在 D&amp;amp;K 所著的《The Go Programing Language》一书中的第八章(goroutinue and channels) 中也有提到。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="goroutinue" scheme="http://yoursite.com/tags/goroutinue/"/>
    
  </entry>
  
  <entry>
    <title>http压力测试工具--wrk</title>
    <link href="http://yoursite.com/http-benckmarking-tool-wrk/"/>
    <id>http://yoursite.com/http-benckmarking-tool-wrk/</id>
    <published>2017-09-17T02:36:55.000Z</published>
    <updated>2017-11-15T15:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个新的 http 压力测试工具 wrk ,简单好用。下载地址：<a href="https://github.com/wg/wrk" target="_blank" rel="noopener">https://github.com/wg/wrk</a> 。类似于之前个人经常使用的一些压测工具，详细请移步 <a href="/pressure-test-tools">压力测试工具ab、webbench、http_load、siege简单使用</a>。</p><p>wrk 使用非常简单，参数不多，但是足够自己简单压测一些 http 服务了。下面简单介绍下如何安装和使用。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要自己把源码下载下来，自行编译。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=<span class="number">1</span> https:<span class="comment">//github.com/wg/wrk</span></span><br><span class="line">cd wrk</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成之后，会在当前目录下生成一个 <code>wrk</code>的可执行文件。为方便以后使用，可以将其复制到系统 path 路径中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp wrk /usr/local/bin/.</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 wrk 会提示使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~ » wrk</span><br><span class="line">Usage: wrk &lt;options&gt; <span class="xml"><span class="tag">&lt;<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml">  Options:</span></span><br><span class="line">    -c, --connections &lt;N&gt;  Connections to keep open</span><br><span class="line">    -d, --duration    &lt;T&gt;  Duration of test</span><br><span class="line">    -t, --threads     &lt;N&gt;  Number of threads to use</span><br><span class="line"></span><br><span class="line">    -s, --script      &lt;S&gt;  Load Lua script file</span><br><span class="line">    -H, --header      &lt;H&gt;  Add header to request</span><br><span class="line">        --latency          Print latency statistics</span><br><span class="line">        --timeout     &lt;T&gt;  Socket/request timeout</span><br><span class="line">    -v, --version          Print version details</span><br><span class="line"></span><br><span class="line">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class="line">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure><p>使用案例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -c300 -d10m -t8 http:<span class="comment">//google.com</span></span><br></pre></td></tr></table></figure></p><p>-c300 ： 300连接<br>-d10m :  测试10分钟<br>-t8      :  使用8个线程</p><p>测试结果如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~ » wrk -c300 -d5s -t8 http:<span class="comment">//baidu.com</span></span><br><span class="line">Running <span class="number">5</span>s test @ http:<span class="comment">//baidu.com</span></span><br><span class="line">  <span class="number">8</span> threads and <span class="number">300</span> connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +<span class="regexp">/- Stdev</span></span><br><span class="line"><span class="regexp">    Latency   474.98ms  177.40ms   1.44s    77.13%</span></span><br><span class="line"><span class="regexp">    Req/</span>Sec    <span class="number">47.61</span>     <span class="number">41.14</span>   <span class="number">180.00</span>     <span class="number">79.78</span>%</span><br><span class="line">  <span class="number">516</span> requests <span class="keyword">in</span> <span class="number">5.05</span>s, <span class="number">194.51</span>KB read</span><br><span class="line">  Socket errors: connect <span class="number">0</span>, read <span class="number">2357</span>, write <span class="number">0</span>, timeout <span class="number">0</span></span><br><span class="line">Requests/sec:    <span class="number">102.18</span></span><br><span class="line">Transfer/sec:     <span class="number">38.52</span>KB</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现一个新的 http 压力测试工具 wrk ,简单好用。下载地址：&lt;a href=&quot;https://github.com/wg/wrk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wg/wrk&lt;/a&gt; 。类似于之前个人经常使用的一些压测工具，详细请移步 &lt;a href=&quot;/pressure-test-tools&quot;&gt;压力测试工具ab、webbench、http_load、siege简单使用&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;wrk 使用非常简单，参数不多，但是足够自己简单压测一些 http 服务了。下面简单介绍下如何安装和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="benchmark" scheme="http://yoursite.com/tags/benchmark/"/>
    
      <category term="wrk" scheme="http://yoursite.com/tags/wrk/"/>
    
  </entry>
  
  <entry>
    <title>python threading 多线程简单使用</title>
    <link href="http://yoursite.com/python-threading/"/>
    <id>http://yoursite.com/python-threading/</id>
    <published>2017-09-05T01:13:09.000Z</published>
    <updated>2017-11-15T15:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一个项目，使用 Flask 框架写了一个网络图片抓取的程序，当时时间紧急，多张图片下载的时候，就简简单单的使用 <code>for in</code> 循环去获取网络图片内容。后来有空了，看了下 python 的多线程的使用，挺简单的，就用 threading 重新改造了下这个程序，让其支持多线程。</p><a id="more"></a><p>python theading 多线程基本使用方式非常简单:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hello(<span class="number">*a</span>rgs):</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">threads=[]</span><br><span class="line"></span><br><span class="line"><span class="attribute">i</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;10:</span><br><span class="line">i+=1</span><br><span class="line">threads.append(threading.Thread(<span class="attribute">target</span>=hello))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure></p><p>当时使用 threading 的时候，遇到了一个问题: 如何获取子线程执行结果？<br>网上搜索一番，基本上有两种方案:</p><ul><li>继承 threading.Thread, 重载 run 方法。</li><li>使用外部资源，比如共享存储，队列等方式</li></ul><p>项目比较简单，所以直接选择了第一种方式来实现，避免依赖于外部资源。自己封装了一个 CustomThreader 类,代码寥寥几行，非常简单:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomThread</span>(<span class="title">threading</span>.<span class="title">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, func, args=()</span></span>)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">super</span>(CustomThread, <span class="keyword">self</span>).__init_<span class="number">_</span>()</span><br><span class="line">        <span class="keyword">self</span>.func = func</span><br><span class="line">        <span class="keyword">self</span>.args = args</span><br><span class="line">        <span class="keyword">self</span>.result = None</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.result = <span class="keyword">self</span>.func(<span class="keyword">self</span>.args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getResult</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.result</span><br></pre></td></tr></table></figure></p><p>继承了 threading.Thread, 重载了 run 方法，在 run 方法里面讲执行结果复制给了成员变量 result, 然后对外提供了一个获取返回结果的方法 getResult。<br>使用方式简单，只需要做一下改动即可：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">threads.append(CustomThread(func=hello,args=<span class="built_in">param</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">result</span>=[]</span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line"><span class="built_in">result</span>.append(thread.getResult())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一个项目，使用 Flask 框架写了一个网络图片抓取的程序，当时时间紧急，多张图片下载的时候，就简简单单的使用 &lt;code&gt;for in&lt;/code&gt; 循环去获取网络图片内容。后来有空了，看了下 python 的多线程的使用，挺简单的，就用 threading 重新改造了下这个程序，让其支持多线程。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>json-iterator--更快的json解析库</title>
    <link href="http://yoursite.com/go-json-iterator/"/>
    <id>http://yoursite.com/go-json-iterator/</id>
    <published>2017-08-31T07:24:51.000Z</published>
    <updated>2017-08-31T13:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang 中自带了非常方便解析json 的库 <code>encoding/json</code>,一般情况下也是使用这个库来作为 json 的 encode / decode。但是在有些场景下，比如解析大量json格式的日志数据的时候，json的解析性能问题就是一个需要特别关注的问题了。</p><p>滴滴出行平台技术部的开源json解析库 <a href="https://github.com/json-iterator/go" target="_blank" rel="noopener">json-iterator</a>，性能比原生的 encoding/json 快很多。</p><p>下面自己就简单测试了下两者的区别,测试代码很简单，就简单测试了下两者 Unmarshal 和 Marshal 的性能表现：<br><a id="more"></a></p><p>测试代码: <a href="https://gist.github.com/javasgl/e405c436963d2fd7c91c03a05ddcb6b9" target="_blank" rel="noopener">json-benckmark_test.go</a></p><script src="https://gist.github.com/javasgl/e405c436963d2fd7c91c03a05ddcb6b9.js"></script><p>执行 go test -test.bench=.后结果:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Benchmark_array_by_json<span class="number">-4</span>          <span class="number">500000</span>      <span class="number">2748</span> ns/op     <span class="number">456</span> B/op      <span class="number">14</span> allocs/op</span><br><span class="line">Benchmark_array_by_jsoniter<span class="number">-4</span>     <span class="number">2000000</span>       <span class="number">676</span> ns/op     <span class="number">144</span> B/op       <span class="number">3</span> allocs/op</span><br><span class="line">Benchmark_decode_by_json<span class="number">-4</span>         <span class="number">500000</span>      <span class="number">2804</span> ns/op</span><br><span class="line">Benchmark_decode_by_jsoniter<span class="number">-4</span>    <span class="number">2000000</span>       <span class="number">764</span> ns/op</span><br><span class="line">PASS</span><br><span class="line">ok  learnGo/json<span class="number">7.217</span>s</span><br></pre></td></tr></table></figure></p><p>可见，json 和 jsoniter 在 Unmarshal 和 Marshal 方面的差别还是比较大的。</p><p>go 版本的 jsoniter/go 最近已经发布了 1.0 版本，Kubernetes V1.8 准备引入这个库,见 <a href="https://github.com/json-iterator/go/issues/154。" target="_blank" rel="noopener">https://github.com/json-iterator/go/issues/154。</a></p><p>同时, jsoniter 也有 java 可以使用的库 <a href="https://github.com/json-iterator/java" target="_blank" rel="noopener">jsoniter/java</a>, 据官方测试，性能比我之前比较喜欢使用的 alibaba 的 fastjson 都还要好,以后有机会可以尝试下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang 中自带了非常方便解析json 的库 &lt;code&gt;encoding/json&lt;/code&gt;,一般情况下也是使用这个库来作为 json 的 encode / decode。但是在有些场景下，比如解析大量json格式的日志数据的时候，json的解析性能问题就是一个需要特别关注的问题了。&lt;/p&gt;
&lt;p&gt;滴滴出行平台技术部的开源json解析库 &lt;a href=&quot;https://github.com/json-iterator/go&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;json-iterator&lt;/a&gt;，性能比原生的 encoding/json 快很多。&lt;/p&gt;
&lt;p&gt;下面自己就简单测试了下两者的区别,测试代码很简单，就简单测试了下两者 Unmarshal 和 Marshal 的性能表现：&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="json-iterator" scheme="http://yoursite.com/tags/json-iterator/"/>
    
      <category term="encoding" scheme="http://yoursite.com/tags/encoding/"/>
    
      <category term="fastjson" scheme="http://yoursite.com/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>codis dashboard 无法启动处理流程</title>
    <link href="http://yoursite.com/codis-dashboard/"/>
    <id>http://yoursite.com/codis-dashboard/</id>
    <published>2017-08-31T07:03:20.000Z</published>
    <updated>2017-08-31T13:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 codis 过程中，当 codis dashboard 异常挂掉之后，重启 codis-dashboard的时候，无法启动，日志报错信息为：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">46</span> dashboard.go:<span class="number">234</span>: [PANIC] create zk <span class="keyword">node</span> <span class="title">failed</span></span><br><span class="line">[error]: dashboard already exists: &#123;<span class="string">"addr"</span>: <span class="string">"192.168.0.1:28087"</span>, <span class="string">"pid"</span>: <span class="number">15716</span>&#125;</span><br></pre></td></tr></table></figure></p><p>提示无法创建 zookeeper node,因为已经存在 dashboard node 了。</p><p>处理方案：连上 zookeeper, 删除相应的节点后重新启动 codis-dashboard。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/zookeeper/</span>bin/zkCli.sh -server <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2181</span></span><br><span class="line">delete <span class="meta-keyword">/zk/</span>path/dashboard</span><br></pre></td></tr></table></figure></p><p>codis-dashboard 重新起来之后，发现还是无法连接 codis。<br><a id="more"></a><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">160</span>: [INFO] dashboard listening on addr: :<span class="number">28087</span></span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">143</span>: [INFO] dashboard node created: /zk/codis/path/dashboard, &#123;<span class="string">"addr"</span>: <span class="string">"192.168.0.1:28087"</span>, <span class="string">"pid"</span>: <span class="number">10261</span>&#125;</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">144</span>: [WARN] ********** Attention **********</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">145</span>: [WARN] You should use `<span class="built_in">kill</span> &#123;pid&#125;` rather than `<span class="built_in">kill</span> -<span class="number">9</span> &#123;pid&#125;` to stop me,</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">146</span>: [WARN] <span class="keyword">or</span> the node resisted on zk will <span class="keyword">not</span> be cleaned when I'm quiting <span class="keyword">and</span> you must <span class="built_in">remove</span> it manually</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">147</span>: [WARN] *******************************</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">09</span> proxy.<span class="built_in">go</span>:<span class="number">191</span>: [INFO] mark_offline, check proxy <span class="built_in">status</span>:proxy_1&lt;nil&gt; zk: node does <span class="keyword">not</span> exist</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">09</span> proxy.<span class="built_in">go</span>:<span class="number">193</span>: [INFO] shutdown proxy successful</span><br></pre></td></tr></table></figure></p><p>这时候需要访问 <a href="http://192.192.168.0.1:2181/admin" target="_blank" rel="noopener">http://192.192.168.0.1:2181/admin</a> ，找到最后的 proxy status。将相应的 proxy Mark Online 即可。<br>启动日志中也提到了，对于 kill -9 pid 停止 codis 的情况，需要手动删除 zookeeper 相应的节点。</p><p>zookeeper 常用命令，使用 help 查看:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">stat path [watch]</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">path</span> <span class="keyword">data</span> [<span class="keyword">version</span>]</span><br><span class="line">ls <span class="keyword">path</span> [watch]</span><br><span class="line">delquota [-n|-b] <span class="keyword">path</span></span><br><span class="line">ls2 <span class="keyword">path</span> [watch]</span><br><span class="line">setAcl <span class="keyword">path</span> acl</span><br><span class="line">setquota -n|-b val <span class="keyword">path</span></span><br><span class="line">history</span><br><span class="line"><span class="keyword">redo</span> cmdno</span><br><span class="line">printwatches <span class="keyword">on</span>|<span class="keyword">off</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">path</span> [<span class="keyword">version</span>]</span><br><span class="line"><span class="keyword">sync</span> <span class="keyword">path</span></span><br><span class="line">listquota <span class="keyword">path</span></span><br><span class="line">rmr <span class="keyword">path</span></span><br><span class="line"><span class="keyword">get</span> <span class="keyword">path</span> [watch]</span><br><span class="line"><span class="keyword">create</span> [-s] [-e] <span class="keyword">path</span> <span class="keyword">data</span> acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit</span><br><span class="line">getAcl <span class="keyword">path</span></span><br><span class="line"><span class="keyword">close</span></span><br><span class="line"><span class="keyword">connect</span> host:port</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 codis 过程中，当 codis dashboard 异常挂掉之后，重启 codis-dashboard的时候，无法启动，日志报错信息为：&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;08&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;46&lt;/span&gt; dashboard.go:&lt;span class=&quot;number&quot;&gt;234&lt;/span&gt;: [PANIC] create zk &lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[error]: dashboard already exists: &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;addr&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;192.168.0.1:28087&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;pid&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15716&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示无法创建 zookeeper node,因为已经存在 dashboard node 了。&lt;/p&gt;
&lt;p&gt;处理方案：连上 zookeeper, 删除相应的节点后重新启动 codis-dashboard。&lt;br&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;meta-keyword&quot;&gt;/zookeeper/&lt;/span&gt;bin/zkCli.sh -server &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2181&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete &lt;span class=&quot;meta-keyword&quot;&gt;/zk/&lt;/span&gt;path/dashboard&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;codis-dashboard 重新起来之后，发现还是无法连接 codis。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="codis" scheme="http://yoursite.com/tags/codis/"/>
    
      <category term="zookeeper" scheme="http://yoursite.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>可变参数使用</title>
    <link href="http://yoursite.com/variable-parameter/"/>
    <id>http://yoursite.com/variable-parameter/</id>
    <published>2017-08-30T01:11:38.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多语言都支持可变参数，下面记录下平时主要使用的几种语言的可变参数用法。主要有 go、php、python、java、js等语言的可变参数的基本使用。</p><a id="more"></a><h2 id="go-可变参数"><a href="#go-可变参数" class="headerlink" title="go 可变参数"></a>go 可变参数</h2><p>go 可变参数只能是最后一个参数，参数接收后存放在一个 slice 中。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">hello(<span class="string">"variable parameter"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">3</span>)</span><br><span class="line">hello(<span class="string">"second"</span>, []<span class="keyword">int</span>&#123;<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(b <span class="keyword">string</span>, args ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(args)</span><br><span class="line">fmt.Println(reflect.TypeOf(args))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">variable parameter</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">45</span> <span class="number">56</span> <span class="number">3</span>]</span><br><span class="line">[]int</span><br><span class="line">second</span><br><span class="line">[<span class="number">22</span> <span class="number">33</span> <span class="number">44</span>]</span><br><span class="line">[]int</span><br></pre></td></tr></table></figure></p><h2 id="php-可变参数"><a href="#php-可变参数" class="headerlink" title="php 可变参数"></a>php 可变参数</h2><p>可变参数也只能是最后一个参数,参数接收后存放在一个 array 中。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">( $a , <span class="rest_arg">...$args</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print_r( $a );</span><br><span class="line">echo PHP_EOL . <span class="string">'.....'</span> . PHP_EOL;</span><br><span class="line">print_r( $args );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello( <span class="string">'first'</span> , <span class="number">1</span> , <span class="number">2</span> , <span class="string">'string'</span> , <span class="number">4</span> , <span class="string">"5"</span> );</span><br><span class="line">hello( <span class="string">'second'</span> , ...[ <span class="number">22</span> , <span class="number">33</span> , <span class="number">44</span> , <span class="number">55</span> ] );</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">first</span><br><span class="line">.....</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="type">string</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">5</span></span><br><span class="line">)</span><br><span class="line">second</span><br><span class="line">.....</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">22</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">33</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">44</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">55</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="python-可变参数"><a href="#python-可变参数" class="headerlink" title="python 可变参数"></a>python 可变参数</h2><p>python的可变参数有两个种方式</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">def hello(a,b,*c,**kwargs):</span><br><span class="line">    print a,b,c,kwargs</span><br><span class="line"></span><br><span class="line">hello(<span class="string">"first"</span>,<span class="string">"second"</span>)</span><br><span class="line">hello(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>,<span class="string">"fourth"</span>,order=<span class="string">"asc"</span>,group=<span class="string">"admin"</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">first <span class="title">second</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function">first <span class="title">second</span> (<span class="params"><span class="string">'third'</span>, <span class="string">'fourth'</span></span>) </span>&#123;<span class="string">'group'</span>: <span class="string">'admin'</span>, <span class="string">'order'</span>: <span class="string">'asc'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>python 中可变参数方式一：<em>arg,这种可变参数传递时不需要指定参数的key，参数接收后存放在 tuple 中。<br>python 中可变参数方式二：*</em>kwargs，这种方式接收的参数需要指定参数的key，参数接收后存放在 dict 中。</p><h2 id="java-可变参数"><a href="#java-可变参数" class="headerlink" title="java 可变参数"></a>java 可变参数</h2><p>Java 的可变参数只有能有一个，并且必须是方法的最后一个参数。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Hello&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">      hello(<span class="string">"first"</span>,<span class="number">2</span>,<span class="string">"args1"</span>,<span class="string">"args2"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> hello(<span class="keyword">String</span> a,<span class="keyword">int</span> b,<span class="keyword">String</span>... args)&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(a);</span><br><span class="line">    System.out.<span class="built_in">println</span>(b);</span><br><span class="line">    <span class="built_in">for</span>(<span class="keyword">String</span> param :args)&#123;</span><br><span class="line">      System.out.<span class="built_in">println</span>(param);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">first</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">args1</span><br><span class="line">args2</span><br></pre></td></tr></table></figure></p><p>可变参数存放于数组之中。</p><h2 id="js-可变参数"><a href="#js-可变参数" class="headerlink" title="js 可变参数"></a>js 可变参数</h2><p>js 可变参数可以通过js内置的 arguments 来访问：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a:'</span>+a);</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">"first"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'string'</span>)</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>:<span class="keyword">first</span></span><br><span class="line"><span class="keyword">first</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">string</span></span><br></pre></td></tr></table></figure></p><p>arguments 中也包含了其他非可变参数的内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多语言都支持可变参数，下面记录下平时主要使用的几种语言的可变参数用法。主要有 go、php、python、java、js等语言的可变参数的基本使用。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译 go 程序</title>
    <link href="http://yoursite.com/go-cross-complie/"/>
    <id>http://yoursite.com/go-cross-complie/</id>
    <published>2017-08-29T00:54:51.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信大多数人和我一样，都是在 mac 或者 windows 上写 go 代码，但是最终上线运行却是在 Linux 系统之上。这就涉及到一个问题：由于操作系统架构的差异，编译过后的二进制程序能够在多个系统下正常运行么？</p><p>go 不像 java 等运行于 JVM 之上的语言，也不像 php , python 等解释性语言，它需要编译后不依赖于其他环境就能执行，但是编译过程却依赖于系统架构，所以 go 需要交叉编译。</p><p>释义：交叉编译，就是在一个平台上生成另一个平台上的可执行代码。</p><p>go 非常方便的支持交叉编译。<br><a id="more"></a></p><p>我们先来看看不同环境下 go env 返回的结果。</p><p>Mac 下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GOARCH</span>=<span class="string">"amd64"</span></span><br><span class="line"><span class="attr">GOOS</span>=<span class="string">"darwin"</span></span><br><span class="line"><span class="attr">CGO_ENABLED</span>=<span class="string">"1"</span></span><br></pre></td></tr></table></figure></p><p>Linux 下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GOARCH</span>=<span class="string">"amd64"</span></span><br><span class="line"><span class="attr">GOOS</span>=<span class="string">"linux"</span></span><br><span class="line"><span class="attr">CGO_ENABLED</span>=<span class="string">"1"</span></span><br></pre></td></tr></table></figure></p><p>架构均是 x64 架构，区别是 GOOS 。</p><p>比如，我在 mac 上开发，最终需要部署到 linux 上运行，在没有 ci(持续集成)的支持下，一般有两种方式：</p><ul><li>将源代码复制到目标服务器上( scp 或者 git )，然后在目标机器上 go build 编译。</li><li>本地编译，只将最终编译过后的二进制文件复制到目标机器上。</li></ul><p>大多数肯定倾向于第二种方式，那么这时候就需要交叉编译了。</p><p>编译成Linux下可执行文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CGO_ENABLED</span>=0 <span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=amd64 go build</span><br></pre></td></tr></table></figure></p><p>编译成Windows下可执行文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CGO_ENABLED</span>=0 <span class="attribute">GOOS</span>=windows <span class="attribute">GOARCH</span>=amd64 go build</span><br></pre></td></tr></table></figure></p><p>编译过后，将二进制传送到相应系统即可运行。</p><p>但是，这种交叉编译有一点限制就是：</p><p>不支持CGO的交叉编译，如果程序中使用了 CGO , 则不能通过这种方式来交叉编译。</p><p>如果使用 GUN Make ,则可以将以上参数写到 Makefile 文件中:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">build-linux:</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CGO_ENABLED</span>=0 &amp;&amp; <span class="builtin-name">export</span> <span class="attribute">GOOS</span>=linux &amp;&amp; <span class="builtin-name">export</span> <span class="attribute">GOARCH</span>=amd64 &amp;&amp; go build</span><br><span class="line"></span><br><span class="line">build-wins:</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CGO_ENABLED</span>=0 &amp;&amp; <span class="builtin-name">export</span> <span class="attribute">GOOS</span>=windows &amp;&amp; <span class="builtin-name">export</span> <span class="attribute">GOARCH</span>=amd64 &amp;&amp; go build</span><br></pre></td></tr></table></figure></p><p>参考：</p><ul><li><a href="https://solovyov.net/en/2012/cross-compiling-go/" target="_blank" rel="noopener">cross-compilling-go</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大多数人和我一样，都是在 mac 或者 windows 上写 go 代码，但是最终上线运行却是在 Linux 系统之上。这就涉及到一个问题：由于操作系统架构的差异，编译过后的二进制程序能够在多个系统下正常运行么？&lt;/p&gt;
&lt;p&gt;go 不像 java 等运行于 JVM 之上的语言，也不像 php , python 等解释性语言，它需要编译后不依赖于其他环境就能执行，但是编译过程却依赖于系统架构，所以 go 需要交叉编译。&lt;/p&gt;
&lt;p&gt;释义：交叉编译，就是在一个平台上生成另一个平台上的可执行代码。&lt;/p&gt;
&lt;p&gt;go 非常方便的支持交叉编译。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="complie" scheme="http://yoursite.com/tags/complie/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 几种 Search Type</title>
    <link href="http://yoursite.com/es-search-type/"/>
    <id>http://yoursite.com/es-search-type/</id>
    <published>2017-08-24T08:45:45.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Search Type 有助于理解 Elasticsearch 在多个分片(shard)的情况下，是如何搜索的，是如何决定返回数据数量、如何排序、如何算分的？</p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>在多个分片情况下，查询 0-20 条记录，elasticsearch 会将请求转发到每个分片上，从每个分片上获取 20 条记录，然后返回给分发节点进行汇总，最后再从汇总的结果中取 0-20 数据返回给客户端。<br>则就是 elasticsearch 分布式搜索的基本的执行过程。</p><h2 id="Search-Type"><a href="#Search-Type" class="headerlink" title="Search Type"></a>Search Type</h2><p>Elasticsearch 中的 search type 主要有 6种：Query then fetch、Dfs Query then fetch、Count、Scan、Query and fetch、Dfs query and fetch。</p><a id="more"></a><p>执行请求的过程中，涉及到几个不同的 search type。</p><ul><li><p>Query then fetch<br>  查询主要分为两步:<br>  第一步，查询节点首先将请求转发给所有参与的节点，每个节点依据自身的数据执行查询，并将必要的信息返回给查询节点,查询节点进行合并、重新排序等操作。<br>  第二步，查询节点仅从相关的节点获取数据返回。</p><p>  如果没有在请求中没有指定 search_type 参数这这是默认的方式。</p></li><li><p>Dfs Query then fetch</p><p>  和 Query then fetch 一样，只不过在第一步转发请求的时候，它将计算分布式词频来获得更准确的得分。</p></li><li><p>Count</p><p>  顾名思义，这个并不返回文档数据，只返回文档的数量。</p></li><li><p>Scan</p><p>  适用于大量数据进行深度分页获取数据,禁用排序提升性能。</p></li><li><p>Query and fetch</p><p>  这是 elasticsearch 内部的一种优化，不需要手动指定。当请求只作用在一个节点上面的是否，Query then fetch 的两步就合并为一步执行了。当我们有时候为了避免聚合(Aggregation)不准确而将 numbers_of_shards 设置为1个的时候，所有的请求就只在一个节点上处理。</p></li><li><p>Dfs Query and fetch</p><p>  同 Dfs Query and fetch，也不需要手动执行，请求作用于单个节点时候的一种内部优化机制。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Search Type 有助于理解 Elasticsearch 在多个分片(shard)的情况下，是如何搜索的，是如何决定返回数据数量、如何排序、如何算分的？&lt;/p&gt;
&lt;h2 id=&quot;执行过程&quot;&gt;&lt;a href=&quot;#执行过程&quot; class=&quot;headerlink&quot; title=&quot;执行过程&quot;&gt;&lt;/a&gt;执行过程&lt;/h2&gt;&lt;p&gt;在多个分片情况下，查询 0-20 条记录，elasticsearch 会将请求转发到每个分片上，从每个分片上获取 20 条记录，然后返回给分发节点进行汇总，最后再从汇总的结果中取 0-20 数据返回给客户端。&lt;br&gt;则就是 elasticsearch 分布式搜索的基本的执行过程。&lt;/p&gt;
&lt;h2 id=&quot;Search-Type&quot;&gt;&lt;a href=&quot;#Search-Type&quot; class=&quot;headerlink&quot; title=&quot;Search Type&quot;&gt;&lt;/a&gt;Search Type&lt;/h2&gt;&lt;p&gt;Elasticsearch 中的 search type 主要有 6种：Query then fetch、Dfs Query then fetch、Count、Scan、Query and fetch、Dfs query and fetch。&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用 redis-check-aof 命令修复 aof 文件</title>
    <link href="http://yoursite.com/redis-check-aof/"/>
    <id>http://yoursite.com/redis-check-aof/</id>
    <published>2017-08-23T10:27:30.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然的一天，发现redis一个实例无法启动，启动的时候，从 aof 文件往内存中加载数据的时候，出现了错误：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad <span class="built_in">file</span> <span class="built_in">format</span> reading <span class="keyword">the</span> append only <span class="built_in">file</span>: make <span class="keyword">a</span> backup <span class="keyword">of</span> your AOF <span class="built_in">file</span>, <span class="keyword">then</span> use ./redis-check-aof <span class="comment">--fix filename</span></span><br></pre></td></tr></table></figure><p>提示，需要使用 redis-check-aof 来修复 aof 文件。</p><p>按照其步骤，先备份再修复：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hostname 6379]# redis-check-aof --fix appendonly.aof</span><br><span class="line">0x        6a60a5cb: Expected<span class="built_in"> prefix </span>'</span><br><span class="line">AOF analyzed: <span class="attribute">size</span>=1784722401, <span class="attribute">ok_up_to</span>=1784718795, <span class="attribute">diff</span>=3606</span><br><span class="line">This will shrink the AOF <span class="keyword">from</span> 1784722401 bytes, with 3606 bytes, <span class="keyword">to</span> 1784718795 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure></p><p>修复完成后，重新启动 redis 就能正常启动了。</p><p>同样，redis 如果采用的 rdb 模式持久化数据的话，如果需要修复 rdb 文件，可以使用 redis-check-dump file.rdb 来修复。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;偶然的一天，发现redis一个实例无法启动，启动的时候，从 aof 文件往内存中加载数据的时候，出现了错误：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="aof" scheme="http://yoursite.com/tags/aof/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch function 中 doc , _fields , _source 使用</title>
    <link href="http://yoursite.com/elasticsearch-function-doc/"/>
    <id>http://yoursite.com/elasticsearch-function-doc/</id>
    <published>2017-08-21T04:07:40.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>面对复杂的查询或者算分逻辑，Elasticsearch 可以使用 Scrpits 脚本功能来实现，实际项目之中也用的非常频繁。<br>在脚本中需要访问文档中的字段，此时有三种方式可以访问，分别是 doc , _fields , _source。这三个字段使用的时候还是有区别的。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"filtered"</span> : &#123;</span><br><span class="line">    <span class="string">"query"</span> : &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"filter"</span> : &#123;</span><br><span class="line">        <span class="string">"script"</span> : &#123;</span><br><span class="line">            <span class="string">"script"</span> : "<span class="type">doc</span>[<span class="symbol">'num1</span>'].value &gt; param1<span class="string">"</span></span><br><span class="line"><span class="string">            "</span>params<span class="string">" : &#123;</span></span><br><span class="line"><span class="string">                "</span>param1<span class="string">" : 5</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>下面通过几个示例脚本来分别说明三者之间的区别。<br><a id="more"></a></p><h2 id="范例文档"><a href="#范例文档" class="headerlink" title="范例文档"></a>范例文档</h2><p>示例 mapping 如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"test"</span>: &#123;</span><br><span class="line">        <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">            <span class="attr">"test"</span>: &#123;</span><br><span class="line">                <span class="attr">"_all"</span>: &#123;</span><br><span class="line">                    <span class="attr">"enabled"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                    <span class="attr">"categories"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"name"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"name2"</span>: &#123;</span><br><span class="line">                        <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span>,</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"price"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"double"</span>,</span><br><span class="line">                        <span class="attr">"store"</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"skus"</span>: &#123;</span><br><span class="line">                        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                            <span class="attr">"id"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">"name"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">"price"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"status"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"short"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"updateTime"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>文档数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"categories"</span>: [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"宽松印花中袖香水瓶T恤"</span>,</span><br><span class="line">        <span class="attr">"name2"</span>: <span class="string">"宽松印花中袖香水瓶T恤"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">123.68</span>,</span><br><span class="line">        <span class="attr">"skus"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"红色"</span>,</span><br><span class="line">                <span class="attr">"price"</span>: <span class="number">12.88</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"蓝色"</span>,</span><br><span class="line">                <span class="attr">"price"</span>: <span class="number">23.66</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"status"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"updateTime"</span>: <span class="number">1503560261</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"found"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h2><p>doc 可以很方便的使用文档中的字段，通过 doc[‘field_name’]来访问,访问速度比较快，因为相关的值已经加载到内存中了。<br>但是它有一些使用限制: 访问的字段不能是 object 类型;只对 not-analyzed 字段有效</p><p>例如：对于上述的文档，doc[“skus”] 是无效的:<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: <span class="type"></span>"<span class="keyword">for</span>(sku <span class="keyword">in</span> doc[<span class="string">'skus'</span>])&#123;<span class="keyword">if</span>(sku.price&gt;<span class="number">5</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;&#125;;<span class="keyword">return</span> <span class="literal">false</span>;<span class="string">" //No field found for [skus] in mapping!</span></span><br></pre></td></tr></table></figure></p><p>而 doc[“categories”] 和 doc[“price”] 这是可以的:<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: <span class="string">"for(category in doc['</span>categories'])&#123;<span class="keyword">if</span>(category&gt;<span class="number">2</span>)&#123;<span class="keyword">return</span> true;&#125;&#125;;<span class="keyword">return</span> false;<span class="string">"</span></span><br><span class="line"><span class="string">"</span>script<span class="string">": "</span>doc[<span class="string">'price'</span>])&gt;<span class="number">100</span><span class="string">"</span></span><br></pre></td></tr></table></figure></p><p>doc[“name”] 无效是因为 name 为 analyzed 的字段:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: <span class="string">"doc['name'].value.length()&gt;=10"</span> <span class="comment">//not found</span></span><br></pre></td></tr></table></figure></p><p>虽然访问 doc[‘name’]无效，但是并不报错，其实对于这种分词的字段，访问 doc[‘name’] 其实访问的是分词过后的 token,所以不会报 no field found for [name] in mapping 错误。<br>doc[‘name2’]有效，因为 name2 字段 是 not_analyzed 的(可以理解为不分词):<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: <span class="string">"doc['name2'].value.length()&gt;=10"</span> <span class="comment">//found</span></span><br></pre></td></tr></table></figure></p><h2 id="fields"><a href="#fields" class="headerlink" title="_fields"></a>_fields</h2><p>_fields 使用方式同 doc 一样的，不过需要注意的是 _fields 必须是 mapping 中 store 的字段，例如 price 字段：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: <span class="string">"_fields['price'].value&lt;=param1"</span>,</span><br></pre></td></tr></table></figure></p><p>同时性能会低于加到内存中的doc。<br>默认情况下，创建 mapping 时候如果没有指定 store为 true 则 相应的字段是没有 stored 的。</p><h2 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h2><p>如果创建 mapping 的时候没有禁用 source , 则在脚本中可以使用 _source 来访问文档内容。_source的内容实质上就是一段 json。所以可以通说 _source.obj2.obj1.field3 来访问。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script"</span>: <span class="type"></span>"<span class="keyword">for</span>(sku <span class="keyword">in</span> _source.skus)&#123;<span class="keyword">if</span>(sku.price&gt;<span class="number">22</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;&#125;;<span class="keyword">return</span> <span class="literal">false</span>;<span class="string">",</span></span><br></pre></td></tr></table></figure></p><p>skus 字段是 object 类型的，可以用过 _source.skus 来访问。其实通过 _source[‘skus’]也是可以访问，这两者是否有区别暂不清楚。<br>由于 _source是每个文档加载、解析再使用的，所以比已经加载到内存中的 doc 慢很多,不过和 _fields 来比则需要区分使用场景。</p><ul><li>如果访问单个字段，_fields 比 _source 快</li><li>如果访问多个字段，_source 比 _fields 快</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面对复杂的查询或者算分逻辑，Elasticsearch 可以使用 Scrpits 脚本功能来实现，实际项目之中也用的非常频繁。&lt;br&gt;在脚本中需要访问文档中的字段，此时有三种方式可以访问，分别是 doc , _fields , _source。这三个字段使用的时候还是有区别的。&lt;br&gt;&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;filtered&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;query&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt; : &quot;&lt;span class=&quot;type&quot;&gt;doc&lt;/span&gt;[&lt;span class=&quot;symbol&quot;&gt;&#39;num1&lt;/span&gt;&#39;].value &amp;gt; param1&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;            &quot;&lt;/span&gt;params&lt;span class=&quot;string&quot;&gt;&quot; : &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;                &quot;&lt;/span&gt;param1&lt;span class=&quot;string&quot;&gt;&quot; : 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面通过几个示例脚本来分别说明三者之间的区别。&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="function" scheme="http://yoursite.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>Linux sort 命令使用</title>
    <link href="http://yoursite.com/linux-sort/"/>
    <id>http://yoursite.com/linux-sort/</id>
    <published>2017-08-21T03:18:53.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 可使用 sort 命令来对文件内容或者其他命令的输出内容进行排序。常见的场景是按大小排列日志文件、按文件名排序等。</p><p>sort 命令常用的参数有：</p><ul><li>r sort默认排序为升序，如果需要降序，则执行 -r即可。reverse</li><li>n sort排序默认是当做字符来排序的，所以会遇到 10&lt;2 的情况,使用 n 让其当做 number 来排序</li><li>u 去重,排重</li><li>t 指定分割符号，有时候需要将内容分割，按照其中部分内容排序</li><li>k 指定排序列，一般配合 t 使用，注意，列从 1 开始</li><li>o 将输出结果重定向写入文件，写入原文件时不能使用 &gt; 。</li></ul><p>example:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@linux]$ls search2*|<span class="built_in">sort</span> -rn -k <span class="number">4</span> -t <span class="string">'.'</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.20</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.19</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.18</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.17</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.16</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.15</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.14</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.13</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.12</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.11</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.10</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.9</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.8</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.7</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.6</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.5</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.4</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.3</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.2</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.1</span></span><br><span class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux 可使用 sort 命令来对文件内容或者其他命令的输出内容进行排序。常见的场景是按大小排列日志文件、按文件名排序等。&lt;/p&gt;
&lt;p&gt;sort 命令常用的参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r sort默认排序为升序，如果需要降序，则执行 -r即可。reverse&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 非安全端口限制</title>
    <link href="http://yoursite.com/chrome-unsafe-port-err/"/>
    <id>http://yoursite.com/chrome-unsafe-port-err/</id>
    <published>2017-08-19T15:30:32.000Z</published>
    <updated>2017-08-19T16:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 beego 群里，有同学问了一个看似比较的简单的问题。问题是这样的: 一个beego web项目，将项目的端口号从默认的 8080 改为 6666 之后通过 Chrome 浏览器无法访问，但是通过其他浏览器却可以访问。</p><p>但是并未在意，认为这可能是chrome浏览器或者系统不小心配置了代理导致的，后来我自己在本机上也实验以下，将应用端口改为 6666 之后，通过 Chrome 浏览器也无法访问。报错信息如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This site can’t be reached</span><br><span class="line"></span><br><span class="line">The webpage <span class="keyword">at</span> <span class="keyword">http</span>://localhost:<span class="number">6666</span>/ might be temporarily down <span class="keyword">or</span> <span class="keyword">it</span> may have moved permanently <span class="built_in">to</span> <span class="keyword">a</span> <span class="built_in">new</span> web address.</span><br><span class="line">ERR_UNSAFE_PORT</span><br></pre></td></tr></table></figure></p><p>报错信息中提到了 <code>ERR_UNSAFE_PORT</code>。</p><p>解决方案：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Applications/</span>Google Chrome.app<span class="regexp">/Contents/</span>MacOS<span class="regexp">/Google Chrome --explicitly-allowed-ports=6666,8888</span></span><br></pre></td></tr></table></figure></p><p>或者换端口，避开Chrome的非安全端口限制。<br>参考资料：</p><ul><li><a href="https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html" target="_blank" rel="noopener">https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html</a></li><li><a href="https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en" target="_blank" rel="noopener">https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en</a><a id="more"></a>Chrome 非安全端口列表如下：<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,    <span class="comment">// tcpmux</span></span><br><span class="line"><span class="number">7</span>,    <span class="comment">// echo</span></span><br><span class="line"><span class="number">9</span>,    <span class="comment">// discard</span></span><br><span class="line"><span class="number">11</span>,   <span class="comment">// systat</span></span><br><span class="line"><span class="number">13</span>,   <span class="comment">// daytime</span></span><br><span class="line"><span class="number">15</span>,   <span class="comment">// netstat</span></span><br><span class="line"><span class="number">17</span>,   <span class="comment">// qotd</span></span><br><span class="line"><span class="number">19</span>,   <span class="comment">// chargen</span></span><br><span class="line"><span class="number">20</span>,   <span class="comment">// ftp data</span></span><br><span class="line"><span class="number">21</span>,   <span class="comment">// ftp access</span></span><br><span class="line"><span class="number">22</span>,   <span class="comment">// ssh</span></span><br><span class="line"><span class="number">23</span>,   <span class="comment">// telnet</span></span><br><span class="line"><span class="number">25</span>,   <span class="comment">// smtp</span></span><br><span class="line"><span class="number">37</span>,   <span class="comment">// time</span></span><br><span class="line"><span class="number">42</span>,   <span class="comment">// name</span></span><br><span class="line"><span class="number">43</span>,   <span class="comment">// nicname</span></span><br><span class="line"><span class="number">53</span>,   <span class="comment">// domain</span></span><br><span class="line"><span class="number">77</span>,   <span class="comment">// priv-rjs</span></span><br><span class="line"><span class="number">79</span>,   <span class="comment">// finger</span></span><br><span class="line"><span class="number">87</span>,   <span class="comment">// ttylink</span></span><br><span class="line"><span class="number">95</span>,   <span class="comment">// supdup</span></span><br><span class="line"><span class="number">101</span>,  <span class="comment">// hostriame</span></span><br><span class="line"><span class="number">102</span>,  <span class="comment">// iso-tsap</span></span><br><span class="line"><span class="number">103</span>,  <span class="comment">// gppitnp</span></span><br><span class="line"><span class="number">104</span>,  <span class="comment">// acr-nema</span></span><br><span class="line"><span class="number">109</span>,  <span class="comment">// pop2</span></span><br><span class="line"><span class="number">110</span>,  <span class="comment">// pop3</span></span><br><span class="line"><span class="number">111</span>,  <span class="comment">// sunrpc</span></span><br><span class="line"><span class="number">113</span>,  <span class="comment">// auth</span></span><br><span class="line"><span class="number">115</span>,  <span class="comment">// sftp</span></span><br><span class="line"><span class="number">117</span>,  <span class="comment">// uucp-path</span></span><br><span class="line"><span class="number">119</span>,  <span class="comment">// nntp</span></span><br><span class="line"><span class="number">123</span>,  <span class="comment">// NTP</span></span><br><span class="line"><span class="number">135</span>,  <span class="comment">// loc-srv /epmap</span></span><br><span class="line"><span class="number">139</span>,  <span class="comment">// netbios</span></span><br><span class="line"><span class="number">143</span>,  <span class="comment">// imap2</span></span><br><span class="line"><span class="number">179</span>,  <span class="comment">// BGP</span></span><br><span class="line"><span class="number">389</span>,  <span class="comment">// ldap</span></span><br><span class="line"><span class="number">465</span>,  <span class="comment">// smtp+ssl</span></span><br><span class="line"><span class="number">512</span>,  <span class="comment">// print / exec</span></span><br><span class="line"><span class="number">513</span>,  <span class="comment">// login</span></span><br><span class="line"><span class="number">514</span>,  <span class="comment">// shell</span></span><br><span class="line"><span class="number">515</span>,  <span class="comment">// printer</span></span><br><span class="line"><span class="number">526</span>,  <span class="comment">// tempo</span></span><br><span class="line"><span class="number">530</span>,  <span class="comment">// courier</span></span><br><span class="line"><span class="number">531</span>,  <span class="comment">// chat</span></span><br><span class="line"><span class="number">532</span>,  <span class="comment">// netnews</span></span><br><span class="line"><span class="number">540</span>,  <span class="comment">// uucp</span></span><br><span class="line"><span class="number">556</span>,  <span class="comment">// remotefs</span></span><br><span class="line"><span class="number">563</span>,  <span class="comment">// nntp+ssl</span></span><br><span class="line"><span class="number">587</span>,  <span class="comment">// stmp?</span></span><br><span class="line"><span class="number">601</span>,  <span class="comment">// ??</span></span><br><span class="line"><span class="number">636</span>,  <span class="comment">// ldap+ssl</span></span><br><span class="line"><span class="number">993</span>,  <span class="comment">// ldap+ssl</span></span><br><span class="line"><span class="number">995</span>,  <span class="comment">// pop3+ssl</span></span><br><span class="line"><span class="number">2049</span>, <span class="comment">// nfs</span></span><br><span class="line"><span class="number">3659</span>, <span class="comment">// apple-sasl / PasswordServer</span></span><br><span class="line"><span class="number">4045</span>, <span class="comment">// lockd</span></span><br><span class="line"><span class="number">6000</span>, <span class="comment">// X11</span></span><br><span class="line"><span class="number">6665</span>, <span class="comment">// Alternate IRC [Apple addition]</span></span><br><span class="line"><span class="number">6666</span>, <span class="comment">// Alternate IRC [Apple addition]</span></span><br><span class="line"><span class="number">6667</span>, <span class="comment">// Standard IRC [Apple addition]</span></span><br><span class="line"><span class="number">6668</span>, <span class="comment">// Alternate IRC [Apple addition]</span></span><br><span class="line"><span class="number">6669</span>, <span class="comment">// Alternate IRC [Apple addition]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 beego 群里，有同学问了一个看似比较的简单的问题。问题是这样的: 一个beego web项目，将项目的端口号从默认的 8080 改为 6666 之后通过 Chrome 浏览器无法访问，但是通过其他浏览器却可以访问。&lt;/p&gt;
&lt;p&gt;但是并未在意，认为这可能是chrome浏览器或者系统不小心配置了代理导致的，后来我自己在本机上也实验以下，将应用端口改为 6666 之后，通过 Chrome 浏览器也无法访问。报错信息如下:&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This site can’t be reached&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The webpage &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://localhost:&lt;span class=&quot;number&quot;&gt;6666&lt;/span&gt;/ might be temporarily down &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; may have moved permanently &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; web address.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERR_UNSAFE_PORT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;报错信息中提到了 &lt;code&gt;ERR_UNSAFE_PORT&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/Applications/&lt;/span&gt;Google Chrome.app&lt;span class=&quot;regexp&quot;&gt;/Contents/&lt;/span&gt;MacOS&lt;span class=&quot;regexp&quot;&gt;/Google Chrome --explicitly-allowed-ports=6666,8888&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者换端口，避开Chrome的非安全端口限制。&lt;br&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en&lt;/a&gt;
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>使用upx压缩可执行文件</title>
    <link href="http://yoursite.com/compress-executables-with-upx/"/>
    <id>http://yoursite.com/compress-executables-with-upx/</id>
    <published>2017-08-19T14:39:28.000Z</published>
    <updated>2017-08-19T15:23:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得当初刚接触学习 golang 的时候,当时使用还是 go 1.4版本,和其他语言的入门一样，写了一个简单的 hello world 程序。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序非常简单，整个源文件大小才 4KB。然后执行 go build 编译成可执行文件，结果让我非常惊讶的是这段简单的代码生成的可执行文件竟然有4M之多。<br><a id="more"></a><br>当然，只有升级到了1.8版本之后，情况稍微好了一些，但是生成的可执行程序依然有1.6M之多。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">du</span> <span class="selector-tag">-sh</span> <span class="selector-tag">hello</span>*</span><br><span class="line">1<span class="selector-class">.6M</span><span class="selector-tag">hello</span></span><br><span class="line">4<span class="selector-class">.0K</span><span class="selector-tag">hello</span><span class="selector-class">.go</span></span><br></pre></td></tr></table></figure></p><p>虽然现在服务器的硬盘不再是限制，价格也比较低廉，但是网络带宽依然是瓶颈，当可执行文件需要通过网络进行分发的时候，文件的大小的影响就比较明显了。</p><p>这个问题可以通过 upx(the Ultimate Packer for eXecutables) 来解决。</p><p>地址：<a href="https://github.com/upx/upx" target="_blank" rel="noopener">https://github.com/upx/upx</a></p><p>压缩效果非常明显，以下 helllo_1 和 hello_2 分别是默认压缩和使用 –brute 参数压缩之后的二进制文件：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upx -o hello_1 hello</span><br><span class="line"></span><br><span class="line">upx --brute hello_2 hello</span><br><span class="line"></span><br><span class="line">du -sh hello*</span><br><span class="line"></span><br><span class="line"><span class="number">1.6</span>Mhello</span><br><span class="line"><span class="number">4.0</span>Khello.go</span><br><span class="line"><span class="number">576</span>Khello_1</span><br><span class="line"><span class="number">456</span>Khello_2</span><br></pre></td></tr></table></figure></p><p>可见，压缩比相当可观，大概压缩了 70% 的大小。</p><p>下面是一个正式项目的压缩效果：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">14</span>Mgomessage_v2</span><br><span class="line"><span class="number">4.2</span>Mgomessage_v2<span class="selector-class">.compressed</span><span class="comment">//upx -o gomessage_v2.compressed gomessage_v2</span></span><br><span class="line"><span class="number">4.1</span>Mgomessage_v2<span class="selector-class">.compressed</span><span class="selector-class">.best</span><span class="comment">//upx --best -o gomessage_v2.compressed.best gomessage_v2</span></span><br><span class="line"><span class="number">3.1</span>Mgomessage_v2<span class="selector-class">.compressed</span><span class="selector-class">.brute</span><span class="comment">//upx --brute -o gomessage_v2.compressed.brute gomessage_v2</span></span><br></pre></td></tr></table></figure></p><p>可见压缩之后可执行文件还是小了很多，从 14M 降低到了 3~4M 左右。<br>不同的参数代表着压缩程度，压缩的越多，压缩过程所需的时间也相对比较长。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得当初刚接触学习 golang 的时候,当时使用还是 go 1.4版本,和其他语言的入门一样，写了一个简单的 hello world 程序。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程序非常简单，整个源文件大小才 4KB。然后执行 go build 编译成可执行文件，结果让我非常惊讶的是这段简单的代码生成的可执行文件竟然有4M之多。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="upx" scheme="http://yoursite.com/tags/upx/"/>
    
      <category term="compress" scheme="http://yoursite.com/tags/compress/"/>
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>读书清单(备忘)</title>
    <link href="http://yoursite.com/reading-list/"/>
    <id>http://yoursite.com/reading-list/</id>
    <published>2017-08-19T14:08:27.000Z</published>
    <updated>2017-08-30T15:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017读书清单"><a href="#2017读书清单" class="headerlink" title="2017读书清单"></a>2017读书清单</h2><h3 id="进行中-amp-计划中"><a href="#进行中-amp-计划中" class="headerlink" title="进行中&amp;计划中"></a>进行中&amp;计划中</h3><ul><li>《Go并发编程实战》 –郝林</li><li>《App 后台开发运维和架构实践》–曾健生</li><li>《重构–改善既有代码的设计》 – 中文版</li><li>《高性能网站架构实战》 – 刘鑫</li><li>《构建高性能Web站点》 – 郭欣</li><li>《设计模式之禅》 – 秦小波</li><li>《go In Action》（Go语言实战）–中文版</li><li>《the way to go》（go语言程序设计）–中文版<br>….</li></ul><h3 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h3><ul><li>《build-web-application-with-golang》–github</li><li>《Go语言编程》 – 许式伟</li><li>《Go语言最佳实践》– pdf</li><li>《深入理解PHP内核》– php-internal.com</li></ul><p>^_^ 任务艰巨~~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2017读书清单&quot;&gt;&lt;a href=&quot;#2017读书清单&quot; class=&quot;headerlink&quot; title=&quot;2017读书清单&quot;&gt;&lt;/a&gt;2017读书清单&lt;/h2&gt;&lt;h3 id=&quot;进行中-amp-计划中&quot;&gt;&lt;a href=&quot;#进行中-amp-计划中&quot; class
      
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>使用 &amp; 代替 % 来判断整数奇偶性</title>
    <link href="http://yoursite.com/use-bitwise-and-judge-even-odd/"/>
    <id>http://yoursite.com/use-bitwise-and-judge-even-odd/</id>
    <published>2017-08-08T02:29:06.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，判断整数的奇偶性都会使用取模预算， 性能方面没有测试，但是由于机器可以直接操作二进制，应该会比较快，不过这点性能提升一般情况下对整体性能的影响不大，可以忽略不计。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> num<span class="meta">%2</span>==<span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"even"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"odd"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过，还有一种方式也是类似，使用 按位与 来判断整数奇偶性：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> num&amp;<span class="number">1</span>==<span class="number">0</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"even"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.<span class="keyword">Println</span>(<span class="string">"odd"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也能达到相同的效果。</p><p>类似的，使用二进制运算也可以进行乘除法的运算:<br>乘法左移：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a = a * 4</span></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span> &lt;&lt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//b = b * 8</span></span><br><span class="line"><span class="selector-tag">b</span> = <span class="selector-tag">b</span> &lt;&lt; <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>除法右移：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a = a / 4</span></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span> &gt;&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//b = b / 8</span></span><br><span class="line"><span class="selector-tag">b</span> = <span class="selector-tag">b</span> &gt;&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>这些都是一些二进制运算的技巧，记下备忘。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般情况下，判断整数的奇偶性都会使用取模预算， 性能方面没有测试，但是由于机器可以直接操作二进制，应该会比较快，不过这点性能提升一般情况下对整体性能的影响不大，可以忽略不计。&lt;br&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>阅读 php 源码，使用 vld 扩展查看 opcode</title>
    <link href="http://yoursite.com/php-vld/"/>
    <id>http://yoursite.com/php-vld/</id>
    <published>2017-08-03T02:12:44.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>php 虽然是一门动态语言，但是它也有一个编译的过程，这个过程经过词法分析、语法分析,最终生成 Zend 引擎可以执行的 opcode 指令，类似于 java 的字节码。</p><p>要查看一段代码对应的 opcode ，可以使用 <a href="http://pecl.php.net/package/vld/" target="_blank" rel="noopener">vld 扩展</a> 来查看。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 vld 和安装 php 其他的扩展没有任何区别，下载源码、编译、安装等…<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxf vld<span class="number">-0.14</span><span class="number">.0</span>.tar.gz</span><br><span class="line">cd vld<span class="number">-0.14</span><span class="number">.0</span></span><br><span class="line">phpize</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>记得要修改 php.ini 启用 vld 扩展:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[vld]</span></span><br><span class="line"><span class="attr">extensions</span>=vld.so</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 vld 查看 opcode 也非常简单，主要传递参数<code>-dvld.active=1</code>来激活 vld 扩展即可：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]# php -dvld.active=<span class="number">1</span> source.php</span><br><span class="line">Finding <span class="built_in">entry</span> points</span><br><span class="line">Branch analysis from <span class="keyword">position</span>: <span class="number">0</span></span><br><span class="line">Jump found. (Code = <span class="number">62</span>) <span class="keyword">Position</span> <span class="number">1</span> = -<span class="number">2</span></span><br><span class="line">filename:       /root/source.php</span><br><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="keyword">name</span>:  (null)</span><br><span class="line"><span class="keyword">number</span> of ops:  <span class="number">3</span></span><br><span class="line">compiled vars:  <span class="comment">!0 = $a</span></span><br><span class="line">line     #* E I O op                           fetch          ext  <span class="keyword">return</span>  operands</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">   <span class="number">2</span>     <span class="number">0</span>  E &gt;   EXT_STMT</span><br><span class="line">         <span class="number">1</span>        <span class="keyword">ASSIGN</span>                                                   <span class="comment">!0, 10</span></span><br><span class="line">   <span class="number">3</span>     <span class="number">2</span>      &gt; <span class="keyword">RETURN</span>                                                   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">branch: #  <span class="number">0</span>; line:     <span class="number">2</span>-    <span class="number">3</span>; sop:     <span class="number">0</span>; eop:     <span class="number">2</span>; out1:  -<span class="number">2</span></span><br><span class="line">path #<span class="number">1</span>: <span class="number">0</span>,</span><br></pre></td></tr></table></figure></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>vld 扩展主要有以下几个参数：</p><ul><li>vld.active=1 启用 vld 扩展</li><li>vld.verbosity=3 显示更详细信息</li><li>vld.execute=0 只显示 opcode 而不执行 php 脚本</li></ul><p>还有一些其他参数，请参考 <a href="http://www.php-internals.com/book/?p=C-php-vld" target="_blank" rel="noopener">深入理解 php 内核#VLD 扩展使用指南</a></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果经常需要查看 opcode , 而每次在命令中传递参数避免麻烦的话，可以将以上 vld 的参数配置在 php.ini 文件中，<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[vld]</span><br><span class="line"><span class="attribute">extensions</span>=vld.so</span><br><span class="line">vld.<span class="attribute">active</span>=1</span><br><span class="line">vld.vld.<span class="attribute">verbosity</span>=3</span><br><span class="line">vld.<span class="attribute">execute</span>=0</span><br></pre></td></tr></table></figure></p><p>从而避免手动使用 <code>php -d</code> 参数来传递 vld 配置。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php <span class="comment">--help</span></span><br><span class="line">...</span><br><span class="line"> -d foo[=bar]     Define INI <span class="keyword">entry</span> foo <span class="keyword">with</span> value <span class="symbol">'bar</span>'</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php 虽然是一门动态语言，但是它也有一个编译的过程，这个过程经过词法分析、语法分析,最终生成 Zend 引擎可以执行的 opcode 指令，类似于 java 的字节码。&lt;/p&gt;
&lt;p&gt;要查看一段代码对应的 opcode ，可以使用 &lt;a href=&quot;http://pecl.php.net/package/vld/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vld 扩展&lt;/a&gt; 来查看。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;安装 vld 和安装 php 其他的扩展没有任何区别，下载源码、编译、安装等…&lt;br&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar zxf vld&lt;span class=&quot;number&quot;&gt;-0.14&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd vld&lt;span class=&quot;number&quot;&gt;-0.14&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;phpize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;记得要修改 php.ini 启用 vld 扩展:&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[vld]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;extensions&lt;/span&gt;=vld.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="opcode" scheme="http://yoursite.com/tags/opcode/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>阅读 php 源码，ctags 配合 vim 实现代码跳转</title>
    <link href="http://yoursite.com/ctags/"/>
    <id>http://yoursite.com/ctags/</id>
    <published>2017-08-01T08:40:05.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读 php 源码的时候，为了方便跳转到相应的函数定义的位置，需要使用 ctags 来生成 tags 文件，再配合 vim 来实现跳转。</p><h2 id="安装-ctags"><a href="#安装-ctags" class="headerlink" title="安装 ctags"></a>安装 ctags</h2><p>macOS 上使用 ctags 非常简单，一般都预装了 ctags 。</p><p>如果没有安装，可以使用 <code>brew install ctags</code> 来安装。</p><h2 id="tags-文件"><a href="#tags-文件" class="headerlink" title="tags 文件"></a>tags 文件</h2><p>在 php 源码根目录，执行 <code>ctags -R</code>, 就会在当前目录下生成一个名为 <code>tags</code> 的 文件。 </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~/codes/php-src(master*) » tail -n <span class="number">20</span> tags                                                                                                                                       </span><br><span class="line">zval_marked_greyZend<span class="regexp">/zend_gc.h/</span>^uint32_t zval_marked_grey;$/;<span class="string">"mstruct:_zend_gc_globals</span></span><br><span class="line"><span class="string">zval_object_property_dumpext/standard/var.c/^static void zval_object_property_dump(zval *zv, zend_ulong index, zend_string *key, int level) \/* &#123;&#123;&#123; *\/$/;"</span>ffile:</span><br><span class="line">zval_opt_copy_ctorZend<span class="regexp">/zend_variables.h/</span>^<span class="comment">#define zval_opt_copy_ctor(/;"d</span></span><br><span class="line">zval_possible_rootZend<span class="regexp">/zend_gc.h/</span>^uint32_t zval_possible_root;$/;<span class="string">"mstruct:_zend_gc_globals</span></span><br><span class="line"><span class="string">zval_ptr_dtorZend/zend_execute.c/^<span class="subst">#define</span> zval_ptr_dtor(/;"</span>dfile:</span><br><span class="line">zval_ptr_dtorZend<span class="regexp">/zend_execute.c/</span>^<span class="comment">#undef zval_ptr_dtor$/;"dfile:</span></span><br><span class="line">zval_ptr_dtorZend<span class="regexp">/zend_variables.h/</span>^<span class="comment">#define zval_ptr_dtor(/;"d</span></span><br><span class="line">zval_ptr_dtor_nogcZend<span class="regexp">/zend_variables.h/</span>^<span class="comment">#define zval_ptr_dtor_nogc(/;"d</span></span><br><span class="line">zval_ptr_dtor_wrapperZend<span class="regexp">/zend_variables.h/</span>^<span class="comment">#define zval_ptr_dtor_wrapper /;"d</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>tags 文件的格式非常简单，以tab 分割各项，基本有以下几项内容:</p><p>第一列：tag name ,例如 <code>zval_ptr_dtor</code></p><p>第二列：tag 所在的文件，例如 <code>Zend/zend_variables.h</code></p><p>第三列：执行的命令，一般是指在 vi 中执行的正则搜索命令，例如 <code>/^#define zval_ptr_dtor(/;&quot;</code> </p><p>第四列：tag 的类型，例如：d , 类型在不同的语言中有不同的含义。在 c 中， d 代表着 macro definitions (宏定义)</p><p>具体的各语言的 tag 的类型定义可以使用 <code>ctags --list-kinds</code> 来查看:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/codes/php</span>-src(master*) » ctags --list-kinds</span><br><span class="line">C</span><br><span class="line">    c  classes</span><br><span class="line">    d  <span class="function"><span class="keyword">macro</span> <span class="title">definitions</span></span></span><br><span class="line">    e  enumerators (values inside an enumeration)</span><br><span class="line">    f  function definitions</span><br><span class="line">    g  enumeration names</span><br><span class="line">    l  local variables [off]</span><br><span class="line">    m  <span class="class"><span class="keyword">class</span>, <span class="title">struct</span>, <span class="title">and</span> <span class="title">union</span> <span class="title">members</span></span></span><br><span class="line">    n  namespaces</span><br><span class="line">    p  function prototypes [off]</span><br><span class="line">    s  structure names</span><br><span class="line">    t  typedefs</span><br><span class="line">    u  <span class="class"><span class="keyword">union</span> <span class="title">names</span></span></span><br><span class="line">    v  variable definitions</span><br><span class="line">    x  external and forward variable declarations [off]</span><br><span class="line">Java</span><br><span class="line">    c  classes</span><br><span class="line">    e  <span class="class"><span class="keyword">enum</span> <span class="title">constants</span></span></span><br><span class="line">    f  fields</span><br><span class="line">    g  <span class="class"><span class="keyword">enum</span> <span class="title">types</span></span></span><br><span class="line">    i  interfaces</span><br><span class="line">    l  local variables [off]</span><br><span class="line">    m  methods</span><br><span class="line">    p  packages</span><br></pre></td></tr></table></figure><p>查看 ctags 支持哪些语言可以使用 <code>ctags --list-languages</code> 来查看:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~<span class="string">/codes/php-src</span><span class="params">(master*)</span> » ctags <span class="params">--list-languages</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line">C</span><br><span class="line">C++</span><br><span class="line">Flex</span><br><span class="line">Fortran</span><br><span class="line">HTML</span><br><span class="line">Java</span><br><span class="line">JavaScript</span><br><span class="line">Lisp</span><br><span class="line">Lua</span><br><span class="line">Make</span><br><span class="line">MatLab</span><br><span class="line">OCaml</span><br><span class="line">Pascal</span><br><span class="line">Perl</span><br><span class="line">PHP</span><br><span class="line">Python</span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>大概有 41 种，不过 并没有看到 对 go 的支持，应该是因为 go 语言还是比较年轻的原因。</p><h2 id="使用-tags"><a href="#使用-tags" class="headerlink" title="使用 tags"></a>使用 tags</h2><p>一般情况下，在 tags 文件所在目录使用 vi (vim) 打开源码文件，在文件中使用快捷键 <code>ctrl+]</code> 即可实现跳转，<code>ctrl+t</code> 即可回到跳转之前的位置。</p><p>如果无法跳转，提示 <code>E433: No tags file</code> ，则需要手动指定 tags 文件,通过 vim 命令或者直接修改 vim 的配置文件 vimrc 均可：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在~/.vimrc中添加:</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">tags</span>+=~/codes/php-src/<span class="keyword">tags</span></span><br><span class="line"></span><br><span class="line">#或者在<span class="keyword">vim</span>中运行命令:</span><br><span class="line">:<span class="keyword">set</span> <span class="keyword">tags</span>+=~/codes/php-src/<span class="keyword">tags</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读 php 源码的时候，为了方便跳转到相应的函数定义的位置，需要使用 ctags 来生成 tags 文件，再配合 vim 来实现跳转。&lt;/p&gt;
&lt;h2 id=&quot;安装-ctags&quot;&gt;&lt;a href=&quot;#安装-ctags&quot; class=&quot;headerlink&quot; title=&quot;安装 ctags&quot;&gt;&lt;/a&gt;安装 ctags&lt;/h2&gt;&lt;p&gt;macOS 上使用 ctags 非常简单，一般都预装了 ctags 。&lt;/p&gt;
&lt;p&gt;如果没有安装，可以使用 &lt;code&gt;brew install ctags&lt;/code&gt; 来安装。&lt;/p&gt;
&lt;h2 id=&quot;tags-文件&quot;&gt;&lt;a href=&quot;#tags-文件&quot; class=&quot;headerlink&quot; title=&quot;tags 文件&quot;&gt;&lt;/a&gt;tags 文件&lt;/h2&gt;&lt;p&gt;在 php 源码根目录，执行 &lt;code&gt;ctags -R&lt;/code&gt;, 就会在当前目录下生成一个名为 &lt;code&gt;tags&lt;/code&gt; 的 文件。 &lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~/codes/php-src(master*) » tail -n &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; tags                                                                                                                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_marked_grey	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_gc.h	/&lt;/span&gt;^	uint32_t zval_marked_grey;$/;&lt;span class=&quot;string&quot;&gt;&quot;	m	struct:_zend_gc_globals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;zval_object_property_dump	ext/standard/var.c	/^static void zval_object_property_dump(zval *zv, zend_ulong index, zend_string *key, int level) \/* &amp;#123;&amp;#123;&amp;#123; *\/$/;&quot;&lt;/span&gt;	f	file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_opt_copy_ctor	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_opt_copy_ctor(/;&quot;	d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_possible_root	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_gc.h	/&lt;/span&gt;^	uint32_t zval_possible_root;$/;&lt;span class=&quot;string&quot;&gt;&quot;	m	struct:_zend_gc_globals&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;zval_ptr_dtor	Zend/zend_execute.c	/^&lt;span class=&quot;subst&quot;&gt;#define&lt;/span&gt; zval_ptr_dtor(/;&quot;&lt;/span&gt;	d	file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_ptr_dtor	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_execute.c	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#undef zval_ptr_dtor$/;&quot;	d	file:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_ptr_dtor	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_ptr_dtor(/;&quot;	d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_ptr_dtor_nogc	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_ptr_dtor_nogc(/;&quot;	d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zval_ptr_dtor_wrapper	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_ptr_dtor_wrapper /;&quot;	d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="ctags" scheme="http://yoursite.com/tags/ctags/"/>
    
  </entry>
  
  <entry>
    <title>golang 匿名 struct 的使用方式</title>
    <link href="http://yoursite.com/go-anonymous-struct/"/>
    <id>http://yoursite.com/go-anonymous-struct/</id>
    <published>2017-07-08T15:20:01.000Z</published>
    <updated>2017-07-10T15:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>编程中有时候需要一个临时的 struct 来封装数据，而这个 struct 的结构在其它地方又不会被二次复用,可以使用匿名 struct 来实现。</p><p>主要有两种方式,如下:<br>第一种方式，通过 var 初始化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> user </span>struct&#123;Name string;age int&#125;</span><br><span class="line">user.Name = <span class="string">"name"</span></span><br><span class="line">user.age = 18</span><br></pre></td></tr></table></figure><p>第二种方式，直接初始化</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.Marshal(<span class="keyword">struct</span>&#123;Name <span class="keyword">string</span>;age <span class="keyword">int</span>&#125;&#123;<span class="string">"name"</span>,<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json.Marshal(<span class="keyword">struct</span>&#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;&#123;<span class="string">"name"</span>,<span class="number">18</span>&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编程中有时候需要一个临时的 struct 来封装数据，而这个 struct 的结构在其它地方又不会被二次复用,可以使用匿名 struct 来实现。&lt;/p&gt;
&lt;p&gt;主要有两种方式,如下:&lt;br&gt;第一种方式，通过 var 初始化&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="anonymous" scheme="http://yoursite.com/tags/anonymous/"/>
    
  </entry>
  
  <entry>
    <title>Glide--golang 包管理工具简单教程</title>
    <link href="http://yoursite.com/glide/"/>
    <id>http://yoursite.com/glide/</id>
    <published>2017-07-08T15:06:00.000Z</published>
    <updated>2017-07-08T15:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<p> Golang挺好用的，但是目前比较受到诟病的是其没有自带包管理工具(golang社区已经发起了一个<a href="https://github.com/golang/dep" target="_blank" rel="noopener">dep</a>的项目，不过要正式被golang接受还需要一段时间)。官方没有咋办，那就自己造轮子呗。所以 go的包管理工具就五花八门、层出不穷了。目前有Glide, gopm, godep,gpm，gom等等。。。</p><p>这里介绍一个工具，使用比较简单: glide</p><p>我已经将其的文档翻译成了中文:  <a href="http://glidedocs.readthedocs.io/" target="_blank" rel="noopener">glide 中文文档</a>.</p><p>翻译的内容放在github上: <a href="https://github.com/javasgl/GlideDocs" target="_blank" rel="noopener">https://github.com/javasgl/GlideDocs</a></p><p>不想看文章的可以直接去看中文文档，文档写的很清晰，文档中关于<code>glide</code>的用法和原理都有说明。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装就没啥可以说的了，去下载安装即可了(<a href="http://glidedocs.readthedocs.io/zh/latest/#glide" target="_blank" rel="noopener">http://glidedocs.readthedocs.io/zh/latest/#glide</a>)</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在你已有的go项目的根目录下直接运行:<code>glide init</code>，就会生成一个<code>glide.yaml</code>配置文件，配置信息的详细说明见<a href="http://glidedocs.readthedocs.io/zh/latest/glide.yaml/" target="_blank" rel="noopener">文档</a>。<br>运行<code>glide init</code>之后，<code>glide</code>自动分析当前项目里已有的依赖包的关系并自动生成了<code>glide.yaml</code>文件来管理这些依赖关系。<br>这个过程需要一段时间来运行，因为它在扫描你的代码在推算依赖关系，请耐心等待。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/codes/xxxxx/xxxx/: glide init</span><br><span class="line">[<span class="builtin-name">INFO</span>]Generating a YAML configuration file <span class="keyword">and</span> guessing the dependencies</span><br><span class="line">[<span class="builtin-name">INFO</span>]Attempting <span class="keyword">to</span> import <span class="keyword">from</span> other package managers (use --skip-import <span class="keyword">to</span> skip)</span><br><span class="line">[<span class="builtin-name">INFO</span>]Scanning code <span class="keyword">to</span> look <span class="keyword">for</span> dependencies</span><br><span class="line">[<span class="builtin-name">INFO</span>]--&gt; Found reference <span class="keyword">to</span> github.com/astaxie/beego</span><br><span class="line">[<span class="builtin-name">INFO</span>]--&gt; Found reference <span class="keyword">to</span> github.com/stretchr/testify/assert</span><br><span class="line">[<span class="builtin-name">INFO</span>]--&gt; Found reference <span class="keyword">to</span> gopkg.<span class="keyword">in</span>/olivere/elastic.v3</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure></p><p>运行完成之后,<code>glide.yaml</code>中的内容如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">package:</span> .</span><br><span class="line"><span class="string">import:</span></span><br><span class="line">- <span class="string">package:</span> github.com<span class="regexp">/astaxie/</span>beego</span><br><span class="line">- <span class="string">package:</span> github.com<span class="regexp">/stretchr/</span>testify</span><br><span class="line"><span class="symbol">  subpackages:</span></span><br><span class="line">  - <span class="keyword">assert</span></span><br><span class="line">- <span class="string">package:</span> gopkg.<span class="keyword">in</span><span class="regexp">/olivere/</span>elastic.v3</span><br></pre></td></tr></table></figure></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>运行<code>glide get</code>,类似于<code>go get</code>,不过不同的是，<code>glide get</code>会下载你指定包到<code>vendor/</code>目录中而不是之前的<code>GOPATH</code>之中。关于go的 <code>vendor/</code>目录请执行google，这是go 1.5版本之后的功能。<br>这个<code>glide get</code>下载包的同时，也会更新<code>glide.yaml</code>中的配置:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="regexp">/cods/</span>xxxx<span class="regexp">/xxxx/</span>:glide get https:<span class="regexp">//gi</span>thub.com<span class="regexp">/garyburd/</span>redigo</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>完成之后,<code>glide.yaml</code>也更新了：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">package:</span> .</span><br><span class="line"><span class="string">import:</span></span><br><span class="line">- <span class="string">package:</span> github.com<span class="regexp">/astaxie/</span>beego</span><br><span class="line">- <span class="string">package:</span> github.com<span class="regexp">/stretchr/</span>testify</span><br><span class="line"><span class="symbol">  subpackages:</span></span><br><span class="line">  - <span class="keyword">assert</span></span><br><span class="line">- <span class="string">package:</span> gopkg.<span class="keyword">in</span><span class="regexp">/olivere/</span>elastic.v3</span><br><span class="line">- <span class="string">package:</span> github.com<span class="regexp">/grayburd/</span>redigo</span><br></pre></td></tr></table></figure></p><h2 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h2><p>运行<code>glide up</code>来更新<code>glide.yaml</code>中配置的依赖包。<br>首次运行的时候，会生成一个<code>glide.lock</code>文件，对php的<code>composer</code>熟悉的一样就知道这个锁文件是干嘛的了。这个锁文件是保证再次运行<code>glide up</code>的时候不会去远程获取更新，而是直接使用这个锁文件中定义的依赖包及其版本。在协作开发时，一般这个锁文件可以进行版本控制，这样其他人拿到这个锁文件之后，执行<code>glide up</code>则会获取锁文件中指定的包版本，起到多人协作开发时统一开发环境的问题。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~/cods/xxxx/xxxx/:glide up</span><br><span class="line">[<span class="builtin-name">INFO</span>]Downloading dependencies. Please wait<span class="built_in">..</span>.</span><br><span class="line">[<span class="builtin-name">INFO</span>]--&gt; Fetching github.com/stretchr/testify.</span><br><span class="line">[<span class="builtin-name">INFO</span>]--&gt; Fetching gopkg.<span class="keyword">in</span>/olivere/elastic.v3.</span><br><span class="line">[<span class="builtin-name">INFO</span>]--&gt; Fetching github.com/astaxie/beego.</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他的一些命令主要是帮助管理这些依赖的。详细见 <a href="http://glidedocs.readthedocs.io/zh/latest/commands/" target="_blank" rel="noopener">http://glidedocs.readthedocs.io/zh/latest/commands/</a></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家 star ,提交 issue 或者 fork 提交 pull request 来帮助我改进翻译质量。翻译项目地址: <a href="https://github.com/javasgl/GlideDocs" target="_blank" rel="noopener">https://github.com/javasgl/GlideDocs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Golang挺好用的，但是目前比较受到诟病的是其没有自带包管理工具(golang社区已经发起了一个&lt;a href=&quot;https://github.com/golang/dep&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dep&lt;/a&gt;的项目，不过要正式被golang接受还需要一段时间)。官方没有咋办，那就自己造轮子呗。所以 go的包管理工具就五花八门、层出不穷了。目前有Glide, gopm, godep,gpm，gom等等。。。&lt;/p&gt;
&lt;p&gt;这里介绍一个工具，使用比较简单: glide&lt;/p&gt;
&lt;p&gt;我已经将其的文档翻译成了中文:  &lt;a href=&quot;http://glidedocs.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;glide 中文文档&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;翻译的内容放在github上: &lt;a href=&quot;https://github.com/javasgl/GlideDocs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/javasgl/GlideDocs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不想看文章的可以直接去看中文文档，文档写的很清晰，文档中关于&lt;code&gt;glide&lt;/code&gt;的用法和原理都有说明。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
</feed>

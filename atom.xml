<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.song</title>
  <subtitle>step by step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-30T15:32:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>songgl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可变参数使用</title>
    <link href="http://yoursite.com/variable-parameter/"/>
    <id>http://yoursite.com/variable-parameter/</id>
    <published>2017-08-30T01:11:38.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多语言都支持可变参数，下面记录下平时主要使用的几种语言的可变参数用法。主要有 go、php、python、java、js等语言的可变参数的基本使用。</p>
<a id="more"></a>
<h2 id="go-可变参数"><a href="#go-可变参数" class="headerlink" title="go 可变参数"></a>go 可变参数</h2><p>go 可变参数只能是最后一个参数，参数接收后存放在一个 slice 中。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">	hello(<span class="string">"variable parameter"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">3</span>)</div><div class="line">	hello(<span class="string">"second"</span>, []<span class="keyword">int</span>&#123;<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;...)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(b <span class="keyword">string</span>, args ...<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	fmt.Println(b)</div><div class="line">	fmt.Println(args)</div><div class="line">	fmt.Println(reflect.TypeOf(args))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">variable parameter</div><div class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">45</span> <span class="number">56</span> <span class="number">3</span>]</div><div class="line">[]int</div><div class="line">second</div><div class="line">[<span class="number">22</span> <span class="number">33</span> <span class="number">44</span>]</div><div class="line">[]int</div></pre></td></tr></table></figure></p>
<h2 id="php-可变参数"><a href="#php-可变参数" class="headerlink" title="php 可变参数"></a>php 可变参数</h2><p>可变参数也只能是最后一个参数,参数接收后存放在一个 array 中。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">( $a , <span class="rest_arg">...$args</span> )</span></span></div><div class="line">&#123;</div><div class="line">	print_r( $a );</div><div class="line">	echo PHP_EOL . <span class="string">'.....'</span> . PHP_EOL;</div><div class="line">	print_r( $args );</div><div class="line">&#125;</div><div class="line"></div><div class="line">hello( <span class="string">'first'</span> , <span class="number">1</span> , <span class="number">2</span> , <span class="string">'string'</span> , <span class="number">4</span> , <span class="string">"5"</span> );</div><div class="line">hello( <span class="string">'second'</span> , ...[ <span class="number">22</span> , <span class="number">33</span> , <span class="number">44</span> , <span class="number">55</span> ] );</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">first</div><div class="line">.....</div><div class="line">Array</div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></div><div class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></div><div class="line">    [<span class="number">2</span>] =&gt; <span class="type">string</span></div><div class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></div><div class="line">    [<span class="number">4</span>] =&gt; <span class="number">5</span></div><div class="line">)</div><div class="line">second</div><div class="line">.....</div><div class="line">Array</div><div class="line">(</div><div class="line">    [<span class="number">0</span>] =&gt; <span class="number">22</span></div><div class="line">    [<span class="number">1</span>] =&gt; <span class="number">33</span></div><div class="line">    [<span class="number">2</span>] =&gt; <span class="number">44</span></div><div class="line">    [<span class="number">3</span>] =&gt; <span class="number">55</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<h2 id="python-可变参数"><a href="#python-可变参数" class="headerlink" title="python 可变参数"></a>python 可变参数</h2><p>python的可变参数有两个种方式</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env python</span></div><div class="line">def hello(a,b,*c,**kwargs):</div><div class="line">    print a,b,c,kwargs</div><div class="line"></div><div class="line">hello(<span class="string">"first"</span>,<span class="string">"second"</span>)</div><div class="line">hello(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>,<span class="string">"fourth"</span>,order=<span class="string">"asc"</span>,group=<span class="string">"admin"</span>)</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">first <span class="title">second</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function">first <span class="title">second</span> (<span class="params"><span class="string">'third'</span>, <span class="string">'fourth'</span></span>) </span>&#123;<span class="string">'group'</span>: <span class="string">'admin'</span>, <span class="string">'order'</span>: <span class="string">'asc'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>python 中可变参数方式一：<em>arg,这种可变参数传递时不需要指定参数的key，参数接收后存放在 tuple 中。<br>python 中可变参数方式二：*</em>kwargs，这种方式接收的参数需要指定参数的key，参数接收后存放在 dict 中。</p>
<h2 id="java-可变参数"><a href="#java-可变参数" class="headerlink" title="java 可变参数"></a>java 可变参数</h2><p>Java 的可变参数只有能有一个，并且必须是方法的最后一个参数。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Hello&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">      hello(<span class="string">"first"</span>,<span class="number">2</span>,<span class="string">"args1"</span>,<span class="string">"args2"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> hello(<span class="keyword">String</span> a,<span class="keyword">int</span> b,<span class="keyword">String</span>... args)&#123;</div><div class="line">    System.out.<span class="built_in">println</span>(a);</div><div class="line">    System.out.<span class="built_in">println</span>(b);</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">String</span> param :args)&#123;</div><div class="line">      System.out.<span class="built_in">println</span>(param);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">first</span></div><div class="line"><span class="number">2</span></div><div class="line">args1</div><div class="line">args2</div></pre></td></tr></table></figure></p>
<p>可变参数存放于数组之中。</p>
<h2 id="js-可变参数"><a href="#js-可变参数" class="headerlink" title="js 可变参数"></a>js 可变参数</h2><p>js 可变参数可以通过js内置的 arguments 来访问：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'a:'</span>+a);</div><div class="line">	<span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">hello(<span class="string">"first"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'string'</span>)</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">a</span>:<span class="keyword">first</span></div><div class="line"><span class="keyword">first</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="keyword">string</span></div></pre></td></tr></table></figure></p>
<p>arguments 中也包含了其他非可变参数的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多语言都支持可变参数，下面记录下平时主要使用的几种语言的可变参数用法。主要有 go、php、python、java、js等语言的可变参数的基本使用。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译 go 程序</title>
    <link href="http://yoursite.com/go-cross-complie/"/>
    <id>http://yoursite.com/go-cross-complie/</id>
    <published>2017-08-29T00:54:51.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信大多数人和我一样，都是在 mac 或者 windows 上写 go 代码，但是最终上线运行却是在 Linux 系统之上。这就涉及到一个问题：由于操作系统架构的差异，编译过后的二进制程序能够在多个系统下正常运行么？</p>
<p>go 不像 java 等运行于 JVM 之上的语言，也不像 php , python 等解释性语言，它需要编译后不依赖于其他环境就能执行，但是编译过程却依赖于系统架构，所以 go 需要交叉编译。</p>
<p>释义：交叉编译，就是在一个平台上生成另一个平台上的可执行代码。</p>
<p>go 非常方便的支持交叉编译。<br><a id="more"></a></p>
<p>我们先来看看不同环境下 go env 返回的结果。</p>
<p>Mac 下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">GOARCH</span>=<span class="string">"amd64"</span></div><div class="line"><span class="attr">GOOS</span>=<span class="string">"darwin"</span></div><div class="line"><span class="attr">CGO_ENABLED</span>=<span class="string">"1"</span></div></pre></td></tr></table></figure></p>
<p>Linux 下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">GOARCH</span>=<span class="string">"amd64"</span></div><div class="line"><span class="attr">GOOS</span>=<span class="string">"linux"</span></div><div class="line"><span class="attr">CGO_ENABLED</span>=<span class="string">"1"</span></div></pre></td></tr></table></figure></p>
<p>架构均是 x64 架构，区别是 GOOS 。</p>
<p>比如，我在 mac 上开发，最终需要部署到 linux 上运行，在没有 ci(持续集成)的支持下，一般有两种方式：</p>
<ul>
<li>将源代码复制到目标服务器上( scp 或者 git )，然后在目标机器上 go build 编译。</li>
<li>本地编译，只将最终编译过后的二进制文件复制到目标机器上。</li>
</ul>
<p>大多数肯定倾向于第二种方式，那么这时候就需要交叉编译了。</p>
<p>编译成Linux下可执行文件<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">CGO_ENABLED=0</span> <span class="attr">GOOS=linux</span> <span class="attr">GOARCH=amd64</span> go build</div></pre></td></tr></table></figure></p>
<p>编译成Windows下可执行文件<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">CGO_ENABLED=0</span> <span class="attr">GOOS=windows</span> <span class="attr">GOARCH=amd64</span> go build</div></pre></td></tr></table></figure></p>
<p>编译过后，将二进制传送到相应系统即可运行。</p>
<p>但是，这种交叉编译有一点限制就是：</p>
<p>不支持CGO的交叉编译，如果程序中使用了 CGO , 则不能通过这种方式来交叉编译。</p>
<p>如果使用 GUN Make ,则可以将以上参数写到 Makefile 文件中:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">build-linux:</span></div><div class="line">	<span class="meta">export</span> CGO_ENABLED<span class="number">=0</span> &amp;&amp; <span class="meta">export</span> GOOS<span class="symbol">=linux</span> &amp;&amp; <span class="meta">export</span> GOARCH<span class="symbol">=amd64</span> &amp;&amp; go <span class="keyword">build</span></div><div class="line"></div><div class="line"><span class="keyword">build-wins:</span></div><div class="line">	<span class="meta">export</span> CGO_ENABLED<span class="number">=0</span> &amp;&amp; <span class="meta">export</span> GOOS<span class="symbol">=windows</span> &amp;&amp; <span class="meta">export</span> GOARCH<span class="symbol">=amd64</span> &amp;&amp; go <span class="keyword">build</span></div></pre></td></tr></table></figure></p>
<p>参考：</p>
<ul>
<li><a href="https://solovyov.net/en/2012/cross-compiling-go/" target="_blank" rel="external">cross-compilling-go</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大多数人和我一样，都是在 mac 或者 windows 上写 go 代码，但是最终上线运行却是在 Linux 系统之上。这就涉及到一个问题：由于操作系统架构的差异，编译过后的二进制程序能够在多个系统下正常运行么？&lt;/p&gt;
&lt;p&gt;go 不像 java 等运行于 JVM 之上的语言，也不像 php , python 等解释性语言，它需要编译后不依赖于其他环境就能执行，但是编译过程却依赖于系统架构，所以 go 需要交叉编译。&lt;/p&gt;
&lt;p&gt;释义：交叉编译，就是在一个平台上生成另一个平台上的可执行代码。&lt;/p&gt;
&lt;p&gt;go 非常方便的支持交叉编译。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="complie" scheme="http://yoursite.com/tags/complie/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 几种 Search Type</title>
    <link href="http://yoursite.com/es-search-type/"/>
    <id>http://yoursite.com/es-search-type/</id>
    <published>2017-08-24T08:45:45.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Search Type 有助于理解 Elasticsearch 在多个分片(shard)的情况下，是如何搜索的，是如何决定返回数据数量、如何排序、如何算分的？</p>
<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>在多个分片情况下，查询 0-20 条记录，elasticsearch 会将请求转发到每个分片上，从每个分片上获取 20 条记录，然后返回给分发节点进行汇总，最后再从汇总的结果中取 0-20 数据返回给客户端。<br>则就是 elasticsearch 分布式搜索的基本的执行过程。</p>
<h2 id="Search-Type"><a href="#Search-Type" class="headerlink" title="Search Type"></a>Search Type</h2><p>Elasticsearch 中的 search type 主要有 6种：Query then fetch、Dfs Query then fetch、Count、Scan、Query and fetch、Dfs query and fetch。</p>
<a id="more"></a>
<p>执行请求的过程中，涉及到几个不同的 search type。</p>
<ul>
<li><p>Query then fetch<br>  查询主要分为两步:<br>  第一步，查询节点首先将请求转发给所有参与的节点，每个节点依据自身的数据执行查询，并将必要的信息返回给查询节点,查询节点进行合并、重新排序等操作。<br>  第二步，查询节点仅从相关的节点获取数据返回。</p>
<p>  如果没有在请求中没有指定 search_type 参数这这是默认的方式。</p>
</li>
<li><p>Dfs Query then fetch</p>
<p>  和 Query then fetch 一样，只不过在第一步转发请求的时候，它将计算分布式词频来获得更准确的得分。</p>
</li>
<li><p>Count</p>
<p>  顾名思义，这个并不返回文档数据，只返回文档的数量。</p>
</li>
<li><p>Scan</p>
<p>  适用于大量数据进行深度分页获取数据,禁用排序提升性能。</p>
</li>
<li><p>Query and fetch</p>
<p>  这是 elasticsearch 内部的一种优化，不需要手动指定。当请求只作用在一个节点上面的是否，Query then fetch 的两步就合并为一步执行了。当我们有时候为了避免聚合(Aggregation)不准确而将 numbers_of_shards 设置为1个的时候，所有的请求就只在一个节点上处理。</p>
</li>
<li><p>Dfs Query and fetch</p>
<p>  同 Dfs Query and fetch，也不需要手动执行，请求作用于单个节点时候的一种内部优化机制。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Search Type 有助于理解 Elasticsearch 在多个分片(shard)的情况下，是如何搜索的，是如何决定返回数据数量、如何排序、如何算分的？&lt;/p&gt;
&lt;h2 id=&quot;执行过程&quot;&gt;&lt;a href=&quot;#执行过程&quot; class=&quot;headerlink&quot; title=&quot;执行过程&quot;&gt;&lt;/a&gt;执行过程&lt;/h2&gt;&lt;p&gt;在多个分片情况下，查询 0-20 条记录，elasticsearch 会将请求转发到每个分片上，从每个分片上获取 20 条记录，然后返回给分发节点进行汇总，最后再从汇总的结果中取 0-20 数据返回给客户端。&lt;br&gt;则就是 elasticsearch 分布式搜索的基本的执行过程。&lt;/p&gt;
&lt;h2 id=&quot;Search-Type&quot;&gt;&lt;a href=&quot;#Search-Type&quot; class=&quot;headerlink&quot; title=&quot;Search Type&quot;&gt;&lt;/a&gt;Search Type&lt;/h2&gt;&lt;p&gt;Elasticsearch 中的 search type 主要有 6种：Query then fetch、Dfs Query then fetch、Count、Scan、Query and fetch、Dfs query and fetch。&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用 redis-check-aof 命令修复 aof 文件</title>
    <link href="http://yoursite.com/redis-check-aof/"/>
    <id>http://yoursite.com/redis-check-aof/</id>
    <published>2017-08-23T10:27:30.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然的一天，发现redis一个实例无法启动，启动的时候，从 aof 文件往内存中加载数据的时候，出现了错误：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bad <span class="built_in">file</span> <span class="built_in">format</span> reading <span class="keyword">the</span> append only <span class="built_in">file</span>: make <span class="keyword">a</span> backup <span class="keyword">of</span> your AOF <span class="built_in">file</span>, <span class="keyword">then</span> use ./redis-check-aof <span class="comment">--fix filename</span></div></pre></td></tr></table></figure>
<p>提示，需要使用 redis-check-aof 来修复 aof 文件。</p>
<p>按照其步骤，先备份再修复：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@hostname <span class="number">6379</span>]<span class="meta"># redis-check-aof --fix appendonly.aof</span></div><div class="line"><span class="number">0</span>x        <span class="number">6</span>a60a5cb: Expected prefix <span class="comment">'</span></div><div class="line">AOF analyzed: size=<span class="number">1784722401</span>, ok_up_to=<span class="number">1784718795</span>, diff=<span class="number">3606</span></div><div class="line">This will shrink the AOF <span class="keyword">from</span> <span class="number">1784722401</span> bytes, <span class="keyword">with</span> <span class="number">3606</span> bytes, <span class="keyword">to</span> <span class="number">1784718795</span> bytes</div><div class="line"><span class="keyword">Continue</span>? [y/N]: y</div><div class="line">Successfully truncated AOF</div></pre></td></tr></table></figure></p>
<p>修复完成后，重新启动 redis 就能正常启动了。</p>
<p>同样，redis 如果采用的 rdb 模式持久化数据的话，如果需要修复 rdb 文件，可以使用 redis-check-dump file.rdb 来修复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然的一天，发现redis一个实例无法启动，启动的时候，从 aof 文件往内存中加载数据的时候，出现了错误：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="aof" scheme="http://yoursite.com/tags/aof/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch function 中 doc , _fields , _source 使用</title>
    <link href="http://yoursite.com/elasticsearch-function-doc/"/>
    <id>http://yoursite.com/elasticsearch-function-doc/</id>
    <published>2017-08-21T04:07:40.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>面对复杂的查询或者算分逻辑，Elasticsearch 可以使用 Scrpits 脚本功能来实现，实际项目之中也用的非常频繁。<br>在脚本中需要访问文档中的字段，此时有三种方式可以访问，分别是 doc , _fields , _source。这三个字段使用的时候还是有区别的。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"filtered"</span> : &#123;</div><div class="line">    <span class="string">"query"</span> : &#123;</div><div class="line">        ...</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"filter"</span> : &#123;</div><div class="line">        <span class="string">"script"</span> : &#123;</div><div class="line">            <span class="string">"script"</span> : "<span class="type">doc</span>[<span class="symbol">'num1</span>'].value &gt; param1<span class="string">"</span></div><div class="line">            "params<span class="string">" : &#123;</span></div><div class="line">                "param1<span class="string">" : 5</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面通过几个示例脚本来分别说明三者之间的区别。<br><a id="more"></a></p>
<h2 id="范例文档"><a href="#范例文档" class="headerlink" title="范例文档"></a>范例文档</h2><p>示例 mapping 如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"test"</span>: &#123;</div><div class="line">        <span class="attr">"mappings"</span>: &#123;</div><div class="line">            <span class="attr">"test"</span>: &#123;</div><div class="line">                <span class="attr">"_all"</span>: &#123;</div><div class="line">                    <span class="attr">"enabled"</span>: <span class="literal">false</span></div><div class="line">                &#125;,</div><div class="line">                <span class="attr">"properties"</span>: &#123;</div><div class="line">                    <span class="attr">"categories"</span>: &#123;</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"long"</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">"name"</span>: &#123;</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"string"</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">"name2"</span>: &#123;</div><div class="line">                        <span class="attr">"index"</span>: <span class="string">"not_analyzed"</span>,</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"string"</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">"price"</span>: &#123;</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"double"</span>,</div><div class="line">                        <span class="attr">"store"</span>: <span class="literal">true</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">"skus"</span>: &#123;</div><div class="line">                        <span class="attr">"properties"</span>: &#123;</div><div class="line">                            <span class="attr">"id"</span>: &#123;</div><div class="line">                                <span class="attr">"type"</span>: <span class="string">"long"</span></div><div class="line">                            &#125;,</div><div class="line">                            <span class="attr">"name"</span>: &#123;</div><div class="line">                                <span class="attr">"type"</span>: <span class="string">"string"</span></div><div class="line">                            &#125;,</div><div class="line">                            <span class="attr">"price"</span>: &#123;</div><div class="line">                                <span class="attr">"type"</span>: <span class="string">"double"</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">"status"</span>: &#123;</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"short"</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">"updateTime"</span>: &#123;</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"long"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>文档数据如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"_id"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"_index"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="attr">"_source"</span>: &#123;</div><div class="line">        <span class="attr">"categories"</span>: [</div><div class="line">            <span class="number">1</span>,</div><div class="line">            <span class="number">3</span>,</div><div class="line">            <span class="number">4</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"宽松印花中袖香水瓶T恤"</span>,</div><div class="line">        <span class="attr">"name2"</span>: <span class="string">"宽松印花中袖香水瓶T恤"</span>,</div><div class="line">        <span class="attr">"price"</span>: <span class="number">123.68</span>,</div><div class="line">        <span class="attr">"skus"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"name"</span>: <span class="string">"红色"</span>,</div><div class="line">                <span class="attr">"price"</span>: <span class="number">12.88</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">                <span class="attr">"name"</span>: <span class="string">"蓝色"</span>,</div><div class="line">                <span class="attr">"price"</span>: <span class="number">23.66</span></div><div class="line">            &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">"status"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"updateTime"</span>: <span class="number">1503560261</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"_type"</span>: <span class="string">"test"</span>,</div><div class="line">    <span class="attr">"_version"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"found"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h2><p>doc 可以很方便的使用文档中的字段，通过 doc[‘field_name’]来访问,访问速度比较快，因为相关的值已经加载到内存中了。<br>但是它有一些使用限制: 访问的字段不能是 object 类型;只对 not-analyzed 字段有效</p>
<p>例如：对于上述的文档，doc[“skus”] 是无效的:<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: <span class="type"></span>"<span class="keyword">for</span>(sku <span class="keyword">in</span> doc[<span class="string">'skus'</span>])&#123;<span class="keyword">if</span>(sku.price&gt;<span class="number">5</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;&#125;;<span class="keyword">return</span> <span class="literal">false</span>;<span class="string">" //No field found for [skus] in mapping!</span></div></pre></td></tr></table></figure></p>
<p>而 doc[“categories”] 和 doc[“price”] 这是可以的:<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: <span class="string">"for(category in doc['</span>categories'])&#123;<span class="keyword">if</span>(category&gt;<span class="number">2</span>)&#123;<span class="keyword">return</span> true;&#125;&#125;;<span class="keyword">return</span> false;<span class="string">"</span></div><div class="line">"script<span class="string">": "</span>doc[<span class="string">'price'</span>])&gt;<span class="number">100</span><span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>doc[“name”] 无效是因为 name 为 analyzed 的字段:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: <span class="string">"doc['name'].value.length()&gt;=10"</span> <span class="comment">//not found</span></div></pre></td></tr></table></figure></p>
<p>虽然访问 doc[‘name’]无效，但是并不报错，其实对于这种分词的字段，访问 doc[‘name’] 其实访问的是分词过后的 token,所以不会报 no field found for [name] in mapping 错误。<br>doc[‘name2’]有效，因为 name2 字段 是 not_analyzed 的(可以理解为不分词):<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: <span class="string">"doc['name2'].value.length()&gt;=10"</span> <span class="comment">//found</span></div></pre></td></tr></table></figure></p>
<h2 id="fields"><a href="#fields" class="headerlink" title="_fields"></a>_fields</h2><p>_fields 使用方式同 doc 一样的，不过需要注意的是 _fields 必须是 mapping 中 store 的字段，例如 price 字段：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: <span class="string">"_fields['price'].value&lt;=param1"</span>,</div></pre></td></tr></table></figure></p>
<p>同时性能会低于加到内存中的doc。<br>默认情况下，创建 mapping 时候如果没有指定 store为 true 则 相应的字段是没有 stored 的。</p>
<h2 id="source"><a href="#source" class="headerlink" title="_source"></a>_source</h2><p>如果创建 mapping 的时候没有禁用 source , 则在脚本中可以使用 _source 来访问文档内容。_source的内容实质上就是一段 json。所以可以通说 _source.obj2.obj1.field3 来访问。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"script"</span>: <span class="type"></span>"<span class="keyword">for</span>(sku <span class="keyword">in</span> _source.skus)&#123;<span class="keyword">if</span>(sku.price&gt;<span class="number">22</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;&#125;;<span class="keyword">return</span> <span class="literal">false</span>;<span class="string">",</span></div></pre></td></tr></table></figure></p>
<p>skus 字段是 object 类型的，可以用过 _source.skus 来访问。其实通过 _source[‘skus’]也是可以访问，这两者是否有区别暂不清楚。<br>由于 _source是每个文档加载、解析再使用的，所以比已经加载到内存中的 doc 慢很多,不过和 _fields 来比则需要区分使用场景。</p>
<ul>
<li>如果访问单个字段，_fields 比 _source 快</li>
<li>如果访问多个字段，_source 比 _fields 快</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面对复杂的查询或者算分逻辑，Elasticsearch 可以使用 Scrpits 脚本功能来实现，实际项目之中也用的非常频繁。&lt;br&gt;在脚本中需要访问文档中的字段，此时有三种方式可以访问，分别是 doc , _fields , _source。这三个字段使用的时候还是有区别的。&lt;br&gt;&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;filtered&quot;&lt;/span&gt; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;query&quot;&lt;/span&gt; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;filter&quot;&lt;/span&gt; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt; : &quot;&lt;span class=&quot;type&quot;&gt;doc&lt;/span&gt;[&lt;span class=&quot;symbol&quot;&gt;&#39;num1&lt;/span&gt;&#39;].value &amp;gt; param1&lt;span class=&quot;string&quot;&gt;&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &quot;&lt;/span&gt;params&lt;span class=&quot;string&quot;&gt;&quot; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &quot;&lt;/span&gt;param1&lt;span class=&quot;string&quot;&gt;&quot; : 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面通过几个示例脚本来分别说明三者之间的区别。&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="function" scheme="http://yoursite.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>Linux sort 命令使用</title>
    <link href="http://yoursite.com/linux-sort/"/>
    <id>http://yoursite.com/linux-sort/</id>
    <published>2017-08-21T03:18:53.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 可使用 sort 命令来对文件内容或者其他命令的输出内容进行排序。常见的场景是按大小排列日志文件、按文件名排序等。</p>
<p>sort 命令常用的参数有：</p>
<ul>
<li>r sort默认排序为升序，如果需要降序，则执行 -r即可。reverse</li>
<li>n sort排序默认是当做字符来排序的，所以会遇到 10&lt;2 的情况,使用 n 让其当做 number 来排序</li>
<li>u 去重,排重</li>
<li>t 指定分割符号，有时候需要将内容分割，按照其中部分内容排序</li>
<li>k 指定排序列，一般配合 t 使用，注意，列从 1 开始</li>
<li>o 将输出结果重定向写入文件，写入原文件时不能使用 &gt; 。</li>
</ul>
<p>example:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@linux]$ls search2*|sort -rn -k <span class="number">4</span> -t <span class="string">'.'</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.20</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.19</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.18</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.17</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.16</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.15</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.14</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.13</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.12</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.11</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.10</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.9</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.8</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.7</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.6</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.5</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.4</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.3</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.2</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span><span class="number">.1</span></div><div class="line">search2.<span class="built_in">stdout</span>.<span class="built_in">log</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 可使用 sort 命令来对文件内容或者其他命令的输出内容进行排序。常见的场景是按大小排列日志文件、按文件名排序等。&lt;/p&gt;
&lt;p&gt;sort 命令常用的参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r sort默认排序为升序，如果需要降序，则执行 -r即可。reverse&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 非安全端口限制</title>
    <link href="http://yoursite.com/chrome-unsafe-port-err/"/>
    <id>http://yoursite.com/chrome-unsafe-port-err/</id>
    <published>2017-08-19T15:30:32.000Z</published>
    <updated>2017-08-19T16:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 beego 群里，有同学问了一个看似比较的简单的问题。问题是这样的: 一个beego web项目，将项目的端口号从默认的 8080 改为 6666 之后通过 Chrome 浏览器无法访问，但是通过其他浏览器却可以访问。</p>
<p>但是并未在意，认为这可能是chrome浏览器或者系统不小心配置了代理导致的，后来我自己在本机上也实验以下，将应用端口改为 6666 之后，通过 Chrome 浏览器也无法访问。报错信息如下:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">This site can’t be reached</div><div class="line"></div><div class="line">The webpage <span class="keyword">at</span> <span class="keyword">http</span>://localhost:<span class="number">6666</span>/ might be temporarily down <span class="keyword">or</span> <span class="keyword">it</span> may have moved permanently <span class="built_in">to</span> <span class="keyword">a</span> <span class="built_in">new</span> web address.</div><div class="line">ERR_UNSAFE_PORT</div></pre></td></tr></table></figure></p>
<p>报错信息中提到了 <code>ERR_UNSAFE_PORT</code>。</p>
<p>解决方案：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Applications/</span>Google Chrome.app<span class="regexp">/Contents/</span>MacOS<span class="regexp">/Google Chrome --explicitly-allowed-ports=6666,8888</span></div></pre></td></tr></table></figure></p>
<p>或者换端口，避开Chrome的非安全端口限制。<br>参考资料：</p>
<ul>
<li><a href="https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html" target="_blank" rel="external">https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html</a></li>
<li><a href="https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en" target="_blank" rel="external">https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en</a><a id="more"></a>
Chrome 非安全端口列表如下：<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>,    <span class="comment">// tcpmux</span></div><div class="line"><span class="number">7</span>,    <span class="comment">// echo</span></div><div class="line"><span class="number">9</span>,    <span class="comment">// discard</span></div><div class="line"><span class="number">11</span>,   <span class="comment">// systat</span></div><div class="line"><span class="number">13</span>,   <span class="comment">// daytime</span></div><div class="line"><span class="number">15</span>,   <span class="comment">// netstat</span></div><div class="line"><span class="number">17</span>,   <span class="comment">// qotd</span></div><div class="line"><span class="number">19</span>,   <span class="comment">// chargen</span></div><div class="line"><span class="number">20</span>,   <span class="comment">// ftp data</span></div><div class="line"><span class="number">21</span>,   <span class="comment">// ftp access</span></div><div class="line"><span class="number">22</span>,   <span class="comment">// ssh</span></div><div class="line"><span class="number">23</span>,   <span class="comment">// telnet</span></div><div class="line"><span class="number">25</span>,   <span class="comment">// smtp</span></div><div class="line"><span class="number">37</span>,   <span class="comment">// time</span></div><div class="line"><span class="number">42</span>,   <span class="comment">// name</span></div><div class="line"><span class="number">43</span>,   <span class="comment">// nicname</span></div><div class="line"><span class="number">53</span>,   <span class="comment">// domain</span></div><div class="line"><span class="number">77</span>,   <span class="comment">// priv-rjs</span></div><div class="line"><span class="number">79</span>,   <span class="comment">// finger</span></div><div class="line"><span class="number">87</span>,   <span class="comment">// ttylink</span></div><div class="line"><span class="number">95</span>,   <span class="comment">// supdup</span></div><div class="line"><span class="number">101</span>,  <span class="comment">// hostriame</span></div><div class="line"><span class="number">102</span>,  <span class="comment">// iso-tsap</span></div><div class="line"><span class="number">103</span>,  <span class="comment">// gppitnp</span></div><div class="line"><span class="number">104</span>,  <span class="comment">// acr-nema</span></div><div class="line"><span class="number">109</span>,  <span class="comment">// pop2</span></div><div class="line"><span class="number">110</span>,  <span class="comment">// pop3</span></div><div class="line"><span class="number">111</span>,  <span class="comment">// sunrpc</span></div><div class="line"><span class="number">113</span>,  <span class="comment">// auth</span></div><div class="line"><span class="number">115</span>,  <span class="comment">// sftp</span></div><div class="line"><span class="number">117</span>,  <span class="comment">// uucp-path</span></div><div class="line"><span class="number">119</span>,  <span class="comment">// nntp</span></div><div class="line"><span class="number">123</span>,  <span class="comment">// NTP</span></div><div class="line"><span class="number">135</span>,  <span class="comment">// loc-srv /epmap</span></div><div class="line"><span class="number">139</span>,  <span class="comment">// netbios</span></div><div class="line"><span class="number">143</span>,  <span class="comment">// imap2</span></div><div class="line"><span class="number">179</span>,  <span class="comment">// BGP</span></div><div class="line"><span class="number">389</span>,  <span class="comment">// ldap</span></div><div class="line"><span class="number">465</span>,  <span class="comment">// smtp+ssl</span></div><div class="line"><span class="number">512</span>,  <span class="comment">// print / exec</span></div><div class="line"><span class="number">513</span>,  <span class="comment">// login</span></div><div class="line"><span class="number">514</span>,  <span class="comment">// shell</span></div><div class="line"><span class="number">515</span>,  <span class="comment">// printer</span></div><div class="line"><span class="number">526</span>,  <span class="comment">// tempo</span></div><div class="line"><span class="number">530</span>,  <span class="comment">// courier</span></div><div class="line"><span class="number">531</span>,  <span class="comment">// chat</span></div><div class="line"><span class="number">532</span>,  <span class="comment">// netnews</span></div><div class="line"><span class="number">540</span>,  <span class="comment">// uucp</span></div><div class="line"><span class="number">556</span>,  <span class="comment">// remotefs</span></div><div class="line"><span class="number">563</span>,  <span class="comment">// nntp+ssl</span></div><div class="line"><span class="number">587</span>,  <span class="comment">// stmp?</span></div><div class="line"><span class="number">601</span>,  <span class="comment">// ??</span></div><div class="line"><span class="number">636</span>,  <span class="comment">// ldap+ssl</span></div><div class="line"><span class="number">993</span>,  <span class="comment">// ldap+ssl</span></div><div class="line"><span class="number">995</span>,  <span class="comment">// pop3+ssl</span></div><div class="line"><span class="number">2049</span>, <span class="comment">// nfs</span></div><div class="line"><span class="number">3659</span>, <span class="comment">// apple-sasl / PasswordServer</span></div><div class="line"><span class="number">4045</span>, <span class="comment">// lockd</span></div><div class="line"><span class="number">6000</span>, <span class="comment">// X11</span></div><div class="line"><span class="number">6665</span>, <span class="comment">// Alternate IRC [Apple addition]</span></div><div class="line"><span class="number">6666</span>, <span class="comment">// Alternate IRC [Apple addition]</span></div><div class="line"><span class="number">6667</span>, <span class="comment">// Standard IRC [Apple addition]</span></div><div class="line"><span class="number">6668</span>, <span class="comment">// Alternate IRC [Apple addition]</span></div><div class="line"><span class="number">6669</span>, <span class="comment">// Alternate IRC [Apple addition]</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 beego 群里，有同学问了一个看似比较的简单的问题。问题是这样的: 一个beego web项目，将项目的端口号从默认的 8080 改为 6666 之后通过 Chrome 浏览器无法访问，但是通过其他浏览器却可以访问。&lt;/p&gt;
&lt;p&gt;但是并未在意，认为这可能是chrome浏览器或者系统不小心配置了代理导致的，后来我自己在本机上也实验以下，将应用端口改为 6666 之后，通过 Chrome 浏览器也无法访问。报错信息如下:&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;This site can’t be reached&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;The webpage &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://localhost:&lt;span class=&quot;number&quot;&gt;6666&lt;/span&gt;/ might be temporarily down &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; may have moved permanently &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; web address.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ERR_UNSAFE_PORT&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;报错信息中提到了 &lt;code&gt;ERR_UNSAFE_PORT&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/Applications/&lt;/span&gt;Google Chrome.app&lt;span class=&quot;regexp&quot;&gt;/Contents/&lt;/span&gt;MacOS&lt;span class=&quot;regexp&quot;&gt;/Google Chrome --explicitly-allowed-ports=6666,8888&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者换端口，避开Chrome的非安全端口限制。&lt;br&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html&quot;&gt;https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en&quot;&gt;https://support.google.com/chrome/forum/AAAAP1KN0B0l5d-nXEjLMM?hl=en&lt;/a&gt;
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>使用upx压缩可执行文件</title>
    <link href="http://yoursite.com/compress-executables-with-upx/"/>
    <id>http://yoursite.com/compress-executables-with-upx/</id>
    <published>2017-08-19T14:39:28.000Z</published>
    <updated>2017-08-19T15:23:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得当初刚接触学习 golang 的时候,当时使用还是 go 1.4版本,和其他语言的入门一样，写了一个简单的 hello world 程序。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	fmt.Println(<span class="string">"Hello World!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>程序非常简单，整个源文件大小才 4KB。然后执行 go build 编译成可执行文件，结果让我非常惊讶的是这段简单的代码生成的可执行文件竟然有4M之多。<br><a id="more"></a><br>当然，只有升级到了1.8版本之后，情况稍微好了一些，但是生成的可执行程序依然有1.6M之多。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">du</span> <span class="selector-tag">-sh</span> <span class="selector-tag">hello</span>*</div><div class="line">1<span class="selector-class">.6M</span>	<span class="selector-tag">hello</span></div><div class="line">4<span class="selector-class">.0K</span>	<span class="selector-tag">hello</span><span class="selector-class">.go</span></div></pre></td></tr></table></figure></p>
<p>虽然现在服务器的硬盘不再是限制，价格也比较低廉，但是网络带宽依然是瓶颈，当可执行文件需要通过网络进行分发的时候，文件的大小的影响就比较明显了。</p>
<p>这个问题可以通过 upx(the Ultimate Packer for eXecutables) 来解决。</p>
<p>地址：<a href="https://github.com/upx/upx" target="_blank" rel="external">https://github.com/upx/upx</a></p>
<p>压缩效果非常明显，以下 helllo_1 和 hello_2 分别是默认压缩和使用 –brute 参数压缩之后的二进制文件：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">upx -o hello_1 hello</div><div class="line"></div><div class="line">upx --brute hello_2 hello</div><div class="line"></div><div class="line">du -sh hello*</div><div class="line"></div><div class="line"><span class="number">1.6</span>M	hello</div><div class="line"><span class="number">4.0</span>K	hello.go</div><div class="line"><span class="number">576</span>K	hello_1</div><div class="line"><span class="number">456</span>K	hello_2</div></pre></td></tr></table></figure></p>
<p>可见，压缩比相当可观，大概压缩了 70% 的大小。</p>
<p>下面是一个正式项目的压缩效果：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="number">14</span>M	gomessage_v2</div><div class="line"><span class="number">4.2</span>M	gomessage_v2<span class="selector-class">.compressed</span>			<span class="comment">//upx -o gomessage_v2.compressed gomessage_v2</span></div><div class="line"><span class="number">4.1</span>M	gomessage_v2<span class="selector-class">.compressed</span><span class="selector-class">.best</span>		<span class="comment">//upx --best -o gomessage_v2.compressed.best gomessage_v2</span></div><div class="line"><span class="number">3.1</span>M	gomessage_v2<span class="selector-class">.compressed</span><span class="selector-class">.brute</span>		<span class="comment">//upx --brute -o gomessage_v2.compressed.brute gomessage_v2</span></div></pre></td></tr></table></figure></p>
<p>可见压缩之后可执行文件还是小了很多，从 14M 降低到了 3~4M 左右。<br>不同的参数代表着压缩程度，压缩的越多，压缩过程所需的时间也相对比较长。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得当初刚接触学习 golang 的时候,当时使用还是 go 1.4版本,和其他语言的入门一样，写了一个简单的 hello world 程序。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程序非常简单，整个源文件大小才 4KB。然后执行 go build 编译成可执行文件，结果让我非常惊讶的是这段简单的代码生成的可执行文件竟然有4M之多。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="upx" scheme="http://yoursite.com/tags/upx/"/>
    
      <category term="compress" scheme="http://yoursite.com/tags/compress/"/>
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>读书清单(备忘)</title>
    <link href="http://yoursite.com/reading-list/"/>
    <id>http://yoursite.com/reading-list/</id>
    <published>2017-08-19T14:08:27.000Z</published>
    <updated>2017-08-30T15:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017读书清单"><a href="#2017读书清单" class="headerlink" title="2017读书清单"></a>2017读书清单</h2><h3 id="进行中-amp-计划中"><a href="#进行中-amp-计划中" class="headerlink" title="进行中&amp;计划中"></a>进行中&amp;计划中</h3><ul>
<li>《Go并发编程实战》 –郝林</li>
<li>《App 后台开发运维和架构实践》–曾健生</li>
<li>《重构–改善既有代码的设计》 – 中文版</li>
<li>《高性能网站架构实战》 – 刘鑫</li>
<li>《构建高性能Web站点》 – 郭欣</li>
<li>《设计模式之禅》 – 秦小波</li>
<li>《go In Action》（Go语言实战）–中文版</li>
<li>《the way to go》（go语言程序设计）–中文版<br>….</li>
</ul>
<h3 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h3><ul>
<li>《build-web-application-with-golang》–github</li>
<li>《Go语言编程》 – 许式伟</li>
<li>《Go语言最佳实践》– pdf</li>
<li>《深入理解PHP内核》– php-internal.com</li>
</ul>
<p>^_^ 任务艰巨~~~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017读书清单&quot;&gt;&lt;a href=&quot;#2017读书清单&quot; class=&quot;headerlink&quot; title=&quot;2017读书清单&quot;&gt;&lt;/a&gt;2017读书清单&lt;/h2&gt;&lt;h3 id=&quot;进行中-amp-计划中&quot;&gt;&lt;a href=&quot;#进行中-amp-计划中&quot; class
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>使用 &amp; 代替 % 来判断整数奇偶性</title>
    <link href="http://yoursite.com/use-bitwise-and-judge-even-odd/"/>
    <id>http://yoursite.com/use-bitwise-and-judge-even-odd/</id>
    <published>2017-08-08T02:29:06.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，判断整数的奇偶性都会使用取模预算， 性能方面没有测试，但是由于机器可以直接操作二进制，应该会比较快，不过这点性能提升一般情况下对整体性能的影响不大，可以忽略不计。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> num<span class="meta">%2</span>==<span class="number">0</span> &#123;</div><div class="line">	fmt.Println(<span class="string">"even"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	fmt.Println(<span class="string">"odd"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过，还有一种方式也是类似，使用 按位与 来判断整数奇偶性：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> num&amp;<span class="number">1</span>==<span class="number">0</span> &#123;</div><div class="line">	fmt.<span class="keyword">Println</span>(<span class="string">"even"</span>)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	fmt.<span class="keyword">Println</span>(<span class="string">"odd"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也能达到相同的效果。</p>
<p>类似的，使用二进制运算也可以进行乘除法的运算:<br>乘法左移：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a = a * 4</span></div><div class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span> &lt;&lt; <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">//b = b * 8</span></div><div class="line"><span class="selector-tag">b</span> = <span class="selector-tag">b</span> &lt;&lt; <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>除法右移：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a = a / 4</span></div><div class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span> &gt;&gt; <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">//b = b / 8</span></div><div class="line"><span class="selector-tag">b</span> = <span class="selector-tag">b</span> &gt;&gt; <span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>这些都是一些二进制运算的技巧，记下备忘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般情况下，判断整数的奇偶性都会使用取模预算， 性能方面没有测试，但是由于机器可以直接操作二进制，应该会比较快，不过这点性能提升一般情况下对整体性能的影响不大，可以忽略不计。&lt;br&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>阅读 php 源码，使用 vld 扩展查看 opcode</title>
    <link href="http://yoursite.com/php-vld/"/>
    <id>http://yoursite.com/php-vld/</id>
    <published>2017-08-03T02:12:44.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>php 虽然是一门动态语言，但是它也有一个编译的过程，这个过程经过词法分析、语法分析,最终生成 Zend 引擎可以执行的 opcode 指令，类似于 java 的字节码。</p>
<p>要查看一段代码对应的 opcode ，可以使用 <a href="http://pecl.php.net/package/vld/" target="_blank" rel="external">vld 扩展</a> 来查看。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 vld 和安装 php 其他的扩展没有任何区别，下载源码、编译、安装等…<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar zxf vld<span class="number">-0.14</span><span class="number">.0</span>.tar.gz</div><div class="line">cd vld<span class="number">-0.14</span><span class="number">.0</span></div><div class="line">phpize</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>记得要修改 php.ini 启用 vld 扩展:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[vld]</span></div><div class="line"><span class="attr">extensions</span>=vld.so</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 vld 查看 opcode 也非常简单，主要传递参数<code>-dvld.active=1</code>来激活 vld 扩展即可：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@host ~]# php -dvld.active=<span class="number">1</span> source.php</div><div class="line">Finding <span class="built_in">entry</span> points</div><div class="line">Branch analysis from <span class="keyword">position</span>: <span class="number">0</span></div><div class="line">Jump found. (Code = <span class="number">62</span>) <span class="keyword">Position</span> <span class="number">1</span> = -<span class="number">2</span></div><div class="line">filename:       /root/source.php</div><div class="line"><span class="function"><span class="keyword">function</span></span> <span class="keyword">name</span>:  (null)</div><div class="line"><span class="keyword">number</span> of ops:  <span class="number">3</span></div><div class="line">compiled vars:  <span class="comment">!0 = $a</span></div><div class="line">line     #* E I O op                           fetch          ext  <span class="keyword">return</span>  operands</div><div class="line">-------------------------------------------------------------------------------------</div><div class="line">   <span class="number">2</span>     <span class="number">0</span>  E &gt;   EXT_STMT</div><div class="line">         <span class="number">1</span>        <span class="keyword">ASSIGN</span>                                                   <span class="comment">!0, 10</span></div><div class="line">   <span class="number">3</span>     <span class="number">2</span>      &gt; <span class="keyword">RETURN</span>                                                   <span class="number">1</span></div><div class="line"></div><div class="line">branch: #  <span class="number">0</span>; line:     <span class="number">2</span>-    <span class="number">3</span>; sop:     <span class="number">0</span>; eop:     <span class="number">2</span>; out1:  -<span class="number">2</span></div><div class="line">path #<span class="number">1</span>: <span class="number">0</span>,</div></pre></td></tr></table></figure></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>vld 扩展主要有以下几个参数：</p>
<ul>
<li>vld.active=1 启用 vld 扩展</li>
<li>vld.verbosity=3 显示更详细信息</li>
<li>vld.execute=0 只显示 opcode 而不执行 php 脚本</li>
</ul>
<p>还有一些其他参数，请参考 <a href="http://www.php-internals.com/book/?p=C-php-vld" target="_blank" rel="external">深入理解 php 内核#VLD 扩展使用指南</a></p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果经常需要查看 opcode , 而每次在命令中传递参数避免麻烦的话，可以将以上 vld 的参数配置在 php.ini 文件中，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[vld]</div><div class="line">extensions=vld<span class="selector-class">.so</span></div><div class="line">vld.active=<span class="number">1</span></div><div class="line">vld<span class="selector-class">.vld</span><span class="selector-class">.verbosity</span>=<span class="number">3</span></div><div class="line">vld.execute=<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>从而避免手动使用 <code>php -d</code> 参数来传递 vld 配置。<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">php <span class="comment">--help</span></div><div class="line">...</div><div class="line"> -d foo[=bar]     Define INI <span class="keyword">entry</span> foo <span class="keyword">with</span> value <span class="symbol">'bar</span>'</div><div class="line">...</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php 虽然是一门动态语言，但是它也有一个编译的过程，这个过程经过词法分析、语法分析,最终生成 Zend 引擎可以执行的 opcode 指令，类似于 java 的字节码。&lt;/p&gt;
&lt;p&gt;要查看一段代码对应的 opcode ，可以使用 &lt;a href=&quot;http://pecl.php.net/package/vld/&quot;&gt;vld 扩展&lt;/a&gt; 来查看。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;安装 vld 和安装 php 其他的扩展没有任何区别，下载源码、编译、安装等…&lt;br&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar zxf vld&lt;span class=&quot;number&quot;&gt;-0.14&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd vld&lt;span class=&quot;number&quot;&gt;-0.14&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;phpize&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;记得要修改 php.ini 启用 vld 扩展:&lt;br&gt;&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[vld]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;extensions&lt;/span&gt;=vld.so&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="opcode" scheme="http://yoursite.com/tags/opcode/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>阅读 php 源码，ctags 配合 vim 实现代码跳转</title>
    <link href="http://yoursite.com/ctags/"/>
    <id>http://yoursite.com/ctags/</id>
    <published>2017-08-01T08:40:05.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读 php 源码的时候，为了方便跳转到相应的函数定义的位置，需要使用 ctags 来生成 tags 文件，再配合 vim 来实现跳转。</p>
<h2 id="安装-ctags"><a href="#安装-ctags" class="headerlink" title="安装 ctags"></a>安装 ctags</h2><p>macOS 上使用 ctags 非常简单，一般都预装了 ctags 。</p>
<p>如果没有安装，可以使用 <code>brew install ctags</code> 来安装。</p>
<h2 id="tags-文件"><a href="#tags-文件" class="headerlink" title="tags 文件"></a>tags 文件</h2><p>在 php 源码根目录，执行 <code>ctags -R</code>, 就会在当前目录下生成一个名为 <code>tags</code> 的 文件。 </p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">~/codes/php-src(master*) » tail -n <span class="number">20</span> tags                                                                                                                                       </div><div class="line">zval_marked_grey	Zend<span class="regexp">/zend_gc.h	/</span>^	uint32_t zval_marked_grey;$/;<span class="string">"	m	struct:_zend_gc_globals</span></div><div class="line">zval_object_property_dump	ext/standard/var.c	/^static void zval_object_property_dump(zval *zv, zend_ulong index, zend_string *key, int level) \/* &#123;&#123;&#123; *\/$/;"	f	file:</div><div class="line">zval_opt_copy_ctor	Zend<span class="regexp">/zend_variables.h	/</span>^<span class="comment">#define zval_opt_copy_ctor(/;"	d</span></div><div class="line">zval_possible_root	Zend<span class="regexp">/zend_gc.h	/</span>^	uint32_t zval_possible_root;$/;<span class="string">"	m	struct:_zend_gc_globals</span></div><div class="line">zval_ptr_dtor	Zend/zend_execute.c	/^<span class="subst">#define</span> zval_ptr_dtor(/;"	d	file:</div><div class="line">zval_ptr_dtor	Zend<span class="regexp">/zend_execute.c	/</span>^<span class="comment">#undef zval_ptr_dtor$/;"	d	file:</span></div><div class="line">zval_ptr_dtor	Zend<span class="regexp">/zend_variables.h	/</span>^<span class="comment">#define zval_ptr_dtor(/;"	d</span></div><div class="line">zval_ptr_dtor_nogc	Zend<span class="regexp">/zend_variables.h	/</span>^<span class="comment">#define zval_ptr_dtor_nogc(/;"	d</span></div><div class="line">zval_ptr_dtor_wrapper	Zend<span class="regexp">/zend_variables.h	/</span>^<span class="comment">#define zval_ptr_dtor_wrapper /;"	d</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>tags 文件的格式非常简单，以tab 分割各项，基本有以下几项内容:</p>
<p>第一列：tag name ,例如 <code>zval_ptr_dtor</code></p>
<p>第二列：tag 所在的文件，例如 <code>Zend/zend_variables.h</code></p>
<p>第三列：执行的命令，一般是指在 vi 中执行的正则搜索命令，例如 <code>/^#define zval_ptr_dtor(/;&quot;</code> </p>
<p>第四列：tag 的类型，例如：d , 类型在不同的语言中有不同的含义。在 c 中， d 代表着 macro definitions (宏定义)</p>
<p>具体的各语言的 tag 的类型定义可以使用 <code>ctags --list-kinds</code> 来查看:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">~<span class="regexp">/codes/php</span>-src(master*) » ctags --list-kinds</div><div class="line">C</div><div class="line">    c  classes</div><div class="line">    d  <span class="function"><span class="keyword">macro</span> <span class="title">definitions</span></span></div><div class="line">    e  enumerators (values inside an enumeration)</div><div class="line">    f  function definitions</div><div class="line">    g  enumeration names</div><div class="line">    l  local variables [off]</div><div class="line">    m  <span class="class"><span class="keyword">class</span>, <span class="title">struct</span>, <span class="title">and</span> <span class="title">union</span> <span class="title">members</span></span></div><div class="line">    n  namespaces</div><div class="line">    p  function prototypes [off]</div><div class="line">    s  structure names</div><div class="line">    t  typedefs</div><div class="line">    u  <span class="class"><span class="keyword">union</span> <span class="title">names</span></span></div><div class="line">    v  variable definitions</div><div class="line">    x  external and forward variable declarations [off]</div><div class="line">Java</div><div class="line">    c  classes</div><div class="line">    e  <span class="class"><span class="keyword">enum</span> <span class="title">constants</span></span></div><div class="line">    f  fields</div><div class="line">    g  <span class="class"><span class="keyword">enum</span> <span class="title">types</span></span></div><div class="line">    i  interfaces</div><div class="line">    l  local variables [off]</div><div class="line">    m  methods</div><div class="line">    p  packages</div></pre></td></tr></table></figure>
<p>查看 ctags 支持哪些语言可以使用 <code>ctags --list-languages</code> 来查看:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">~/codes/php-src(master*) » ctags --list-languages</div><div class="line">....</div><div class="line">C</div><div class="line">C++</div><div class="line">Flex</div><div class="line">Fortran</div><div class="line">HTML</div><div class="line">Java</div><div class="line">JavaScript</div><div class="line">Lisp</div><div class="line">Lua</div><div class="line">Make</div><div class="line">MatLab</div><div class="line">OCaml</div><div class="line">Pascal</div><div class="line">Perl</div><div class="line">PHP</div><div class="line">Python</div><div class="line">...</div></pre></td></tr></table></figure>
<p>大概有 41 种，不过 并没有看到 对 go 的支持，应该是因为 go 语言还是比较年轻的原因。</p>
<h2 id="使用-tags"><a href="#使用-tags" class="headerlink" title="使用 tags"></a>使用 tags</h2><p>一般情况下，在 tags 文件所在目录使用 vi (vim) 打开源码文件，在文件中使用快捷键 <code>ctrl+]</code> 即可实现跳转，<code>ctrl+t</code> 即可回到跳转之前的位置。</p>
<p>如果无法跳转，提示 <code>E433: No tags file</code> ，则需要手动指定 tags 文件,通过 vim 命令或者直接修改 vim 的配置文件 vimrc 均可：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#在~/.vimrc中添加:</div><div class="line"><span class="keyword">set</span> <span class="keyword">tags</span>+=~/codes/php-src/<span class="keyword">tags</span></div><div class="line"></div><div class="line">#或者在<span class="keyword">vim</span>中运行命令:</div><div class="line">:<span class="keyword">set</span> <span class="keyword">tags</span>+=~/codes/php-src/<span class="keyword">tags</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读 php 源码的时候，为了方便跳转到相应的函数定义的位置，需要使用 ctags 来生成 tags 文件，再配合 vim 来实现跳转。&lt;/p&gt;
&lt;h2 id=&quot;安装-ctags&quot;&gt;&lt;a href=&quot;#安装-ctags&quot; class=&quot;headerlink&quot; title=&quot;安装 ctags&quot;&gt;&lt;/a&gt;安装 ctags&lt;/h2&gt;&lt;p&gt;macOS 上使用 ctags 非常简单，一般都预装了 ctags 。&lt;/p&gt;
&lt;p&gt;如果没有安装，可以使用 &lt;code&gt;brew install ctags&lt;/code&gt; 来安装。&lt;/p&gt;
&lt;h2 id=&quot;tags-文件&quot;&gt;&lt;a href=&quot;#tags-文件&quot; class=&quot;headerlink&quot; title=&quot;tags 文件&quot;&gt;&lt;/a&gt;tags 文件&lt;/h2&gt;&lt;p&gt;在 php 源码根目录，执行 &lt;code&gt;ctags -R&lt;/code&gt;, 就会在当前目录下生成一个名为 &lt;code&gt;tags&lt;/code&gt; 的 文件。 &lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;~/codes/php-src(master*) » tail -n &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; tags                                                                                                                                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_marked_grey	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_gc.h	/&lt;/span&gt;^	uint32_t zval_marked_grey;$/;&lt;span class=&quot;string&quot;&gt;&quot;	m	struct:_zend_gc_globals&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_object_property_dump	ext/standard/var.c	/^static void zval_object_property_dump(zval *zv, zend_ulong index, zend_string *key, int level) \/* &amp;#123;&amp;#123;&amp;#123; *\/$/;&quot;&lt;/span&gt;	f	file:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_opt_copy_ctor	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_opt_copy_ctor(/;&quot;	d&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_possible_root	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_gc.h	/&lt;/span&gt;^	uint32_t zval_possible_root;$/;&lt;span class=&quot;string&quot;&gt;&quot;	m	struct:_zend_gc_globals&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_ptr_dtor	Zend/zend_execute.c	/^&lt;span class=&quot;subst&quot;&gt;#define&lt;/span&gt; zval_ptr_dtor(/;&quot;&lt;/span&gt;	d	file:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_ptr_dtor	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_execute.c	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#undef zval_ptr_dtor$/;&quot;	d	file:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_ptr_dtor	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_ptr_dtor(/;&quot;	d&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_ptr_dtor_nogc	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_ptr_dtor_nogc(/;&quot;	d&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;zval_ptr_dtor_wrapper	Zend&lt;span class=&quot;regexp&quot;&gt;/zend_variables.h	/&lt;/span&gt;^&lt;span class=&quot;comment&quot;&gt;#define zval_ptr_dtor_wrapper /;&quot;	d&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="ctags" scheme="http://yoursite.com/tags/ctags/"/>
    
  </entry>
  
  <entry>
    <title>golang 匿名 struct 的使用方式</title>
    <link href="http://yoursite.com/go-anonymous-struct/"/>
    <id>http://yoursite.com/go-anonymous-struct/</id>
    <published>2017-07-08T15:20:01.000Z</published>
    <updated>2017-07-10T15:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>编程中有时候需要一个临时的 struct 来封装数据，而这个 struct 的结构在其它地方又不会被二次复用,可以使用匿名 struct 来实现。</p>
<p>主要有两种方式,如下:<br>第一种方式，通过 var 初始化</p>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var <span class="literal">user</span> struct&#123;<span class="keyword">Name</span> string<span class="comment">;age int&#125;</span></div><div class="line"><span class="literal">user</span>.<span class="keyword">Name</span> = <span class="string">"name"</span></div><div class="line"><span class="literal">user</span>.age = <span class="number">18</span></div></pre></td></tr></table></figure>
<p>第二种方式，直接初始化</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">json.Marshal(<span class="keyword">struct</span>&#123;Name <span class="built_in">string</span>;age <span class="keyword">int</span>&#125;&#123;<span class="string">"name"</span>,<span class="number">18</span>&#125;)</div></pre></td></tr></table></figure>
<p>或者：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">json.Marshal(<span class="keyword">struct</span>&#123;</div><div class="line">	Name <span class="built_in">string</span></div><div class="line">	age <span class="keyword">int</span></div><div class="line">&#125;&#123;<span class="string">"name"</span>,<span class="number">18</span>&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编程中有时候需要一个临时的 struct 来封装数据，而这个 struct 的结构在其它地方又不会被二次复用,可以使用匿名 struct 来实现。&lt;/p&gt;
&lt;p&gt;主要有两种方式,如下:&lt;br&gt;第一种方式，通过 var 初始化&lt;/p&gt;
&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="anonymous" scheme="http://yoursite.com/tags/anonymous/"/>
    
  </entry>
  
  <entry>
    <title>Glide--golang 包管理工具简单教程</title>
    <link href="http://yoursite.com/glide/"/>
    <id>http://yoursite.com/glide/</id>
    <published>2017-07-08T15:06:00.000Z</published>
    <updated>2017-07-08T15:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<p> Golang挺好用的，但是目前比较受到诟病的是其没有自带包管理工具(golang社区已经发起了一个<a href="https://github.com/golang/dep" target="_blank" rel="external">dep</a>的项目，不过要正式被golang接受还需要一段时间)。官方没有咋办，那就自己造轮子呗。所以 go的包管理工具就五花八门、层出不穷了。目前有Glide, gopm, godep,gpm，gom等等。。。</p>
<p>这里介绍一个工具，使用比较简单: glide</p>
<p>我已经将其的文档翻译成了中文:  <a href="http://glidedocs.readthedocs.io/" target="_blank" rel="external">glide 中文文档</a>.</p>
<p>翻译的内容放在github上: <a href="https://github.com/javasgl/GlideDocs" target="_blank" rel="external">https://github.com/javasgl/GlideDocs</a></p>
<p>不想看文章的可以直接去看中文文档，文档写的很清晰，文档中关于<code>glide</code>的用法和原理都有说明。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装就没啥可以说的了，去下载安装即可了(<a href="http://glidedocs.readthedocs.io/zh/latest/#glide" target="_blank" rel="external">http://glidedocs.readthedocs.io/zh/latest/#glide</a>)</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在你已有的go项目的根目录下直接运行:<code>glide init</code>，就会生成一个<code>glide.yaml</code>配置文件，配置信息的详细说明见<a href="http://glidedocs.readthedocs.io/zh/latest/glide.yaml/" target="_blank" rel="external">文档</a>。<br>运行<code>glide init</code>之后，<code>glide</code>自动分析当前项目里已有的依赖包的关系并自动生成了<code>glide.yaml</code>文件来管理这些依赖关系。<br>这个过程需要一段时间来运行，因为它在扫描你的代码在推算依赖关系，请耐心等待。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">~<span class="regexp">/codes/xxxxx/xxxx/</span>: glide init</div><div class="line">[INFO]	Generating a YAML configuration file <span class="keyword">and</span> guessing the dependencies</div><div class="line">[INFO]	Attempting <span class="keyword">to</span> <span class="keyword">import</span> <span class="keyword">from</span> other package managers (use --skip-<span class="keyword">import</span> <span class="keyword">to</span> skip)</div><div class="line">[INFO]	Scanning code <span class="keyword">to</span> look <span class="keyword">for</span> dependencies</div><div class="line">[INFO]<span class="function">	--&gt;</span> Found reference <span class="keyword">to</span> github.com/astaxie/beego</div><div class="line">[INFO]<span class="function">	--&gt;</span> Found reference <span class="keyword">to</span> github.com/stretchr/testify/assert</div><div class="line">[INFO]<span class="function">	--&gt;</span> Found reference <span class="keyword">to</span> gopkg.<span class="keyword">in</span>/olivere/elastic.v3</div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>运行完成之后,<code>glide.yaml</code>中的内容如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">package:</span> .</div><div class="line"><span class="string">import:</span></div><div class="line">- <span class="string">package:</span> github.com<span class="regexp">/astaxie/</span>beego</div><div class="line">- <span class="string">package:</span> github.com<span class="regexp">/stretchr/</span>testify</div><div class="line"><span class="symbol">  subpackages:</span></div><div class="line">  - <span class="keyword">assert</span></div><div class="line">- <span class="string">package:</span> gopkg.<span class="keyword">in</span><span class="regexp">/olivere/</span>elastic.v3</div></pre></td></tr></table></figure></p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>运行<code>glide get</code>,类似于<code>go get</code>,不过不同的是，<code>glide get</code>会下载你指定包到<code>vendor/</code>目录中而不是之前的<code>GOPATH</code>之中。关于go的 <code>vendor/</code>目录请执行google，这是go 1.5版本之后的功能。<br>这个<code>glide get</code>下载包的同时，也会更新<code>glide.yaml</code>中的配置:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~<span class="regexp">/cods/</span>xxxx<span class="regexp">/xxxx/</span>:glide get https:<span class="regexp">//gi</span>thub.com<span class="regexp">/garyburd/</span>redigo</div><div class="line">....</div></pre></td></tr></table></figure></p>
<p>完成之后,<code>glide.yaml</code>也更新了：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">package:</span> .</div><div class="line"><span class="string">import:</span></div><div class="line">- <span class="string">package:</span> github.com<span class="regexp">/astaxie/</span>beego</div><div class="line">- <span class="string">package:</span> github.com<span class="regexp">/stretchr/</span>testify</div><div class="line"><span class="symbol">  subpackages:</span></div><div class="line">  - <span class="keyword">assert</span></div><div class="line">- <span class="string">package:</span> gopkg.<span class="keyword">in</span><span class="regexp">/olivere/</span>elastic.v3</div><div class="line">- <span class="string">package:</span> github.com<span class="regexp">/grayburd/</span>redigo</div></pre></td></tr></table></figure></p>
<h2 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h2><p>运行<code>glide up</code>来更新<code>glide.yaml</code>中配置的依赖包。<br>首次运行的时候，会生成一个<code>glide.lock</code>文件，对php的<code>composer</code>熟悉的一样就知道这个锁文件是干嘛的了。这个锁文件是保证再次运行<code>glide up</code>的时候不会去远程获取更新，而是直接使用这个锁文件中定义的依赖包及其版本。在协作开发时，一般这个锁文件可以进行版本控制，这样其他人拿到这个锁文件之后，执行<code>glide up</code>则会获取锁文件中指定的包版本，起到多人协作开发时统一开发环境的问题。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~/cods/xxxx/xxxx/:glide up</div><div class="line">[<span class="symbol">INFO</span>]	<span class="symbol">Downloading</span> dependencies. <span class="symbol">Please</span> wait...</div><div class="line">[<span class="symbol">INFO</span>]	--&gt; <span class="symbol">Fetching</span> github.com/stretchr/testify.</div><div class="line">[<span class="symbol">INFO</span>]	--&gt; <span class="symbol">Fetching</span> gopkg.in/olivere/elastic.v3.</div><div class="line">[<span class="symbol">INFO</span>]	--&gt; <span class="symbol">Fetching</span> github.com/astaxie/beego.</div><div class="line">....</div></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他的一些命令主要是帮助管理这些依赖的。详细见 <a href="http://glidedocs.readthedocs.io/zh/latest/commands/" target="_blank" rel="external">http://glidedocs.readthedocs.io/zh/latest/commands/</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家 star ,提交 issue 或者 fork 提交 pull request 来帮助我改进翻译质量。翻译项目地址: <a href="https://github.com/javasgl/GlideDocs" target="_blank" rel="external">https://github.com/javasgl/GlideDocs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Golang挺好用的，但是目前比较受到诟病的是其没有自带包管理工具(golang社区已经发起了一个&lt;a href=&quot;https://github.com/golang/dep&quot;&gt;dep&lt;/a&gt;的项目，不过要正式被golang接受还需要一段时间)。官方没有咋办，那就自己造轮子呗。所以 go的包管理工具就五花八门、层出不穷了。目前有Glide, gopm, godep,gpm，gom等等。。。&lt;/p&gt;
&lt;p&gt;这里介绍一个工具，使用比较简单: glide&lt;/p&gt;
&lt;p&gt;我已经将其的文档翻译成了中文:  &lt;a href=&quot;http://glidedocs.readthedocs.io/&quot;&gt;glide 中文文档&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;翻译的内容放在github上: &lt;a href=&quot;https://github.com/javasgl/GlideDocs&quot;&gt;https://github.com/javasgl/GlideDocs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不想看文章的可以直接去看中文文档，文档写的很清晰，文档中关于&lt;code&gt;glide&lt;/code&gt;的用法和原理都有说明。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="glide" scheme="http://yoursite.com/tags/glide/"/>
    
  </entry>
  
  <entry>
    <title>golang中slice越界问题</title>
    <link href="http://yoursite.com/go-slice-append/"/>
    <id>http://yoursite.com/go-slice-append/</id>
    <published>2017-06-20T16:02:26.000Z</published>
    <updated>2017-06-20T16:27:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>go</code>中<code>slice</code>由于其类似于一个长度可动态变化的数组而非常方便使用。<br><code>slice</code>有两个基本属性：<code>cap</code>,<code>len</code>，分别代表容量和已有数据长度。<br>一般声明<code>slice</code>的两种方式如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义了一个初始长度为0,容量为2的int 类型的 `slice`</span></div><div class="line">slice:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> slice=[]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</div></pre></td></tr></table></figure></p>
<p>往<code>slice</code>中添加元素使用<code>append</code>方法：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slice=<span class="built_in">append</span>(slice,<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>当然有时也可以使用索引值来直接赋值：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">slice[0]</span>=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>不过这种方式需要注意的是，索引的值不能大于<code>slice</code>的容量(cap)，否则会报出<code>panic: runtime error: index out of range</code>错误。所以一般情况下应该优先使用<code>append</code>的方法给<code>slice</code>添加元素。</p>
<p>同样，对<code>slice</code>或者<code>array</code>进行切片(slice)操作的时候，索引也不能超过当前<code>slice</code>的容量或者<code>array</code>的长度<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var slice = []<span class="built_in">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div><div class="line"><span class="keyword">fmt</span>.Println(slice[:<span class="number">5</span>]) //[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="keyword">fmt</span>.Println(slice[<span class="number">1</span>:<span class="number">10</span>]) //slice bounds <span class="keyword">out</span> of <span class="built_in">range</span></div></pre></td></tr></table></figure></p>
<p><code>slice</code>的容量扩容规则： 当容量不够时，容量扩充为之前容量的2倍</p>
<p>在调用<code>append</code>方法给<code>slice</code>添加元素的时候，可以一次添加多个或者全部：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice = []<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;</div><div class="line"><span class="keyword">var</span> slice2 = []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line"></div><div class="line">fmt.Println(<span class="built_in">append</span>(slice,slice2...)) <span class="comment">//[0,1,2,3]</span></div><div class="line"></div><div class="line">fmt.Println(<span class="built_in">append</span>(slice,<span class="number">4</span>,<span class="number">5</span>)) <span class="comment">//[0,1,4,5]</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;go&lt;/code&gt;中&lt;code&gt;slice&lt;/code&gt;由于其类似于一个长度可动态变化的数组而非常方便使用。&lt;br&gt;&lt;code&gt;slice&lt;/code&gt;有两个基本属性：&lt;code&gt;cap&lt;/code&gt;,&lt;code&gt;len&lt;/code&gt;，分别代表容量和已有数据长度。&lt;br&gt;一般声明&lt;code&gt;slice&lt;/code&gt;的两种方式如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义了一个初始长度为0,容量为2的int 类型的 `slice`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;slice:=&lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice=[]&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;往&lt;code&gt;slice&lt;/code&gt;中添加元素使用&lt;code&gt;append&lt;/code&gt;方法：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;slice=&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(slice,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="slice" scheme="http://yoursite.com/tags/slice/"/>
    
  </entry>
  
  <entry>
    <title>Mac上使用gdb单步调试golang程序</title>
    <link href="http://yoursite.com/debug-golang-with-gdb-on-mac/"/>
    <id>http://yoursite.com/debug-golang-with-gdb-on-mac/</id>
    <published>2017-06-07T14:29:40.000Z</published>
    <updated>2017-06-21T11:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>最近在写<code>golang</code>程序的时候，想要想单步调试一下程序，减少手动<code>print log</code>调试代码的痛苦。</p>
<p>找了一些golang单步调试的方案，主要有几下几种方案:</p>
<ul>
<li>使用 <code>SublimeGDB</code> 插件在<code>Sublime</code> 中调试</li>
<li>使用 <code>Goland IDE</code> 调试,不过可惜<code>Goland</code>还未发布正式版本</li>
<li>使用 <code>gdb</code> 工具调试</li>
</ul>
<p>每个都尝试了一遍:</p>
<ul>
<li><code>SublimeGDB</code> 界面不错，但是调试速度太慢，设置一个断点都需要很长时间，故 pass 此方案。</li>
<li><code>Goland IDE</code> 只是预览版，有使用时间限制,还是等等吧，等 <code>Jetbrains</code> 出正式版后再去试试.(<code>Jetbrains</code>出品必属精品)</li>
<li><code>gdb</code>调试，使用下来发现，目前而言，<code>gdb</code>的方式还是用的比较顺手的。</li>
</ul>
<p>不过在<code>mac</code>电脑上使用<code>gdb</code>还是遇到了一些问题,不过还好都顺利解决了。<br><a id="more"></a></p>
<p>遇到的主要问题有权限问题和 mac系统版本问题</p>
<h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><p>mac 系统为了安全起见，不允许普通用户直接运行gdb,运行时会出现以下问题：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Unable to find Mach task port for process-id 4263: (os/kern) failure (0x5).</div><div class="line"> (please<span class="built_in"> check </span>gdb is codesigned - see taskgated(8))</div></pre></td></tr></table></figure></p>
<p>这个问题，网络上已有解决方案，比如对gdb进行签名啥的，嫌麻烦，没有尝试。详细步骤见<a href="https://sourceware.org/gdb/wiki/BuildingOnDarwin" target="_blank" rel="external">这里</a><br>这里直接使用 <code>sudo gdb ..</code>来运行。可以自行设置命令alias。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> gdb=<span class="string">'sudo gdb'</span></div></pre></td></tr></table></figure>
<p>不过这样就得每次输入系统密码了。不过可以使用 <code>expect</code> 来让命令行自动输入密码(这是后话)。</p>
<h2 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h2><p>开始调试的时候遇到了一下问题：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">During startup program terminated <span class="keyword">with</span> <span class="keyword">signal</span><span class="string"> ?</span>, Unknown <span class="keyword">signal</span><span class="string">.</span></div></pre></td></tr></table></figure></p>
<p>查询了一下，Mac Sierra 这个版本的系统不支持 gdb 调试。解决方案五花八门。<br>主要进行了一下操作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew upgrade gdb </div><div class="line">touch ~/.gdbinit</div><div class="line">cat '<span class="keyword">set</span> <span class="keyword">startup</span>-<span class="keyword">with</span>-shell <span class="keyword">off</span><span class="string">' &gt; ~/.gdbinit</span></div></pre></td></tr></table></figure></p>
<p>这些操作主要是:</p>
<ul>
<li>将 gdb 从 7.1.2升级到最新的 8.0</li>
<li>给 gdb 写入配置文件</li>
</ul>
<p>幸运的是，经过这两步的处理，gdb 已经能够在本人机器上正常运行了。</p>
<p>下面记录下一些 常用的gdb操作:</p>
<table>
<thead>
<tr>
<th style="text-align:left">command</th>
<th style="text-align:left">alias</th>
<th style="text-align:center">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">l main.main</td>
<td style="text-align:left">list main.main</td>
<td style="text-align:center">查看 golang main函数入口源码</td>
</tr>
<tr>
<td style="text-align:left">b 12</td>
<td style="text-align:left">breakpoints 12</td>
<td style="text-align:center">在12行设置一个断点</td>
</tr>
<tr>
<td style="text-align:left">d</td>
<td style="text-align:left">delete</td>
<td style="text-align:center">删除所有断点</td>
</tr>
<tr>
<td style="text-align:left">i b</td>
<td style="text-align:left">info breakpoints</td>
<td style="text-align:center">查看已经设置的断点</td>
</tr>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:left">run</td>
<td style="text-align:center">开始运行程序</td>
</tr>
<tr>
<td style="text-align:left">n</td>
<td style="text-align:left">next</td>
<td style="text-align:center">执行下一行，相当于step over</td>
</tr>
<tr>
<td style="text-align:left">s</td>
<td style="text-align:left">-</td>
<td style="text-align:center">进入函数内部，相当于step into</td>
</tr>
<tr>
<td style="text-align:left">i locals</td>
<td style="text-align:left">info locals</td>
<td style="text-align:center">查看局部变量</td>
</tr>
<tr>
<td style="text-align:left">i args</td>
<td style="text-align:left">info args</td>
<td style="text-align:center">查看参数</td>
</tr>
<tr>
<td style="text-align:left">p paramName</td>
<td style="text-align:left">print paramName</td>
<td style="text-align:center">打印变量</td>
</tr>
<tr>
<td style="text-align:left">c</td>
<td style="text-align:left">-</td>
<td style="text-align:center">继续执行，直到下一个断点</td>
</tr>
<tr>
<td style="text-align:left">whatis paramName</td>
<td style="text-align:left">-</td>
<td style="text-align:center">查看变量类型</td>
</tr>
<tr>
<td style="text-align:left">up</td>
<td style="text-align:left">-</td>
<td style="text-align:center">返回上一次函数</td>
</tr>
<tr>
<td style="text-align:left">down</td>
<td style="text-align:left">-</td>
<td style="text-align:center">进入下一层函数</td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:left">help</td>
<td style="text-align:center">help</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单步调试&quot;&gt;&lt;a href=&quot;#单步调试&quot; class=&quot;headerlink&quot; title=&quot;单步调试&quot;&gt;&lt;/a&gt;单步调试&lt;/h2&gt;&lt;p&gt;最近在写&lt;code&gt;golang&lt;/code&gt;程序的时候，想要想单步调试一下程序，减少手动&lt;code&gt;print log&lt;/code&gt;调试代码的痛苦。&lt;/p&gt;
&lt;p&gt;找了一些golang单步调试的方案，主要有几下几种方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;SublimeGDB&lt;/code&gt; 插件在&lt;code&gt;Sublime&lt;/code&gt; 中调试&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;Goland IDE&lt;/code&gt; 调试,不过可惜&lt;code&gt;Goland&lt;/code&gt;还未发布正式版本&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;gdb&lt;/code&gt; 工具调试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个都尝试了一遍:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SublimeGDB&lt;/code&gt; 界面不错，但是调试速度太慢，设置一个断点都需要很长时间，故 pass 此方案。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Goland IDE&lt;/code&gt; 只是预览版，有使用时间限制,还是等等吧，等 &lt;code&gt;Jetbrains&lt;/code&gt; 出正式版后再去试试.(&lt;code&gt;Jetbrains&lt;/code&gt;出品必属精品)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdb&lt;/code&gt;调试，使用下来发现，目前而言，&lt;code&gt;gdb&lt;/code&gt;的方式还是用的比较顺手的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过在&lt;code&gt;mac&lt;/code&gt;电脑上使用&lt;code&gt;gdb&lt;/code&gt;还是遇到了一些问题,不过还好都顺利解决了。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="gdb" scheme="http://yoursite.com/tags/gdb/"/>
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>压力测试工具ab、webbench、http_load、siege简单使用</title>
    <link href="http://yoursite.com/pressure-test-tools/"/>
    <id>http://yoursite.com/pressure-test-tools/</id>
    <published>2017-06-05T02:05:14.000Z</published>
    <updated>2017-06-05T14:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍ab、http_load、webbench、siege四种压力测试工具的使用。</p>
<h1 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h1><p><code>ab</code> 是 <code>apache</code> 服务器自带的一个压力测试工具。安装<code>apache</code> web服务器时就自动安装了。当然，<code>ab</code>也是可以单独安装的，如果你不想安装<code>apache</code>而只是想安装<code>ab</code>，那么可以使用以下方式安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# yum install httpd-tools</div></pre></td></tr></table></figure></p>
<p>安装完成之后即可使用<code>ab</code>进行测试了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# ab -h</div><div class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</div><div class="line">Options are:</div><div class="line">    -n requests     Number of requests to perform</div><div class="line">    -c concurrency  Number of multiple requests to make</div><div class="line">    ....</div><div class="line">    -h              Display usage information (this message)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>压力测试的时候一般使用到 <code>-n</code>和<code>-c</code>参数来分别指定运行次数和并发数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# ab -n 1000 -c 100 https://baidu.com/</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking baidu.com (be patient)</div><div class="line">Completed 100 requests</div><div class="line">...</div><div class="line">Completed 1000 requests</div><div class="line">Finished 1000 requests</div><div class="line"></div><div class="line">....</div><div class="line"></div><div class="line">Concurrency Level:      100</div><div class="line">Time taken for tests:   3.742 seconds</div><div class="line">Complete requests:      1000</div><div class="line">Failed requests:        0</div><div class="line">Write errors:           0</div><div class="line">...</div><div class="line">Requests per second:    267.23 [#/sec] (mean)</div><div class="line">Time per request:       374.213 [ms] (mean)</div><div class="line">Time per request:       3.742 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          92.50 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:       93  260  50.7    269     498</div><div class="line">Processing:    26   88  45.6     77     362</div><div class="line">Waiting:       25   62  31.8     50     356</div><div class="line">Total:        125  348  47.5    342     635</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%    342</div><div class="line">  ....</div><div class="line">  99%    534</div><div class="line"> 100%    635 (longest request)</div></pre></td></tr></table></figure></p>
<p>测试结果中，重点关注<code>Requests per second</code>和<code>Time per request</code> 指标,分别是每秒请求数和单个请求耗时。注意这些指标只能作为性能参考，因为会受到各种因素的影响，比如网络环境的影响…</p>
<h1 id="http-load"><a href="#http-load" class="headerlink" title="http_load"></a>http_load</h1><p><code>http_load</code>非常轻量，程序解压后<code>100kb</code>左右的大小。不过不支持直接测试<code>url</code>，需要先将要测试的<code>url</code>写入文件，把文件作为参数传递给<code>http_load</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# http_load</div><div class="line">usage:  http_load [-checksum] [-throttle] [-proxy host:port] [-verbose] [-timeout secs] [-sip sip_file]</div><div class="line">            -parallel N | -rate N [-jitter]</div><div class="line">            -fetches N | -seconds N</div><div class="line">            url_file</div><div class="line">One start specifier, either -parallel or -rate, is required.</div><div class="line">One end specifier, either -fetches or -seconds, is required.</div></pre></td></tr></table></figure></p>
<p>经常需要使用到的参数是<code>-parallel</code>和<code>-fetches</code>，分别表示并发数和总共请求数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# http_load -parallel 100 -fetches 1000 a.txt</div><div class="line">....</div><div class="line">1000 fetches, 100 max parallel, 55088 bytes, in 1.8685 seconds</div><div class="line">55.088 mean bytes/connection</div><div class="line">535.189 fetches/sec, 29482.5 bytes/sec</div><div class="line">msecs/connect: 31.5979 mean, 48.524 max, 26.395 min</div><div class="line">msecs/first-response: 36.9429 mean, 1312.77 max, 5.107 min</div><div class="line">999 bad byte counts</div><div class="line">HTTP response codes:</div><div class="line">  code 200 -- 514</div></pre></td></tr></table></figure></p>
<p>测试结果中，重点关注<code>fetches/sec</code>和<code>msecs/connect</code>,分别表示每秒处理请求数和每个连接平均响应时间。</p>
<h1 id="webbench"><a href="#webbench" class="headerlink" title="webbench"></a>webbench</h1><p><code>webbench</code> 也非常轻量级，和<code>http_load</code>大小差不多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# webbench</div><div class="line">webbench [option]... URL</div><div class="line">  -f|--force               Don&apos;t wait for reply from server.</div><div class="line">  -r|--reload              Send reload request - Pragma: no-cache.</div><div class="line">  -t|--time &lt;sec&gt;          Run benchmark for &lt;sec&gt; seconds. Default 30.</div><div class="line">  -p|--proxy &lt;server:port&gt; Use proxy server for request.</div><div class="line">  -c|--clients &lt;n&gt;         Run &lt;n&gt; HTTP clients at once. Default one.</div><div class="line">  -9|--http09              Use HTTP/0.9 style requests.</div><div class="line">  -1|--http10              Use HTTP/1.0 protocol.</div><div class="line">  -2|--http11              Use HTTP/1.1 protocol.</div><div class="line">  --get                    Use GET request method.</div><div class="line">  --head                   Use HEAD request method.</div><div class="line">  --options                Use OPTIONS request method.</div><div class="line">  --trace                  Use TRACE request method.</div><div class="line">  -?|-h|--help             This information.</div><div class="line">  -V|--version             Display program version.</div></pre></td></tr></table></figure></p>
<p><code>webbench</code>不支持指定总访问数，支持并发数(<code>-c</code>)和测试时长(<code>-t</code>)，不直接支持<code>https</code>测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# webbench -c 100 -t 10 http://baidu.com/</div><div class="line">Webbench - Simple Web Benchmark 1.5</div><div class="line">Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.</div><div class="line"></div><div class="line">Benchmarking: GET http://baidu.com/</div><div class="line">100 clients, running 10 sec.</div><div class="line"></div><div class="line">Speed=14628 pages/min, 2448 bytes/sec.</div><div class="line">Requests: 86 susceed, 2352 failed.</div></pre></td></tr></table></figure></p>
<p>每秒钟响应请求数：146285 pages/min，每秒钟传输数据量:2448 bytes/sec</p>
<h1 id="siege"><a href="#siege" class="headerlink" title="siege"></a>siege</h1><p>安装可以直接使用<code>yum</code>、<code>apt</code>安装，也自己去下载手动安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# siege</div><div class="line">SIEGE 3.0.8</div><div class="line">Usage: siege [options]</div><div class="line">       siege [options] URL</div><div class="line">       siege -g URL</div><div class="line">Options:</div><div class="line">  ...</div><div class="line">  -h, --help                HELP, prints this section.</div><div class="line">  ...</div><div class="line">  -c, --concurrent=NUM      CONCURRENT users, default is 10</div><div class="line">  -i, --internet            INTERNET user simulation, hits URLs randomly.</div><div class="line">  ...</div><div class="line">  -t, --time=NUMm           TIMED testing where &quot;m&quot; is modifier S, M, or H</div><div class="line">                            ex: --time=1H, one hour test.</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>经常使用的参数是<code>-c</code>和<code>-t</code>，分别是并发数和测试时长。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]# siege -c 100 -t 10S https://baidu.com</div><div class="line">** SIEGE 3.0.8</div><div class="line">** Preparing 100 concurrent users for battle.</div><div class="line">The server is now under siege...</div><div class="line">HTTP/1.1 200   0.03 secs:   28207 bytes ==&gt; GET  /</div><div class="line">HTTP/1.1 302   0.15 secs:     161 bytes ==&gt; GET  /</div><div class="line">....</div><div class="line">Lifting the server siege..      done.</div><div class="line"></div><div class="line">Transactions:		        1512 hits</div><div class="line">Availability:		      100.00 %</div><div class="line">Elapsed time:		        9.63 secs</div><div class="line">Data transferred:	       20.38 MB</div><div class="line">Response time:		        0.12 secs</div><div class="line">Transaction rate:	      157.01 trans/sec</div><div class="line">Throughput:		        2.12 MB/sec</div><div class="line">Concurrency:		       18.14</div><div class="line">Successful transactions:        1555</div><div class="line">Failed transactions:	           0</div><div class="line">Longest transaction:	        1.34</div><div class="line">Shortest transaction:	        0.02</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>测试结果中，重点关注<code>Transaction rate</code>和<code>Concurrency</code>，分别表示每秒处理数和实际并发数。<br><code>siege</code>可以将测试结果写入日志文件中，方便进行后续图形化工具或者分析工具使用。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">        <span class="selector-tag">Date</span> &amp; <span class="selector-tag">Time</span>,  <span class="selector-tag">Trans</span>,  <span class="selector-tag">Elap</span> <span class="selector-tag">Time</span>,  <span class="selector-tag">Data</span> <span class="selector-tag">Trans</span>,  <span class="selector-tag">Resp</span> <span class="selector-tag">Time</span>,  <span class="selector-tag">Trans</span> <span class="selector-tag">Rate</span>,  <span class="selector-tag">Throughput</span>,  <span class="selector-tag">Concurrent</span>,    <span class="selector-tag">OKAY</span>,   <span class="selector-tag">Failed</span></div><div class="line">2017<span class="selector-tag">-06-05</span> 11<span class="selector-pseudo">:38</span><span class="selector-pseudo">:02</span>,   1512,       9<span class="selector-class">.63</span>,          20,       0<span class="selector-class">.12</span>,      157<span class="selector-class">.01</span>,        2<span class="selector-class">.08</span>,       18<span class="selector-class">.14</span>,    1555,       0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍ab、http_load、webbench、siege四种压力测试工具的使用。&lt;/p&gt;
&lt;h1 id=&quot;ab&quot;&gt;&lt;a href=&quot;#ab&quot; class=&quot;headerlink&quot; title=&quot;ab&quot;&gt;&lt;/a&gt;ab&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ab&lt;/code&gt; 是 &lt;code&gt;apache&lt;/code&gt; 服务器自带的一个压力测试工具。安装&lt;code&gt;apache&lt;/code&gt; web服务器时就自动安装了。当然，&lt;code&gt;ab&lt;/code&gt;也是可以单独安装的，如果你不想安装&lt;code&gt;apache&lt;/code&gt;而只是想安装&lt;code&gt;ab&lt;/code&gt;，那么可以使用以下方式安装:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@yourdream ~]# yum install httpd-tools&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成之后即可使用&lt;code&gt;ab&lt;/code&gt;进行测试了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@yourdream ~]# ab -h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Usage: ab [options] [http[s]://]hostname[:port]/path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Options are:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -n requests     Number of requests to perform&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -c concurrency  Number of multiple requests to make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -h              Display usage information (this message)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="ab" scheme="http://yoursite.com/tags/ab/"/>
    
      <category term="webbench" scheme="http://yoursite.com/tags/webbench/"/>
    
      <category term="http_load" scheme="http://yoursite.com/tags/http-load/"/>
    
      <category term="siege" scheme="http://yoursite.com/tags/siege/"/>
    
  </entry>
  
  <entry>
    <title>js 回调函数访问上下文 this 对象</title>
    <link href="http://yoursite.com/js-pass-this-into-callback-function/"/>
    <id>http://yoursite.com/js-pass-this-into-callback-function/</id>
    <published>2017-05-27T10:10:14.000Z</published>
    <updated>2017-06-21T11:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发项目之中，使用到js ajax 同服务端进行数据交互。一般图方便直接使用<code>jquery</code>或者<code>axios</code>等已有的库。<br>一般代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//axios</span></div><div class="line">axios.get(<span class="string">'/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//juqery</span></div><div class="line">$.get(<span class="string">'/url'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(res)</div><div class="line">&#125;,<span class="string">'json'</span>)</div></pre></td></tr></table></figure></p>
<p>那么经常这么使用的肯定会遇到一个场景，就是:在回调函数中如何访问上下文中的<code>this</code>对象?<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//this</span></div><div class="line">  axios.get(<span class="string">'/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;   </div><div class="line">    <span class="comment">//in callbacl ,how to access this</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之前的做法是这样的:将<code>this</code>赋值给一个局部变量,然后在回调函数中访问这个变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//this</span></div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  axios.get(<span class="string">'/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;   </div><div class="line">    <span class="comment">//in callbacl ,how to access this</span></div><div class="line">    <span class="built_in">console</span>.log(that)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后来知道了更为优雅的两种方式:</p>
<p>使用 <code>bind</code>函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//axios</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  axios.get(<span class="string">'/url'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;.bind(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">//jquery</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $.get(<span class="string">'/url'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;.bind(<span class="keyword">this</span>),<span class="string">'json'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<code>ES6</code>的箭头函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//axios</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  axios.get(<span class="string">'/url'</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  ));</div><div class="line">&#125;</div><div class="line"><span class="comment">//juqery</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $.get(<span class="string">'/url'</span>,(res)=&gt;&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;,<span class="string">'json'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考:</p>
<p><a href="!http://www.infoq.com/cn/articles/es6-in-depth-arrow-functions">深入浅出ES6（七）：箭头函数 Arrow Functions</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发项目之中，使用到js ajax 同服务端进行数据交互。一般图方便直接使用&lt;code&gt;jquery&lt;/code&gt;或者&lt;code&gt;axios&lt;/code&gt;等已有的库。&lt;br&gt;一般代码如下:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//axios&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;axios.get(&lt;span class=&quot;string&quot;&gt;&#39;/url&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//juqery&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$.get(&lt;span class=&quot;string&quot;&gt;&#39;/url&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么经常这么使用的肯定会遇到一个场景，就是:在回调函数中如何访问上下文中的&lt;code&gt;this&lt;/code&gt;对象?&lt;br&gt;
    
    </summary>
    
      <category term="notes" scheme="http://yoursite.com/categories/notes/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>mysql unsigned/int字段越界</title>
    <link href="http://yoursite.com/mysql-bigint-out-of-range/"/>
    <id>http://yoursite.com/mysql-bigint-out-of-range/</id>
    <published>2017-05-22T02:41:39.000Z</published>
    <updated>2017-06-05T14:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>线上的<code>MySQL</code>错误日志中遇到了以下问题<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Data truncation: BIGINT <span class="built_in">UNSIGNED</span> value <span class="keyword">is</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">in</span> `(database.tablename.fieldname)`</div></pre></td></tr></table></figure></p>
<p><code>MySQL</code>版本为:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select version();</span></div><div class="line">+------------+</div><div class="line"><span class="section">| version()  |</span></div><div class="line">+------------+</div><div class="line"><span class="section">| 5.6.21-log |</span></div><div class="line">+------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>引起这个错误的原因是<code>sql</code>语句中对<code>unsigned</code>字段进行了递减操作的结果为负数导致的,<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> <span class="keyword">database</span>.tablename <span class="keyword">set</span> fieldname=fieldname-num</div></pre></td></tr></table></figure></p>
<p>而<code>MySQL</code>的模式是默认的<code>mode</code>:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; show variables like 'sql_mode';</span></div><div class="line">+---------------+------------------------+</div><div class="line"><span class="section">| Variable_name | Value                  |</span></div><div class="line">+---------------+------------------------+</div><div class="line"><span class="section">| sql_mode      | NO_ENGINE_SUBSTITUTION |</span></div><div class="line">+---------------+------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>解决方案有3种:<br><a id="more"></a></p>
<p>1.程序中做数据合法性检查，先查询出来，递减之后判断结果，结果正常再去插入，不过这样需要2次<code>sql</code>操作，需要保证操作的原子性，不然容易引起数据一致性问题.</p>
<p>2.在同一个<code>session</code>中临时修改<code>MySQL</code>的<code>sql_mode</code>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> sql_mode=<span class="string">'NO_UNSIGNED_SUBTRACTION'</span>;</div><div class="line"><span class="keyword">UPDATE</span> database.tablename <span class="keyword">SET</span> fieldname=fieldname-<span class="keyword">num</span></div></pre></td></tr></table></figure></p>
<p><code>NO_UNSIGNED_SUBTRACTION</code> 模式下，对于<code>unsigned</code>字段，如果插入负值，则会讲该字段的值自动设置为 0 .</p>
<p>3.如果<code>unsigned</code>字段能接受负值,则可以使用<code>CAST</code>函数处理:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> sql_mode=<span class="string">'NO_UNSIGNED_SUBTRACTION'</span>;</div><div class="line"><span class="keyword">UPDATE</span> database.tablename <span class="keyword">SET</span> fieldname=<span class="keyword">CAST</span>(fieldname-<span class="keyword">num</span> <span class="keyword">AS</span> <span class="keyword">UNSIGNED</span>);</div></pre></td></tr></table></figure></p>
<p>需要注意的是<code>CAST</code>的表现会因不同的<code>sql_mode</code>而不同，需要合适的<code>sql_mode</code>和<code>CAST</code>配合使用.</p>
<p>参考:</p>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/out-of-range-and-overflow.html" target="_blank" rel="external">mysql out-of-range-and-overflow</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html" target="_blank" rel="external">mysql sql mode</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html#sqlmode_no_unsigned_subtraction" target="_blank" rel="external">mysql no_unsigned_subtraction mode</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线上的&lt;code&gt;MySQL&lt;/code&gt;错误日志中遇到了以下问题&lt;br&gt;&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Data truncation: BIGINT &lt;span class=&quot;built_in&quot;&gt;UNSIGNED&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `(database.tablename.fieldname)`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt;版本为:&lt;br&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;mysql&amp;gt; select version();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| version()  |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| 5.6.21-log |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set (0.00 sec)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;引起这个错误的原因是&lt;code&gt;sql&lt;/code&gt;语句中对&lt;code&gt;unsigned&lt;/code&gt;字段进行了递减操作的结果为负数导致的,&lt;br&gt;&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;database&lt;/span&gt;.tablename &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; fieldname=fieldname-num&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;MySQL&lt;/code&gt;的模式是默认的&lt;code&gt;mode&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;mysql&amp;gt; show variables like &#39;sql_mode&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| Variable_name | Value                  |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;| sql_mode      | NO_ENGINE_SUBSTITUTION |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+------------------------+&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set (0.00 sec)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解决方案有3种:&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux强制卸载设备</title>
    <link href="http://yoursite.com/umount-device-when-its-buzy/"/>
    <id>http://yoursite.com/umount-device-when-its-buzy/</id>
    <published>2017-05-12T03:04:07.000Z</published>
    <updated>2017-08-19T14:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux下因为磁盘出问题而导致了<code>Input/output error</code>,所以准备先把有问题的磁盘卸载掉再重新挂上试试。</p>
<p>执行<code>umount</code>:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@hostname ~]<span class="comment"># umount -n /dev/sdc1</span></div><div class="line">umount: /home/data: device <span class="keyword">is</span> busy.</div><div class="line">        (In <span class="keyword">some</span> cases useful info <span class="keyword">about</span> processes <span class="keyword">that</span> use</div><div class="line">         <span class="keyword">the</span> device <span class="keyword">is</span> found <span class="keyword">by</span> lsof(<span class="number">8</span>) <span class="keyword">or</span> fuser(<span class="number">1</span>))</div></pre></td></tr></table></figure></p>
<p>显示设备正忙，所以执行<code>umount -nf</code>:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@hostname ~]<span class="comment"># umount -nf /dev/sdc1</span></div><div class="line">umount2: Device <span class="keyword">or</span> resource busy</div><div class="line">umount: /home/data: device <span class="keyword">is</span> busy.</div><div class="line">        (In <span class="keyword">some</span> cases useful info <span class="keyword">about</span> processes <span class="keyword">that</span> use</div><div class="line">         <span class="keyword">the</span> device <span class="keyword">is</span> found <span class="keyword">by</span> lsof(<span class="number">8</span>) <span class="keyword">or</span> fuser(<span class="number">1</span>))</div><div class="line">umount2: Device <span class="keyword">or</span> resource busy</div></pre></td></tr></table></figure></p>
<p>还是无法卸载。</p>
<p>根据给出的提示，使用<code>losf</code>或者<code>fuser</code>来找出那些进程正在使用该设备:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yourdream ~]<span class="attr"># fuser -cu /dev/sdc1</span></div><div class="line">/dev/sdc<span class="number">1</span>:            <span class="number">2444</span>c<span class="comment">(root)</span>  <span class="number">2458</span>c<span class="comment">(root)</span>  <span class="number">3041</span>c<span class="comment">(mysql)</span></div><div class="line">[root@yourdream ~]<span class="attr"># fuser -cu /dev/sdc1</span></div></pre></td></tr></table></figure></p>
<p>使用<code>c</code>指定挂载的文件系统，<code>u</code>显示使用者的id。可以看出三个进程正在使用，通过<code>ps</code>可以查到分别为<code>redis</code>和<code>mysql</code>正在使用。<br>因此，卸载之前停掉<code>redis</code>和<code>mysql</code>之后再次执行<code>umount</code>就能正常卸载了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux下因为磁盘出问题而导致了&lt;code&gt;Input/output error&lt;/code&gt;,所以准备先把有问题的磁盘卸载掉再重新挂上试试。&lt;/p&gt;
&lt;p&gt;执行&lt;code&gt;umount&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight apples
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="umount" scheme="http://yoursite.com/tags/umount/"/>
    
      <category term="fuser" scheme="http://yoursite.com/tags/fuser/"/>
    
      <category term="losf" scheme="http://yoursite.com/tags/losf/"/>
    
  </entry>
  
</feed>

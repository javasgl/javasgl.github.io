<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>javasgl</title>
  
  <subtitle>step by step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-26T08:17:43.599Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>songgl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用go-svc安全退出程序</title>
    <link href="http://yoursite.com/go-svc/"/>
    <id>http://yoursite.com/go-svc/</id>
    <published>2018-06-26T07:24:02.000Z</published>
    <updated>2018-06-26T08:17:43.599Z</updated>
    
    <content type="html"><![CDATA[<p>阅读 <a href="https://github.com/nsqio/nsq" target="_blank" rel="noopener">NSQ</a> 源码时，看到NSQ使用了 go-svc 来启动nsq的相关程序,使得在程序退出的时候可以做一些释放资源等收尾工作。</p><p>使用起来非常简单,定义一个Service,实现其 svc.Service中的接口即可。</p><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/judwhite/go-svc/svc"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"syscall"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> program <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">prg := &amp;program&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := svc.Run(prg, syscall.SIGUSR1, syscall.SIGINT, syscall.SIGTERM); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(program)</span> <span class="title">Init</span><span class="params">(env svc.Environment)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"init....."</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(program)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"start....."</span>)</span><br><span class="line">fmt.Println(syscall.Getpid())</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker := time.NewTicker(<span class="number">2</span> * time.Second)</span><br><span class="line"><span class="keyword">for</span> t := <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">fmt.Println(<span class="string">"tick at"</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(program)</span> <span class="title">Stop</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"stop....."</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.Start方法中不能只直接阻塞，需要在Start方法中新开goroutine去写需要阻塞的代码。<br>2.svc.Run()方法的第二个参数可以指定需要程序监听的信号，默认情况下不指定的话，默认会监听 SIGINT和 SIGTERM两个。根据具体需要进行指定，比如本例中还监听了SIGUSR1.</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>其实go-svc代码实现很简单，使用了标准库中的<code>os/signal</code>的<code>Notify</code>方法。<br>下面的代码截取于<code>judwhite/go-svc/svc/svc-other.go</code>：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run runs your Service.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Run will block until one of the signals specified in sig is received.</span></span><br><span class="line"><span class="comment">// If sig is empty syscall.SIGINT and syscall.SIGTERM are used by default.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(service Service, sig ...os.Signal)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">env := environment&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := service.Init(env); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := service.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sig) == <span class="number">0</span> &#123;</span><br><span class="line">sig = []os.Signal&#123;syscall.SIGINT, syscall.SIGTERM&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signalChan := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signalNotify(signalChan, sig...)</span><br><span class="line"><span class="comment">//signalNotify方法其实就是 signal.Notify 方法</span></span><br><span class="line"><span class="comment">//var signalNotify = signal.Notify</span></span><br><span class="line">&lt;-signalChan</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> service.Stop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>标准库里面的 <code>os/signal</code>中的 <code>Notfiy</code>方法签名如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Notify(c chan&lt;- os<span class="selector-class">.Signal</span>, sig ..<span class="selector-class">.os</span><span class="selector-class">.Signal</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读 &lt;a href=&quot;https://github.com/nsqio/nsq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NSQ&lt;/a&gt; 源码时，看到NSQ使用了 go-svc 来启动nsq的相关程序,使得在程序退出的时候可以做一些释放资源等收尾工作。&lt;/p&gt;
&lt;p&gt;使用起来非常简单,定义一个Service,实现其 svc.Service中的接口即可。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="go-svc" scheme="http://yoursite.com/tags/go-svc/"/>
    
      <category term="signal" scheme="http://yoursite.com/tags/signal/"/>
    
  </entry>
  
  <entry>
    <title>一个时区引发的`血案`</title>
    <link href="http://yoursite.com/go-time-zone/"/>
    <id>http://yoursite.com/go-time-zone/</id>
    <published>2018-06-06T06:10:10.000Z</published>
    <updated>2018-06-06T07:09:44.511Z</updated>
    
    <content type="html"><![CDATA[<p>项目中的一个单元测试，其中一个判断是比较两个时间是否相同。代码逻辑简化抽象如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">time1:=time.Now()</span><br><span class="line">xorm.engine.NewSession().Update(time1)</span><br><span class="line"><span class="keyword">var</span> time2 *time.Time</span><br><span class="line">xorm.engine.NewSession().Get(&amp;time2)</span><br><span class="line"><span class="keyword">if</span> time2.UTC().Format(<span class="string">"2018-06-06"</span>) != time2.UTC().Format(<span class="string">"2018-06-06"</span>)&#123;</span><br><span class="line"><span class="built_in">panic</span> error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>介绍一下各组件时区设置：</p><ul><li>mysql 默认配置，<code>SYSTEM</code></li><li>xorm dsn 配置为 <code>parseTime=true&amp;loc=Asia%2FShanghai</code></li></ul><p>以上代码，在本地机器上跑单元测试时无异常，能正常通过。但是，上了CI环境后，单元测试却失败了。<br>通过观察CI的日志和自己打印的日志，发现入库前后，这两个时间相差了8个小时，很明显，这个时间受到时区的影响了。</p><a id="more"></a><p>后来调试发现，本地 mysql time_zone SYSTEM的实际值是 CST (中国标准时间),所以 dsn中指定loc为 <code>Asia/Shanghai</code> 并不会有问题。<br>而CI环境中，mysql的 time_zone SYSTEM的实际值是 UTC.而此时代码中使用dsn却是<code>Asia/Shanghai</code>,这样就会导致 <code>xorm.Get()</code>的时候，将时间按照<code>Asia/Shanghai</code>来解析，所以，解析出来的结果和UTC时间相差了8个小时。</p><p>解决方案：<br>将代码中使用的dsn改为 parseTime=true&amp;loc=Local 。</p><p>最终总结，其实这个问题是可以避免的，起初在设计数据库的时候，时间字段如果没有特殊需求，不应该使用数据库的<code>date</code>,<code>timestamp</code>等类型，而是统一都使用 <code>INT UNSIGNED NOT NULL</code>。这样数字类型的时间戳，即可以避免时区问题，还可以用来直接比较大小和进行算数运算。</p><p>附上mysql查看时区配置的几种方式:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@global.time_zone,@@session.time_zone;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> %<span class="keyword">time_zone</span>%;'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中的一个单元测试，其中一个判断是比较两个时间是否相同。代码逻辑简化抽象如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;time1:=time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xorm.engine.NewSession().Update(time1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; time2 *time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xorm.engine.NewSession().Get(&amp;amp;time2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; time2.UTC().Format(&lt;span class=&quot;string&quot;&gt;&quot;2018-06-06&quot;&lt;/span&gt;) != time2.UTC().Format(&lt;span class=&quot;string&quot;&gt;&quot;2018-06-06&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;panic&lt;/span&gt; error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;介绍一下各组件时区设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql 默认配置，&lt;code&gt;SYSTEM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;xorm dsn 配置为 &lt;code&gt;parseTime=true&amp;amp;loc=Asia%2FShanghai&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上代码，在本地机器上跑单元测试时无异常，能正常通过。但是，上了CI环境后，单元测试却失败了。&lt;br&gt;通过观察CI的日志和自己打印的日志，发现入库前后，这两个时间相差了8个小时，很明显，这个时间受到时区的影响了。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="time" scheme="http://yoursite.com/tags/time/"/>
    
      <category term="timezone" scheme="http://yoursite.com/tags/timezone/"/>
    
      <category term="orm" scheme="http://yoursite.com/tags/orm/"/>
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>go覆盖测试率图形化分析</title>
    <link href="http://yoursite.com/go-cover-ui/"/>
    <id>http://yoursite.com/go-cover-ui/</id>
    <published>2018-05-23T03:36:53.000Z</published>
    <updated>2018-05-23T04:07:28.696Z</updated>
    
    <content type="html"><![CDATA[<p>go test可以用来做单元测试，-cover参数可以显示测试覆盖率。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -v ./... -cover</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">PASS</span><br><span class="line">coverage: <span class="number">34.4</span>% <span class="keyword">of</span> statements</span><br></pre></td></tr></table></figure></p><p>但是有时候需要提高覆盖测试率，就需要知道哪些代码被覆盖到了，而哪些代码没有被覆盖到。这时候可以借助go提供的一个工具来实现。</p><a id="more"></a><ul><li>首先，执行单元测试时，添加 <code>-coverprofile=profileName</code>,生成 profile文件。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test -v ./<span class="built_in">..</span>. <span class="attribute">-coverprofile</span>=aaaa</span><br></pre></td></tr></table></figure><ul><li>之后，使用<code>go tool cover -html=profileName -o coverage.html</code>来生成html文件后用浏览器打开。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go<span class="built_in"> tool </span>cover <span class="attribute">-html</span>=aaaa -o coverage.html</span><br><span class="line">open -a /Applications/Google\ Chrome.app coverage.html</span><br></pre></td></tr></table></figure><p>最终看到的效果是：<br><img src="/images/coverage.png" alt="coverage"><br>红色表示没有覆盖到的代码，绿色表示覆盖到的代码，这样就能针对性的编写单元测试，提高测试覆盖率了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go test可以用来做单元测试，-cover参数可以显示测试覆盖率。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -v ./... -cover&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果如下：&lt;br&gt;&lt;figure class=&quot;highlight clean&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;coverage: &lt;span class=&quot;number&quot;&gt;34.4&lt;/span&gt;% &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; statements&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是有时候需要提高覆盖测试率，就需要知道哪些代码被覆盖到了，而哪些代码没有被覆盖到。这时候可以借助go提供的一个工具来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="UnitTest" scheme="http://yoursite.com/tags/UnitTest/"/>
    
  </entry>
  
  <entry>
    <title>使用 reindex 来修改 elasticsearch 索引mapping</title>
    <link href="http://yoursite.com/elastic-search-reindex/"/>
    <id>http://yoursite.com/elastic-search-reindex/</id>
    <published>2018-04-02T00:32:00.000Z</published>
    <updated>2018-05-23T03:36:23.059Z</updated>
    
    <content type="html"><![CDATA[<p>elasticsearch索引一旦建立，就无法动态修改其字段的映射类型，有时候因为人为原因污染了索引的mapping,这个时候就只能通过重建索引来修改索引的mapping设置了。</p><p>在一次项目中，有一个字段结构如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"logistics"</span>:&#123;</span><br><span class="line"><span class="attr">"company"</span>:<span class="string">"string"</span>,</span><br><span class="line"><span class="attr">"no"</span>:<span class="string">"string"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于当初创建索引的时候，既没有给这个索引中的这个字段指定合适的类型，也没有通过动态模板来为这个字段指定类型，导致 elasticsearch 默认将这种结构的数据设置成了 Object 类型，而我们真正想要设置的类型却是 Nested 类型。</p><p>这种情况下，一般有两种解决方案。<br><a id="more"></a></p><p>第一种方案，给这个索引追加一个新的字段，同时给这个字段指定类型。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT test/_mapping/test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"logisticsV2"</span>:&#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"nested"</span>,</span><br><span class="line">      <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"company"</span>:&#123;</span><br><span class="line">          <span class="string">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"no"</span>:&#123;</span><br><span class="line">          <span class="string">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行之后，index的mapping中就是这样的了：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">　　<span class="attr">"test"</span>:&#123;</span><br><span class="line">　　　　<span class="attr">"mappings"</span>:&#123;</span><br><span class="line">　　　　　　<span class="attr">"test"</span>:&#123;</span><br><span class="line">　　　　　　　　<span class="attr">"properties"</span>:&#123;</span><br><span class="line">　　　　　　　　　　<span class="attr">"logistics"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　<span class="attr">"properties"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　<span class="attr">"company"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"text"</span>,</span><br><span class="line">　　　　　　　　　　　　　　　　<span class="attr">"fields"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　　　<span class="attr">"keyword"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"keyword"</span>,</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　<span class="attr">"ignore_above"</span>:<span class="number">256</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　　　　　&#125;,</span><br><span class="line">　　　　　　　　　　　　　　<span class="attr">"no"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"text"</span>,</span><br><span class="line">　　　　　　　　　　　　　　　　<span class="attr">"fields"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　　　<span class="attr">"keyword"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"keyword"</span>,</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　<span class="attr">"ignore_above"</span>:<span class="number">256</span></span><br><span class="line">　　　　　　　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　&#125;,</span><br><span class="line">　　　　　　　　　　<span class="attr">"logisticsV2"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"nested"</span>,</span><br><span class="line">　　　　　　　　　　　　<span class="attr">"properties"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　<span class="attr">"company"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">　　　　　　　　　　　　　　&#125;,</span><br><span class="line">　　　　　　　　　　　　　　<span class="attr">"no"</span>:&#123;</span><br><span class="line">　　　　　　　　　　　　　　　　<span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">　　　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　　　&#125;</span><br><span class="line">　　　　　　　　&#125;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 <code>logisticsV2</code>的类型是 nested 类型，之后依赖于 nested 类型的相关功能使用 logisticsV2字段来实现即可。<br>这个中方式有一些弊端，比如数据冗余问题、数据一致性问题等</p><p>第二个方案，使用 elasticsearch 提供的 reindex api 来迁移数据，创建新的索引。<br>首先创建好目标索引,并设置好mapping:<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT test_new</span><br><span class="line">PUT test_new/_mapping/test</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"logistics"</span>:&#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"nested"</span>,</span><br><span class="line">      <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"company"</span>:&#123;</span><br><span class="line">          <span class="string">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"no"</span>:&#123;</span><br><span class="line">          <span class="string">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后，使用 reindex 将原来的索引重建到新的索引上：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: <span class="string">"test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dest"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: <span class="string">"test_new"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>等待 reindex 完成后， test_new 就结构就就是你想要的mapping了。</p><p>为了对线上业务做到无感，可以使用 alias 别名功能来实现，具体操作可以参考 <a href="/use-alias-migrate-index">使用 Elasticsearch alias 功能切换 indexl</a>. 这里不再赘述.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elasticsearch索引一旦建立，就无法动态修改其字段的映射类型，有时候因为人为原因污染了索引的mapping,这个时候就只能通过重建索引来修改索引的mapping设置了。&lt;/p&gt;
&lt;p&gt;在一次项目中，有一个字段结构如下：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;logistics&quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;company&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;no&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于当初创建索引的时候，既没有给这个索引中的这个字段指定合适的类型，也没有通过动态模板来为这个字段指定类型，导致 elasticsearch 默认将这种结构的数据设置成了 Object 类型，而我们真正想要设置的类型却是 Nested 类型。&lt;/p&gt;
&lt;p&gt;这种情况下，一般有两种解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="reindex" scheme="http://yoursite.com/tags/reindex/"/>
    
  </entry>
  
  <entry>
    <title>python的浅复制和深复制</title>
    <link href="http://yoursite.com/python-reference-value-md/"/>
    <id>http://yoursite.com/python-reference-value-md/</id>
    <published>2018-03-30T10:54:49.000Z</published>
    <updated>2018-04-02T00:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用python过程中遇到了一个看似诡异的问题,由于惯性思维，这个问题花了一点时间一步步调试才找到。<br>先来看看下面的代码的结果：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="selector-tag">b</span> = a</span><br><span class="line"><span class="selector-tag">b</span>.append(<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(b)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br></pre></td></tr></table></figure></p><p>如果这段代码放在其他语言,Java 或者 PHP 中，结果大多是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>但是在 python 中，实际执行的结果却是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>修改 b 的值，却影响了 a 的值。这个就是 python 和其他语言有一点不一样的地方了，简单可以理解为：python 没有赋值，只有引用。<br>如果以其他语言的方式来理解，那就是 a,b 都是指向同一块内存数据的地址，所以修改其中任何一个，都会引起彼此的变化，因为底层数据都是同一份。</p><p>现在，如果需要这段代码表现的和其他语言一致，该怎么写呢？</p><a id="more"></a><h3 id="浅复制-shallow-copy"><a href="#浅复制-shallow-copy" class="headerlink" title="浅复制(shallow copy)"></a>浅复制(shallow copy)</h3><p>对于list 列表，python 有 copy 方法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="selector-tag">b</span> = <span class="selector-tag">a</span>.copy()</span><br><span class="line"><span class="selector-tag">b</span>.append(<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(b)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(a)</span></span></span><br></pre></td></tr></table></figure></p><p>代码执行结果就基本能达到预期了：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h3 id="深复制-deep-coopy"><a href="#深复制-deep-coopy" class="headerlink" title="深复制(deep coopy)"></a>深复制(deep coopy)</h3><p>但是需要注意的是，这个 copy 方法是浅复制(shallow copy),那么它对于嵌套对象就无能为力了。<br>如果需要复制嵌套对象，可以使用 import copy ,然后使用 <code>copy.deepcoopy()</code>来实现对嵌套对象的复制<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line"><span class="comment"># b = a.copy()</span></span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">b.append(<span class="number">7</span>)</span><br><span class="line">b[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">6</span></span><br><span class="line">print(b)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>代码执行结果是这样的：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">6</span>],<span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br></pre></td></tr></table></figure></p><p>可以看到 a 并没有因为 b 对嵌套内容的修改而改变。这里需要注意的一点是，如果修改的不是嵌套的内容，那么普通的copy也还是可以的，<br>此例中，append(7) 时，使用 <code>copy</code> 或者 <code>copy.deepcopy</code> 的效果是一样的，a的值都不会受到影响。</p><p>deepcopy的本质是递归复制。</p><p>对于 list 数据结构而言，可以用 list(x) 来代替 copy, 不过它依然是浅复制,这点需要注意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用python过程中遇到了一个看似诡异的问题,由于惯性思维，这个问题花了一点时间一步步调试才找到。&lt;br&gt;先来看看下面的代码的结果：&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt; = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;b&lt;/span&gt;.append(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(a)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果这段代码放在其他语言,Java 或者 PHP 中，结果大多是这样的：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是在 python 中，实际执行的结果却是这样的：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改 b 的值，却影响了 a 的值。这个就是 python 和其他语言有一点不一样的地方了，简单可以理解为：python 没有赋值，只有引用。&lt;br&gt;如果以其他语言的方式来理解，那就是 a,b 都是指向同一块内存数据的地址，所以修改其中任何一个，都会引起彼此的变化，因为底层数据都是同一份。&lt;/p&gt;
&lt;p&gt;现在，如果需要这段代码表现的和其他语言一致，该怎么写呢？&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="shallowcopy" scheme="http://yoursite.com/tags/shallowcopy/"/>
    
      <category term="deepcopy" scheme="http://yoursite.com/tags/deepcopy/"/>
    
  </entry>
  
  <entry>
    <title>python monkey patch解决gevent block forever问题</title>
    <link href="http://yoursite.com/python-monkey-patch/"/>
    <id>http://yoursite.com/python-monkey-patch/</id>
    <published>2018-03-12T03:31:53.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 python 中使用 multiprocess 进行多线程或者多进程处理的时候，遇到了 gevent 问题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gevent.hub.LoopExit:(<span class="string">'This operation would block forever....'</span>)</span><br></pre></td></tr></table></figure></p><p>这个问题可以通过打上 monkey patch(猴子补丁)来规避。</p><p>在导入 multiprocess 库的文件头部加入以下代码：<br><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br></pre></td></tr></table></figure></p><p>注意，这两行代码需要放置在文件导入库的最前面.</p><p>我遇到的场景下， 导致 LoopExit 的原因是 multiprocess 的job中远程网络请求超时导致的，如果相应的job任务中没有远程请求的话，即使不用 pathch，代码也是能够正常运行的。由于避免加上超时处理的复杂逻辑，就简单的使用monkey patch来解决这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 python 中使用 multiprocess 进行多线程或者多进程处理的时候，遇到了 gevent 问题：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="monkey" scheme="http://yoursite.com/tags/monkey/"/>
    
      <category term="patch" scheme="http://yoursite.com/tags/patch/"/>
    
  </entry>
  
  <entry>
    <title>python asyncio 简单使用</title>
    <link href="http://yoursite.com/use-asyncio-in-python/"/>
    <id>http://yoursite.com/use-asyncio-in-python/</id>
    <published>2018-03-07T07:22:37.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在python 3.4及以上的版本中，可以通过 asyncio 来实现协程(coroutine)。在 python 3.5以后可以使用 async/await 来简化代码，如果python版本是3.4的话，需要通过 <code>@asyncio.coroutine</code>注解 和 <code>yield from</code> 来实现。</p><p>一下代码是3.5+以后的写法，和3.4版本的写法主要区别在于:</p><ol><li>用 async 代替了 @asyncio.coroutine </li><li>用 await 代替了 yield from</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(n)</span>:</span></span><br><span class="line">print(<span class="string">"do task:"</span>,n)</span><br><span class="line"><span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">tasks = [ task(_) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">res, _ = loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> res:</span><br><span class="line">print(_.result())</span><br></pre></td></tr></table></figure><p>参考：<br>    廖雪峰的Python3.x教程-<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432090954004980bd351f2cd4cc18c9e6c06d855c498000" target="_blank" rel="noopener">异步io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在python 3.4及以上的版本中，可以通过 asyncio 来实现协程(coroutine)。在 python 3.5以后可以使用 async/await 来简化代码，如果python版本是3.4的话，需要通过 &lt;code&gt;@asyncio.coroutine&lt;/cod
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="coroutine" scheme="http://yoursite.com/tags/coroutine/"/>
    
      <category term="asyncio" scheme="http://yoursite.com/tags/asyncio/"/>
    
  </entry>
  
  <entry>
    <title>python 多进程、多线程简单使用</title>
    <link href="http://yoursite.com/use-theading-in-python/"/>
    <id>http://yoursite.com/use-theading-in-python/</id>
    <published>2018-03-07T06:42:01.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>python 中可以使用 multiprocessing (多进程) 和 multiprocessing.dummy(多线程) 来实现并发操作。<br>两者在使用方式上一样，只不过实现并发的方式不同。</p><p>以下简单使用案例以 multiprocessing.dummy 多线程为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(param)</span>:</span></span><br><span class="line"><span class="keyword">return</span> param*<span class="number">100</span></span><br><span class="line"></span><br><span class="line">params = [ _ <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>) ]</span><br><span class="line"></span><br><span class="line">pool = Pool()</span><br><span class="line"></span><br><span class="line">results = pool.map(compute, params)</span><br><span class="line"></span><br><span class="line">pool.close()</span><br><span class="line"></span><br><span class="line">pool.join()</span><br><span class="line"></span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure></p><p>注意：多进程(multiprocessing) 无法在 celery 等后台进程中使用，因为 celery 等后台进程不再允许生成子进程,这时候就只能使用多线程或者协程了。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonic processes are <span class="keyword">not</span> allowed <span class="keyword">to</span> have children</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python 中可以使用 multiprocessing (多进程) 和 multiprocessing.dummy(多线程) 来实现并发操作。&lt;br&gt;两者在使用方式上一样，只不过实现并发的方式不同。&lt;/p&gt;
&lt;p&gt;以下简单使用案例以 multiprocessing.dum
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>go build 常见编译优化</title>
    <link href="http://yoursite.com/go-build-args/"/>
    <id>http://yoursite.com/go-build-args/</id>
    <published>2018-02-27T08:09:14.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，go build 可以直接编译程序，无需额外的参数设定。<br>但在编译生产环境下使用的可执行程序时候，go build 的一些参数还是很有用的。</p><h2 id="减小编译后可执行程序的大小"><a href="#减小编译后可执行程序的大小" class="headerlink" title="减小编译后可执行程序的大小"></a>减小编译后可执行程序的大小</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build -ldflags <span class="string">'-w -s'</span></span><br></pre></td></tr></table></figure><p>说明：<br>    -w 禁止生成debug信息,注意使用该选项后，无法使用 gdb 进行调试<br>    -s 禁用符号表<br>可以使用 <code>go tool link --help</code> 查看 ldflags 各参数含义</p><h2 id="禁止gc优化和内联"><a href="#禁止gc优化和内联" class="headerlink" title="禁止gc优化和内联"></a>禁止gc优化和内联</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build -gcflags <span class="string">'-N -l'</span></span><br></pre></td></tr></table></figure><p>说明:<br>    -N 禁止编译优化<br>    -l 禁止内联,禁止内联也可以一定程度上减小可执行程序大小<br>可以使用 <code>go tool compile --help</code> 查看 gcflags 各参数含义</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般情况下，go build 可以直接编译程序，无需额外的参数设定。&lt;br&gt;但在编译生产环境下使用的可执行程序时候，go build 的一些参数还是很有用的。&lt;/p&gt;
&lt;h2 id=&quot;减小编译后可执行程序的大小&quot;&gt;&lt;a href=&quot;#减小编译后可执行程序的大小&quot; class
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang同时监听TCP、HTTP端口提供服务</title>
    <link href="http://yoursite.com/golang-listen-tcp-and-http-port/"/>
    <id>http://yoursite.com/golang-listen-tcp-and-http-port/</id>
    <published>2018-02-24T03:45:30.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一个golang写的服务，是使用 TCP 方式进行通信的，但是并没很好的处理粘包问题(其实是根本就没有处理粘包问题)。项目需要添加新功能后迅速上线,所以准备先采用http来通信，避免粘包问题。</p><p>项目入口 main.go 中，之前是监听 TCP 连接，代码大致如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">server,err:= net.Listen(<span class="string">"tcp"</span>,<span class="string">"host:port"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> server.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">conn,err:= server.Accept() </span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handleConn(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConn</span><span class="params">(conn net.Conn)</span></span>&#123;</span><br><span class="line"><span class="comment">//do somethings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在需要在此基础之上监听 http 连接,由于 http.ListenAndServe() 方法是阻塞的，所以需要新开goroutine进行监听，代码示意如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">"/hi"</span>, Router)</span><br><span class="line"><span class="comment">//因为会阻塞，所以需要新开goroutine进行监听</span></span><br><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">"host:http_port"</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">server,err:= net.Listen(<span class="string">"tcp"</span>,<span class="string">"host:tcp_port"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> server.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">conn,err:= server.Accept() </span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handleConn(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConn</span><span class="params">(conn net.Conn)</span></span>&#123;</span><br><span class="line"><span class="comment">//do somethings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一个golang写的服务，是使用 TCP 方式进行通信的，但是并没很好的处理粘包问题(其实是根本就没有处理粘包问题)。项目需要添加新功能后迅速上线,所以准备先采用http来通信，避免粘包问题。&lt;/p&gt;
&lt;p&gt;项目入口 main.go 中，之前是监听 TCP 连接，代码大
      
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>使用 Elasticsearch alias 功能切换 index</title>
    <link href="http://yoursite.com/use-alias-migrate-index/"/>
    <id>http://yoursite.com/use-alias-migrate-index/</id>
    <published>2017-12-20T09:20:11.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，需要将已有的索引做些调整重建为另外一个索引，但是为了不影响线上的访问，需要无缝切换到新的索引上。</p><p>基本上有两种方案，一是改代码，使线上代码访问新的索引，二是使用 alias 别名功能。</p><p>第一种方案有弊端，在代码进行发布到具体机器之前的并不能保证所有的访问都是访问的新的索引。</p><p>这里选择通过 alias 来切换索引，因为 alias 中的多条命令是原子性。</p><a id="more"></a><p>1.创建索引 test 和 test_v2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="built_in">test</span></span><br><span class="line">PUT test_v2</span><br><span class="line">GET <span class="built_in">test</span>*</span><br></pre></td></tr></table></figure></p><p>结果如下:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test"</span>: &#123;</span><br><span class="line">    <span class="attr">"aliases"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"index"</span>: &#123;</span><br><span class="line">        <span class="attr">"creation_date"</span>: <span class="string">"1514183636616"</span>,</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="string">"5"</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"uuid"</span>: <span class="string">"oOgEhLzqS_usf7floIhNig"</span>,</span><br><span class="line">        <span class="attr">"version"</span>: &#123;</span><br><span class="line">          <span class="attr">"created"</span>: <span class="string">"5030099"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"provided_name"</span>: <span class="string">"test"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"test_v2"</span>: &#123;</span><br><span class="line">    <span class="attr">"aliases"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"index"</span>: &#123;</span><br><span class="line">        <span class="attr">"creation_date"</span>: <span class="string">"1514183638407"</span>,</span><br><span class="line">        <span class="attr">"number_of_shards"</span>: <span class="string">"5"</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"uuid"</span>: <span class="string">"o6x6VtmQSFaOpOB-OpIwBg"</span>,</span><br><span class="line">        <span class="attr">"version"</span>: &#123;</span><br><span class="line">          <span class="attr">"created"</span>: <span class="string">"5030099"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"provided_name"</span>: <span class="string">"test_v2"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.现在需要将对 test 的访问无缝切换到 test_v2,使用 alias 功能即可做到，对线上服务、对用户无感<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST _aliases</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"actions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"add"</span>: &#123;</span><br><span class="line">        <span class="string">"index"</span>: <span class="string">"test_v2"</span>,</span><br><span class="line">        <span class="string">"alias"</span>: <span class="string">"test"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"remove_index"</span>: &#123;</span><br><span class="line">        <span class="string">"index"</span>: <span class="string">"test"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>actions 中的多条命令是原子性的，所以可以做到无缝切换，不必担心切换过程中会存在访问不到 test 时候。</p><p>3.命令解释<br>actions 中第一条命令：add 命令，给索引 test_v2 添加了一个别名 test。<br>actions 中第二条命令：remove_index， 删除原来的 test 索引。<br>执行之后，原来的 test索引会被删除，而对于访问方而言,访问的索引依然是 test,不过访问的是一个别名，底层实际访问的索引已经是 test_v2了</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET test*</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"test_v2"</span>: &#123;</span><br><span class="line">    <span class="string">"aliases"</span>: &#123;</span><br><span class="line">      <span class="string">"test"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"mappings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"index"</span>: &#123;</span><br><span class="line">        <span class="string">"creation_date"</span>: <span class="string">"1514183638407"</span>,</span><br><span class="line">        <span class="string">"number_of_shards"</span>: <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"uuid"</span>: <span class="string">"o6x6VtmQSFaOpOB-OpIwBg"</span>,</span><br><span class="line">        <span class="string">"version"</span>: &#123;</span><br><span class="line">          <span class="string">"created"</span>: <span class="string">"5030099"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"provided_name"</span>: <span class="string">"test_v2"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从结果中可见，test索引已经不存在了，但是通过 GET test 还是能访问到,而现在 test_v2 多了一个 alias test。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，需要将已有的索引做些调整重建为另外一个索引，但是为了不影响线上的访问，需要无缝切换到新的索引上。&lt;/p&gt;
&lt;p&gt;基本上有两种方案，一是改代码，使线上代码访问新的索引，二是使用 alias 别名功能。&lt;/p&gt;
&lt;p&gt;第一种方案有弊端，在代码进行发布到具体机器之前的并不能保证所有的访问都是访问的新的索引。&lt;/p&gt;
&lt;p&gt;这里选择通过 alias 来切换索引，因为 alias 中的多条命令是原子性。&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="es" scheme="http://yoursite.com/tags/es/"/>
    
      <category term="alias" scheme="http://yoursite.com/tags/alias/"/>
    
  </entry>
  
  <entry>
    <title>python celery 强制使用root用户执行</title>
    <link href="http://yoursite.com/python-celery-force-root/"/>
    <id>http://yoursite.com/python-celery-force-root/</id>
    <published>2017-12-19T07:20:22.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当 celery 使用  root 用户执行时，会报出如下警告:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeWarning: You<span class="symbol">'re</span> running the worker <span class="keyword">with</span> superuser privileges: this <span class="keyword">is</span> absolutely <span class="keyword">not</span> recommended!</span><br></pre></td></tr></table></figure></p><p>低版本的 celery 情况不清楚，但是 celery 4.1.0 版本中，这个警告是无法去除的。因为源码中是这样写的:</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_privileges</span><span class="params">(accept_content)</span>:</span></span><br><span class="line">    uid = os.getuid() <span class="keyword">if</span> hasattr(os, <span class="string">'getuid'</span>) <span class="keyword">else</span> <span class="number">65535</span></span><br><span class="line">    gid = os.getgid() <span class="keyword">if</span> hasattr(os, <span class="string">'getgid'</span>) <span class="keyword">else</span> <span class="number">65535</span></span><br><span class="line">    euid = os.geteuid() <span class="keyword">if</span> hasattr(os, <span class="string">'geteuid'</span>) <span class="keyword">else</span> <span class="number">65535</span></span><br><span class="line">    egid = os.getegid() <span class="keyword">if</span> hasattr(os, <span class="string">'getegid'</span>) <span class="keyword">else</span> <span class="number">65535</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> hasattr(os, <span class="string">'fchown'</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> all(hasattr(os, attr)</span><br><span class="line">                   <span class="keyword">for</span> attr <span class="keyword">in</span> [<span class="string">'getuid'</span>, <span class="string">'getgid'</span>, <span class="string">'geteuid'</span>, <span class="string">'getegid'</span>]):</span><br><span class="line">            <span class="keyword">raise</span> SecurityError(<span class="string">'suspicious platform, contact support'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> uid <span class="keyword">or</span> <span class="keyword">not</span> gid <span class="keyword">or</span> <span class="keyword">not</span> euid <span class="keyword">or</span> <span class="keyword">not</span> egid:</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'pickle'</span> <span class="keyword">in</span> accept_content <span class="keyword">or</span></span><br><span class="line">                <span class="string">'application/x-python-serialize'</span> <span class="keyword">in</span> accept_content):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> C_FORCE_ROOT:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    print(ROOT_DISALLOWED.format(</span><br><span class="line">                        uid=uid, euid=euid, gid=gid, egid=egid,</span><br><span class="line">                    ), file=sys.stderr)</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    os._exit(<span class="number">1</span>)</span><br><span class="line">        warnings.warn(RuntimeWarning(ROOT_DISCOURAGED.format(</span><br><span class="line">            uid=uid, euid=euid, gid=gid, egid=egid,</span><br><span class="line">        )))</span><br></pre></td></tr></table></figure><p>很明显，这个 RuntimeWarning 是无法通过 C_FORCE_ROOT 设置来屏蔽的。当然了，这个只是一个警告，celery的运行并不受影响。</p><p>如果遇到某些版本的 celery 因为 root 用户而无法启动、无法执行的情况，可以通过改变 C_FORCE_ROOT=True 来规避这个问题。</p><p>主要有四种方式:</p><p>1.手动设置环境变量<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">C_FORCE_ROOT</span>=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></p><p>2.使用 supervisor 管理 celery 时，可以用 environment 来设置环境变量.<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment</span>=PYTHONPATH=<span class="string">"xxx"</span>,C_FORCE_ROOT=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></p><p>3.代码中硬编码指定.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> platforms</span><br><span class="line"></span><br><span class="line">platforms.C_FORCE_ROOT=<span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>4.写入 bashrc 或者其他系统启动脚本之中<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:.bashrc</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">C_FORCE_ROOT</span>=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 celery 使用  root 用户执行时，会报出如下警告:&lt;br&gt;&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RuntimeWarning: You&lt;span class=&quot;symbol&quot;&gt;&#39;re&lt;/span&gt; running the worker &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; superuser privileges: this &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; absolutely &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; recommended!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;低版本的 celery 情况不清楚，但是 celery 4.1.0 版本中，这个警告是无法去除的。因为源码中是这样写的:&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
      <category term="supervisor" scheme="http://yoursite.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Virtualenv 使用</title>
    <link href="http://yoursite.com/use-python-with-virtualenv/"/>
    <id>http://yoursite.com/use-python-with-virtualenv/</id>
    <published>2017-11-30T13:25:33.000Z</published>
    <updated>2017-11-30T13:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下，大多数系统上安装的 python 版本为 2.x 的。但是有时候我们需要同时使用 python3.x 和 python2.x,这里推荐使用 virtualenv 来管理两个甚至是多个不同版本的 python。</p><h2 id="安装-python3"><a href="#安装-python3" class="headerlink" title="安装 python3"></a>安装 python3</h2><p>mac系统安装python3,很简单， <code>brew install python3</code>, 升级也很简单,<code>brew upgrade python3</code>。注意可能需要 sudo。</p><h2 id="安装-virtualenv"><a href="#安装-virtualenv" class="headerlink" title="安装 virtualenv"></a>安装 virtualenv</h2><p>可以用过 pip来安装,<code>pip install virtualenv</code></p><h2 id="创建一个python环境"><a href="#创建一个python环境" class="headerlink" title="创建一个python环境"></a>创建一个python环境</h2><p>例如创建一个 python3 的环境，<code>virtualenv --python=python3 /usr/local/python3</code></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>执行<code>source /usr/local/python3/bin/activate</code>即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般情况下，大多数系统上安装的 python 版本为 2.x 的。但是有时候我们需要同时使用 python3.x 和 python2.x,这里推荐使用 virtualenv 来管理两个甚至是多个不同版本的 python。&lt;/p&gt;
&lt;h2 id=&quot;安装-python3&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="virtualenv" scheme="http://yoursite.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>git 推送大文件buffer设置</title>
    <link href="http://yoursite.com/git-post-buffer/"/>
    <id>http://yoursite.com/git-post-buffer/</id>
    <published>2017-11-15T15:09:50.000Z</published>
    <updated>2017-11-15T15:34:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>git默认的 http.postBuffer大小为1M。所以偶尔遇到比较大的文件或者项目时，会报出以下错误：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">error: </span>RPC failed; result=22, HTTP code = 411</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br></pre></td></tr></table></figure></p><p>这时可以通过设置 http.postBuffer来解决。下面设置为100M。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global http.<span class="attribute">postBuffer</span>=104857600</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git默认的 http.postBuffer大小为1M。所以偶尔遇到比较大的文件或者项目时，会报出以下错误：&lt;br&gt;&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Buffered Channel + sync.WaitGroup 实现对 goroutinue 并发数的限制</title>
    <link href="http://yoursite.com/goroutinue-limit/"/>
    <id>http://yoursite.com/goroutinue-limit/</id>
    <published>2017-09-18T01:17:34.000Z</published>
    <updated>2017-11-15T15:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>写过爬虫的都应该考虑这个问题：不能毫无节制、毫无节操的无限制的并发爬取目标网站的内容，不然很容易被对方识别出来从而被封。</p><p>Go 的 goroutinue 机制使用起来非常简单，所以很多人比如我就喜欢用 Go 来写写爬虫。那么如何限制 goroutinue 并发数呢？</p><p>下面提供一种 Buffered Channel + sync.WaitGroup 实现对 goroutinue 并发数进行控制的思路。这种方式其实在 D&amp;K 所著的《The Go Programing Language》一书中的第八章(goroutinue and channels) 中也有提到。</p><a id="more"></a><p>具体代码如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">limiter := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">limiter &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> download(i, limiter, wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(index <span class="keyword">int</span>, limiter <span class="keyword">chan</span> <span class="keyword">bool</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Println(<span class="string">"start to download :"</span>, index)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&lt;-limiter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码中，sync.WaitGroup 主要用来管理 goroutinue ，而 limiter 这个带有缓冲的通道则是用来控制并发数。</p><p>由于通道的阻塞特性，当并发数达到规定的阈值(创建通道时指定的缓冲容量)之后, <code>limiter&lt;-true</code>就会阻塞，其后面的 <code>go download(i,limiter,wg)</code>就不会被执行到，达到了暂停产生 goroutinue 的效果，实现了对 goroutinue 并发数的控制。</p><p>当其中一个 download goroutinue 完成的时候，从 limiter 中释放了一个空位，此时，被 limiter 所阻塞的 for 循环得以继续执行，从而继续产生新的 goroutinue。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写过爬虫的都应该考虑这个问题：不能毫无节制、毫无节操的无限制的并发爬取目标网站的内容，不然很容易被对方识别出来从而被封。&lt;/p&gt;
&lt;p&gt;Go 的 goroutinue 机制使用起来非常简单，所以很多人比如我就喜欢用 Go 来写写爬虫。那么如何限制 goroutinue 并发数呢？&lt;/p&gt;
&lt;p&gt;下面提供一种 Buffered Channel + sync.WaitGroup 实现对 goroutinue 并发数进行控制的思路。这种方式其实在 D&amp;amp;K 所著的《The Go Programing Language》一书中的第八章(goroutinue and channels) 中也有提到。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="goroutinue" scheme="http://yoursite.com/tags/goroutinue/"/>
    
  </entry>
  
  <entry>
    <title>http压力测试工具--wrk</title>
    <link href="http://yoursite.com/http-benckmarking-tool-wrk/"/>
    <id>http://yoursite.com/http-benckmarking-tool-wrk/</id>
    <published>2017-09-17T02:36:55.000Z</published>
    <updated>2017-11-15T15:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个新的 http 压力测试工具 wrk ,简单好用。下载地址：<a href="https://github.com/wg/wrk" target="_blank" rel="noopener">https://github.com/wg/wrk</a> 。类似于之前个人经常使用的一些压测工具，详细请移步 <a href="/pressure-test-tools">压力测试工具ab、webbench、http_load、siege简单使用</a>。</p><p>wrk 使用非常简单，参数不多，但是足够自己简单压测一些 http 服务了。下面简单介绍下如何安装和使用。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要自己把源码下载下来，自行编译。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=<span class="number">1</span> https:<span class="comment">//github.com/wg/wrk</span></span><br><span class="line">cd wrk</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成之后，会在当前目录下生成一个 <code>wrk</code>的可执行文件。为方便以后使用，可以将其复制到系统 path 路径中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp wrk /usr/local/bin/.</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 wrk 会提示使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~ » wrk</span><br><span class="line">Usage: wrk &lt;options&gt; <span class="xml"><span class="tag">&lt;<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml">  Options:</span></span><br><span class="line">    -c, --connections &lt;N&gt;  Connections to keep open</span><br><span class="line">    -d, --duration    &lt;T&gt;  Duration of test</span><br><span class="line">    -t, --threads     &lt;N&gt;  Number of threads to use</span><br><span class="line"></span><br><span class="line">    -s, --script      &lt;S&gt;  Load Lua script file</span><br><span class="line">    -H, --header      &lt;H&gt;  Add header to request</span><br><span class="line">        --latency          Print latency statistics</span><br><span class="line">        --timeout     &lt;T&gt;  Socket/request timeout</span><br><span class="line">    -v, --version          Print version details</span><br><span class="line"></span><br><span class="line">  Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class="line">  Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure><p>使用案例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -c300 -d10m -t8 http:<span class="comment">//google.com</span></span><br></pre></td></tr></table></figure></p><p>-c300 ： 300连接<br>-d10m :  测试10分钟<br>-t8      :  使用8个线程</p><p>测试结果如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~ » wrk -c300 -d5s -t8 http:<span class="comment">//baidu.com</span></span><br><span class="line">Running <span class="number">5</span>s test @ http:<span class="comment">//baidu.com</span></span><br><span class="line">  <span class="number">8</span> threads and <span class="number">300</span> connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +<span class="regexp">/- Stdev</span></span><br><span class="line"><span class="regexp">    Latency   474.98ms  177.40ms   1.44s    77.13%</span></span><br><span class="line"><span class="regexp">    Req/</span>Sec    <span class="number">47.61</span>     <span class="number">41.14</span>   <span class="number">180.00</span>     <span class="number">79.78</span>%</span><br><span class="line">  <span class="number">516</span> requests <span class="keyword">in</span> <span class="number">5.05</span>s, <span class="number">194.51</span>KB read</span><br><span class="line">  Socket errors: connect <span class="number">0</span>, read <span class="number">2357</span>, write <span class="number">0</span>, timeout <span class="number">0</span></span><br><span class="line">Requests/sec:    <span class="number">102.18</span></span><br><span class="line">Transfer/sec:     <span class="number">38.52</span>KB</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现一个新的 http 压力测试工具 wrk ,简单好用。下载地址：&lt;a href=&quot;https://github.com/wg/wrk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wg/wrk&lt;/a&gt; 。类似于之前个人经常使用的一些压测工具，详细请移步 &lt;a href=&quot;/pressure-test-tools&quot;&gt;压力测试工具ab、webbench、http_load、siege简单使用&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;wrk 使用非常简单，参数不多，但是足够自己简单压测一些 http 服务了。下面简单介绍下如何安装和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="benchmark" scheme="http://yoursite.com/tags/benchmark/"/>
    
      <category term="wrk" scheme="http://yoursite.com/tags/wrk/"/>
    
  </entry>
  
  <entry>
    <title>python threading 多线程简单使用</title>
    <link href="http://yoursite.com/python-threading/"/>
    <id>http://yoursite.com/python-threading/</id>
    <published>2017-09-05T01:13:09.000Z</published>
    <updated>2017-11-15T15:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一个项目，使用 Flask 框架写了一个网络图片抓取的程序，当时时间紧急，多张图片下载的时候，就简简单单的使用 <code>for in</code> 循环去获取网络图片内容。后来有空了，看了下 python 的多线程的使用，挺简单的，就用 threading 重新改造了下这个程序，让其支持多线程。</p><a id="more"></a><p>python theading 多线程基本使用方式非常简单:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hello(<span class="number">*a</span>rgs):</span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">threads=[]</span><br><span class="line"></span><br><span class="line"><span class="attribute">i</span>=0</span><br><span class="line"><span class="keyword">while</span> i&lt;10:</span><br><span class="line">i+=1</span><br><span class="line">threads.append(threading.Thread(<span class="attribute">target</span>=hello))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">thread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure></p><p>当时使用 threading 的时候，遇到了一个问题: 如何获取子线程执行结果？<br>网上搜索一番，基本上有两种方案:</p><ul><li>继承 threading.Thread, 重载 run 方法。</li><li>使用外部资源，比如共享存储，队列等方式</li></ul><p>项目比较简单，所以直接选择了第一种方式来实现，避免依赖于外部资源。自己封装了一个 CustomThreader 类,代码寥寥几行，非常简单:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomThread</span>(<span class="title">threading</span>.<span class="title">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, func, args=()</span></span>)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">super</span>(CustomThread, <span class="keyword">self</span>).__init_<span class="number">_</span>()</span><br><span class="line">        <span class="keyword">self</span>.func = func</span><br><span class="line">        <span class="keyword">self</span>.args = args</span><br><span class="line">        <span class="keyword">self</span>.result = None</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.result = <span class="keyword">self</span>.func(<span class="keyword">self</span>.args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getResult</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.result</span><br></pre></td></tr></table></figure></p><p>继承了 threading.Thread, 重载了 run 方法，在 run 方法里面讲执行结果复制给了成员变量 result, 然后对外提供了一个获取返回结果的方法 getResult。<br>使用方式简单，只需要做一下改动即可：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">threads.append(CustomThread(func=hello,args=<span class="built_in">param</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">result</span>=[]</span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line"><span class="built_in">result</span>.append(thread.getResult())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一个项目，使用 Flask 框架写了一个网络图片抓取的程序，当时时间紧急，多张图片下载的时候，就简简单单的使用 &lt;code&gt;for in&lt;/code&gt; 循环去获取网络图片内容。后来有空了，看了下 python 的多线程的使用，挺简单的，就用 threading 重新改造了下这个程序，让其支持多线程。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>json-iterator--更快的json解析库</title>
    <link href="http://yoursite.com/go-json-iterator/"/>
    <id>http://yoursite.com/go-json-iterator/</id>
    <published>2017-08-31T07:24:51.000Z</published>
    <updated>2017-08-31T13:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang 中自带了非常方便解析json 的库 <code>encoding/json</code>,一般情况下也是使用这个库来作为 json 的 encode / decode。但是在有些场景下，比如解析大量json格式的日志数据的时候，json的解析性能问题就是一个需要特别关注的问题了。</p><p>滴滴出行平台技术部的开源json解析库 <a href="https://github.com/json-iterator/go" target="_blank" rel="noopener">json-iterator</a>，性能比原生的 encoding/json 快很多。</p><p>下面自己就简单测试了下两者的区别,测试代码很简单，就简单测试了下两者 Unmarshal 和 Marshal 的性能表现：<br><a id="more"></a></p><p>测试代码: <a href="https://gist.github.com/javasgl/e405c436963d2fd7c91c03a05ddcb6b9" target="_blank" rel="noopener">json-benckmark_test.go</a></p><script src="https://gist.github.com/javasgl/e405c436963d2fd7c91c03a05ddcb6b9.js"></script><p>执行 go test -test.bench=.后结果:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Benchmark_array_by_json<span class="number">-4</span>          <span class="number">500000</span>      <span class="number">2748</span> ns/op     <span class="number">456</span> B/op      <span class="number">14</span> allocs/op</span><br><span class="line">Benchmark_array_by_jsoniter<span class="number">-4</span>     <span class="number">2000000</span>       <span class="number">676</span> ns/op     <span class="number">144</span> B/op       <span class="number">3</span> allocs/op</span><br><span class="line">Benchmark_decode_by_json<span class="number">-4</span>         <span class="number">500000</span>      <span class="number">2804</span> ns/op</span><br><span class="line">Benchmark_decode_by_jsoniter<span class="number">-4</span>    <span class="number">2000000</span>       <span class="number">764</span> ns/op</span><br><span class="line">PASS</span><br><span class="line">ok  learnGo/json<span class="number">7.217</span>s</span><br></pre></td></tr></table></figure></p><p>可见，json 和 jsoniter 在 Unmarshal 和 Marshal 方面的差别还是比较大的。</p><p>go 版本的 jsoniter/go 最近已经发布了 1.0 版本，Kubernetes V1.8 准备引入这个库,见 <a href="https://github.com/json-iterator/go/issues/154。" target="_blank" rel="noopener">https://github.com/json-iterator/go/issues/154。</a></p><p>同时, jsoniter 也有 java 可以使用的库 <a href="https://github.com/json-iterator/java" target="_blank" rel="noopener">jsoniter/java</a>, 据官方测试，性能比我之前比较喜欢使用的 alibaba 的 fastjson 都还要好,以后有机会可以尝试下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang 中自带了非常方便解析json 的库 &lt;code&gt;encoding/json&lt;/code&gt;,一般情况下也是使用这个库来作为 json 的 encode / decode。但是在有些场景下，比如解析大量json格式的日志数据的时候，json的解析性能问题就是一个需要特别关注的问题了。&lt;/p&gt;
&lt;p&gt;滴滴出行平台技术部的开源json解析库 &lt;a href=&quot;https://github.com/json-iterator/go&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;json-iterator&lt;/a&gt;，性能比原生的 encoding/json 快很多。&lt;/p&gt;
&lt;p&gt;下面自己就简单测试了下两者的区别,测试代码很简单，就简单测试了下两者 Unmarshal 和 Marshal 的性能表现：&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="json-iterator" scheme="http://yoursite.com/tags/json-iterator/"/>
    
      <category term="encoding" scheme="http://yoursite.com/tags/encoding/"/>
    
      <category term="fastjson" scheme="http://yoursite.com/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>codis dashboard 无法启动处理流程</title>
    <link href="http://yoursite.com/codis-dashboard/"/>
    <id>http://yoursite.com/codis-dashboard/</id>
    <published>2017-08-31T07:03:20.000Z</published>
    <updated>2018-04-01T23:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 codis 过程中，当 codis dashboard 异常挂掉之后，重启 codis-dashboard的时候，无法启动，日志报错信息为：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">43</span>:<span class="number">46</span> dashboard.go:<span class="number">234</span>: [PANIC] create zk <span class="keyword">node</span> <span class="title">failed</span></span><br><span class="line">[error]: dashboard already exists: &#123;<span class="string">"addr"</span>: <span class="string">"192.168.0.1:28087"</span>, <span class="string">"pid"</span>: <span class="number">15716</span>&#125;</span><br></pre></td></tr></table></figure></p><p>提示无法创建 zookeeper node,因为已经存在 dashboard node 了。</p><p>处理方案：连上 zookeeper, 删除相应的节点后重新启动 codis-dashboard。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/zookeeper/</span>bin/zkCli.sh -server <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2181</span></span><br><span class="line">delete <span class="meta-keyword">/zk/</span>path/dashboard</span><br></pre></td></tr></table></figure></p><p>codis-dashboard 重新起来之后，发现还是无法连接 codis。<br><a id="more"></a><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">160</span>: [INFO] dashboard listening on addr: :<span class="number">28087</span></span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">143</span>: [INFO] dashboard node created: /zk/codis/path/dashboard, &#123;<span class="string">"addr"</span>: <span class="string">"192.168.0.1:28087"</span>, <span class="string">"pid"</span>: <span class="number">10261</span>&#125;</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">144</span>: [WARN] ********** Attention **********</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">145</span>: [WARN] You should use `<span class="built_in">kill</span> &#123;pid&#125;` rather than `<span class="built_in">kill</span> -<span class="number">9</span> &#123;pid&#125;` to stop me,</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">146</span>: [WARN] <span class="keyword">or</span> the node resisted on zk will <span class="keyword">not</span> be cleaned when I'm quiting <span class="keyword">and</span> you must <span class="built_in">remove</span> it manually</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">53</span> dashboard.<span class="built_in">go</span>:<span class="number">147</span>: [WARN] *******************************</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">09</span> proxy.<span class="built_in">go</span>:<span class="number">191</span>: [INFO] mark_offline, check proxy <span class="built_in">status</span>:proxy_1&lt;nil&gt; zk: node does <span class="keyword">not</span> exist</span><br><span class="line"><span class="number">2017</span>/<span class="number">08</span>/<span class="number">31</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">09</span> proxy.<span class="built_in">go</span>:<span class="number">193</span>: [INFO] shutdown proxy successful</span><br></pre></td></tr></table></figure></p><p>这时候需要访问 <a href="http://192.192.168.0.1:28087/admin" target="_blank" rel="noopener">http://192.192.168.0.1:28087/admin</a> ，找到最后的 proxy status。将相应的 proxy Mark Online 即可。<br>启动日志中也提到了，对于 kill -9 pid 停止 codis 的情况，需要手动删除 zookeeper 相应的节点。</p><p>zookeeper 常用命令，使用 help 查看:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">stat path [watch]</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">path</span> <span class="keyword">data</span> [<span class="keyword">version</span>]</span><br><span class="line">ls <span class="keyword">path</span> [watch]</span><br><span class="line">delquota [-n|-b] <span class="keyword">path</span></span><br><span class="line">ls2 <span class="keyword">path</span> [watch]</span><br><span class="line">setAcl <span class="keyword">path</span> acl</span><br><span class="line">setquota -n|-b val <span class="keyword">path</span></span><br><span class="line">history</span><br><span class="line"><span class="keyword">redo</span> cmdno</span><br><span class="line">printwatches <span class="keyword">on</span>|<span class="keyword">off</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">path</span> [<span class="keyword">version</span>]</span><br><span class="line"><span class="keyword">sync</span> <span class="keyword">path</span></span><br><span class="line">listquota <span class="keyword">path</span></span><br><span class="line">rmr <span class="keyword">path</span></span><br><span class="line"><span class="keyword">get</span> <span class="keyword">path</span> [watch]</span><br><span class="line"><span class="keyword">create</span> [-s] [-e] <span class="keyword">path</span> <span class="keyword">data</span> acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit</span><br><span class="line">getAcl <span class="keyword">path</span></span><br><span class="line"><span class="keyword">close</span></span><br><span class="line"><span class="keyword">connect</span> host:port</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 codis 过程中，当 codis dashboard 异常挂掉之后，重启 codis-dashboard的时候，无法启动，日志报错信息为：&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;08&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;46&lt;/span&gt; dashboard.go:&lt;span class=&quot;number&quot;&gt;234&lt;/span&gt;: [PANIC] create zk &lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;failed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[error]: dashboard already exists: &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;addr&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;192.168.0.1:28087&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;pid&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;15716&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;提示无法创建 zookeeper node,因为已经存在 dashboard node 了。&lt;/p&gt;
&lt;p&gt;处理方案：连上 zookeeper, 删除相应的节点后重新启动 codis-dashboard。&lt;br&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;meta-keyword&quot;&gt;/zookeeper/&lt;/span&gt;bin/zkCli.sh -server &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2181&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete &lt;span class=&quot;meta-keyword&quot;&gt;/zk/&lt;/span&gt;path/dashboard&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;codis-dashboard 重新起来之后，发现还是无法连接 codis。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="codis" scheme="http://yoursite.com/tags/codis/"/>
    
      <category term="zookeeper" scheme="http://yoursite.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>可变参数使用</title>
    <link href="http://yoursite.com/variable-parameter/"/>
    <id>http://yoursite.com/variable-parameter/</id>
    <published>2017-08-30T01:11:38.000Z</published>
    <updated>2017-08-30T15:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多语言都支持可变参数，下面记录下平时主要使用的几种语言的可变参数用法。主要有 go、php、python、java、js等语言的可变参数的基本使用。</p><a id="more"></a><h2 id="go-可变参数"><a href="#go-可变参数" class="headerlink" title="go 可变参数"></a>go 可变参数</h2><p>go 可变参数只能是最后一个参数，参数接收后存放在一个 slice 中。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">hello(<span class="string">"variable parameter"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">3</span>)</span><br><span class="line">hello(<span class="string">"second"</span>, []<span class="keyword">int</span>&#123;<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(b <span class="keyword">string</span>, args ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(args)</span><br><span class="line">fmt.Println(reflect.TypeOf(args))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">variable parameter</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">45</span> <span class="number">56</span> <span class="number">3</span>]</span><br><span class="line">[]int</span><br><span class="line">second</span><br><span class="line">[<span class="number">22</span> <span class="number">33</span> <span class="number">44</span>]</span><br><span class="line">[]int</span><br></pre></td></tr></table></figure></p><h2 id="php-可变参数"><a href="#php-可变参数" class="headerlink" title="php 可变参数"></a>php 可变参数</h2><p>可变参数也只能是最后一个参数,参数接收后存放在一个 array 中。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">( $a , <span class="rest_arg">...$args</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print_r( $a );</span><br><span class="line">echo PHP_EOL . <span class="string">'.....'</span> . PHP_EOL;</span><br><span class="line">print_r( $args );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello( <span class="string">'first'</span> , <span class="number">1</span> , <span class="number">2</span> , <span class="string">'string'</span> , <span class="number">4</span> , <span class="string">"5"</span> );</span><br><span class="line">hello( <span class="string">'second'</span> , ...[ <span class="number">22</span> , <span class="number">33</span> , <span class="number">44</span> , <span class="number">55</span> ] );</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">first</span><br><span class="line">.....</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="type">string</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">5</span></span><br><span class="line">)</span><br><span class="line">second</span><br><span class="line">.....</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">22</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">33</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">44</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">55</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="python-可变参数"><a href="#python-可变参数" class="headerlink" title="python 可变参数"></a>python 可变参数</h2><p>python的可变参数有两个种方式</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line">def hello(a,b,*c,**kwargs):</span><br><span class="line">    print a,b,c,kwargs</span><br><span class="line"></span><br><span class="line">hello(<span class="string">"first"</span>,<span class="string">"second"</span>)</span><br><span class="line">hello(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>,<span class="string">"fourth"</span>,order=<span class="string">"asc"</span>,group=<span class="string">"admin"</span>)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">first <span class="title">second</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function">first <span class="title">second</span> (<span class="params"><span class="string">'third'</span>, <span class="string">'fourth'</span></span>) </span>&#123;<span class="string">'group'</span>: <span class="string">'admin'</span>, <span class="string">'order'</span>: <span class="string">'asc'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>python 中可变参数方式一：<em>arg,这种可变参数传递时不需要指定参数的key，参数接收后存放在 tuple 中。<br>python 中可变参数方式二：*</em>kwargs，这种方式接收的参数需要指定参数的key，参数接收后存放在 dict 中。</p><h2 id="java-可变参数"><a href="#java-可变参数" class="headerlink" title="java 可变参数"></a>java 可变参数</h2><p>Java 的可变参数只有能有一个，并且必须是方法的最后一个参数。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Hello&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">      hello(<span class="string">"first"</span>,<span class="number">2</span>,<span class="string">"args1"</span>,<span class="string">"args2"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> hello(<span class="keyword">String</span> a,<span class="keyword">int</span> b,<span class="keyword">String</span>... args)&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(a);</span><br><span class="line">    System.out.<span class="built_in">println</span>(b);</span><br><span class="line">    <span class="built_in">for</span>(<span class="keyword">String</span> param :args)&#123;</span><br><span class="line">      System.out.<span class="built_in">println</span>(param);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">first</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">args1</span><br><span class="line">args2</span><br></pre></td></tr></table></figure></p><p>可变参数存放于数组之中。</p><h2 id="js-可变参数"><a href="#js-可变参数" class="headerlink" title="js 可变参数"></a>js 可变参数</h2><p>js 可变参数可以通过js内置的 arguments 来访问：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a:'</span>+a);</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">"first"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'string'</span>)</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>:<span class="keyword">first</span></span><br><span class="line"><span class="keyword">first</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">string</span></span><br></pre></td></tr></table></figure></p><p>arguments 中也包含了其他非可变参数的内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多语言都支持可变参数，下面记录下平时主要使用的几种语言的可变参数用法。主要有 go、php、python、java、js等语言的可变参数的基本使用。&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
